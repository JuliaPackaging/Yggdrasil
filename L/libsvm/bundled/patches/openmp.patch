diff -u libsvm-322/svm.cpp libsvm-322-multi/svm.cpp
--- libsvm-322/svm.cpp	2016-12-21 19:09:27.000000000 +0000
+++ libsvm-322-multi/svm.cpp	2020-06-03 11:56:52.331804400 +0100
@@ -8,6 +8,14 @@
 #include <limits.h>
 #include <locale.h>
 #include "svm.h"
+
+#ifdef ENABLEOPENMP
+    #include "omp.h"
+#else
+    #define omp_get_max_threads() 0
+    #define omp_set_num_threads(num_threads) void
+#endif
+
 int libsvm_version = LIBSVM_VERSION;
 typedef float Qfloat;
 typedef signed char schar;
@@ -1282,6 +1290,7 @@
 		int start, j;
 		if((start = cache->get_data(i,&data,len)) < len)
 		{
+			#pragma omp parallel for private(j) schedule(guided)
 			for(j=start;j<len;j++)
 				data[j] = (Qfloat)(y[i]*y[j]*(this->*kernel_function)(i,j));
 		}
@@ -1397,6 +1406,7 @@
 		int j, real_i = index[i];
 		if(cache->get_data(real_i,&data,l) < l)
 		{
+			#pragma omp parallel for private(i) schedule(guided)
 			for(j=0;j<l;j++)
 				data[j] = (Qfloat)(this->*kernel_function)(real_i,j);
 		}
@@ -2507,6 +2517,7 @@
 	{
 		double *sv_coef = model->sv_coef[0];
 		double sum = 0;
+		#pragma omp parallel for private(i) reduction(+:sum) schedule(guided)
 		for(i=0;i<model->l;i++)
 			sum += sv_coef[i] * Kernel::k_function(x,model->SV[i],model->param);
 		sum -= model->rho[0];
@@ -2523,6 +2534,7 @@
 		int l = model->l;
 		
 		double *kvalue = Malloc(double,l);
+		#pragma omp parallel for private(i) schedule(guided)
 		for(i=0;i<l;i++)
 			kvalue[i] = Kernel::k_function(x,model->SV[i],model->param);
 
@@ -3179,3 +3191,13 @@
 	else
 		svm_print_string = print_func;
 }
+
+void svm_set_num_threads(int num_threads)
+{
+	omp_set_num_threads(num_threads);
+}
+
+int svm_get_max_threads()
+{
+	return omp_get_max_threads();
+}
diff -u libsvm-322/svm.h libsvm-322-multi/svm.h
--- libsvm-322/svm.h	2016-12-21 19:09:27.000000000 +0000
+++ libsvm-322-multi/svm.h	2020-06-03 11:57:33.599495400 +0100
@@ -97,6 +97,10 @@
 
 void svm_set_print_string_function(void (*print_func)(const char *));
 
+void svm_set_num_threads(int num_threads);
+
+int svm_get_max_threads();
+
 #ifdef __cplusplus
 }
 #endif

