From 3e374944919e83f433aa0908ad0c235f9c8b45e7 Mon Sep 17 00:00:00 2001
From: Gnimuc <qiyupei@gmail.com>
Date: Sat, 1 Jun 2024 18:03:33 +0900
Subject: [PATCH] Rewrite CMake build scripts

---
 CMakeLists.txt                           | 505 +++--------------------
 include/CMakeLists.txt                   |   1 +
 include/clang/CMakeLists.txt             |   1 +
 include/clang/Interpreter/CMakeLists.txt |   1 +
 lib/Interpreter/CMakeLists.txt           | 116 +-----
 5 files changed, 73 insertions(+), 551 deletions(-)
 create mode 100644 include/CMakeLists.txt
 create mode 100644 include/clang/CMakeLists.txt
 create mode 100644 include/clang/Interpreter/CMakeLists.txt

diff --git a/CMakeLists.txt b/CMakeLists.txt
index b87a263..1dfd11c 100644
--- a/CMakeLists.txt
+++ b/CMakeLists.txt
@@ -1,452 +1,71 @@
-cmake_minimum_required(VERSION 3.13)
+cmake_minimum_required(VERSION 3.21)
 
-enable_language(CXX)
-set(CMAKE_CXX_EXTENSIONS NO)
+project(CppInterOp LANGUAGES CXX)
 
-include(GNUInstallDirs)
+set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -fPIC -fno-rtti")
 
-set(CMAKE_MODULE_PATH
-  ${CMAKE_MODULE_PATH}
-  "${CMAKE_CURRENT_SOURCE_DIR}/cmake"
-  "${CMAKE_CURRENT_SOURCE_DIR}/cmake/modules"
-  )
+# Turn on using VS solution folders
+set_property(GLOBAL PROPERTY USE_FOLDERS ON)
 
-# If we are not building as a part of LLVM, build CppInterOp as a standalone
-# project, using LLVM as an external library:
-if( CMAKE_SOURCE_DIR STREQUAL CMAKE_CURRENT_SOURCE_DIR )
-  project(CppInterOp)
+set(CMAKE_WINDOWS_EXPORT_ALL_SYMBOLS ON)
 
-  # LLVM/Clang/Cling default paths
-  if (DEFINED LLVM_DIR)
-    if (NOT DEFINED Clang_DIR)
-      set(Clang_DIR ${LLVM_DIR})
-    endif()
-    if (NOT DEFINED Cling_DIR)
-      set(Cling_DIR ${LLVM_DIR})
-    endif()
-  endif()
-  if (DEFINED Clang_DIR)
-    if (NOT DEFINED LLVM_DIR)
-      set(LLVM_DIR ${Clang_DIR})
-    endif()
-    if (NOT DEFINED Cling_DIR)
-      set(Cling_DIR ${Clang_DIR})
-    endif()
-  endif()
-  if (DEFINED Cling_DIR)
-    if (NOT DEFINED LLVM_DIR)
-      set(LLVM_DIR ${Cling_DIR})
-    endif()
-    if (NOT DEFINED Clang_DIR)
-      set(Clang_DIR ${Cling_DIR})
-    endif()
-  endif()
+find_package(LLVM REQUIRED CONFIG)
+message(STATUS "Found LLVM ${LLVM_PACKAGE_VERSION}")
+message(STATUS "Using LLVMConfig.cmake in: ${LLVM_DIR}")
 
-  option(USE_CLING "Use Cling as backend" OFF)
-  option(USE_REPL "Use clang-repl as backend" OFF)
+find_package(Clang REQUIRED CONFIG)
+message(STATUS "Found Clang ${Clang_PACKAGE_VERSION}")
+message(STATUS "Using ClangConfig.cmake in: ${Clang_DIR}")
 
-  if (USE_CLING)
-    add_definitions(-DUSE_CLING)
-  endif()
-  if (USE_REPL)
-    add_definitions(-DUSE_REPL)
-  endif()
-
-  if (USE_CLING AND USE_REPL)
-    message(FATAL_ERROR "We can only use Cling (USE_CLING=On) or Repl (USE_REPL=On), but not both of them.")
-  endif()
-  
-  ## Define supported version of clang and llvm
-
-  set(CLANG_MIN_SUPPORTED 13.0)
-  set(CLANG_MAX_SUPPORTED "18.1.x")
-  set(CLANG_VERSION_UPPER_BOUND 19.0.0)
-  set(LLVM_MIN_SUPPORTED 13.0)
-  set(LLVM_MAX_SUPPORTED "18.1.x")
-  set(LLVM_VERSION_UPPER_BOUND 19.0.0)
-
-  ## Set Cmake packages search order
-
-  set(CMAKE_FIND_PACKAGE_SORT_ORDER NATURAL)
-  set(CMAKE_FIND_PACKAGE_SORT_DIRECTION DEC)
-
-  ## Search packages HINTS and PATHS
-
-  if (DEFINED LLVM_DIR)
-    set(llvm_search_hints PATHS ${LLVM_DIR} HINTS "${LLVM_DIR}/lib/cmake/llvm" "${LLVM_DIR}/cmake" "${LLVM_CONFIG_EXTRA_PATH_HINTS}")
-    set(clang_search_hints PATHS ${LLVM_DIR} HINTS "${LLVM_DIR}/lib/cmake/clang" "${LLVM_DIR}/cmake")
-  endif()
-  if (DEFINED Clang_DIR)
-    set(llvm_search_hints PATHS ${Clang_DIR} HINTS "${Clang_DIR}/lib/cmake/llvm" "${Clang_DIR}/cmake")
-    set(clang_search_hints PATHS ${Clang_DIR} HINTS "${clang_search_hints}" "${Clang_DIR}/lib/cmake/clang" "${Clang_DIR}/cmake" "${CLANG_CONFIG_EXTRA_PATH_HINTS}")
-  endif()
-  if (DEFINED Cling_DIR)
-    set(cling_search_hints PATHS ${Cling_DIR} HINTS "${Cling_DIR}/lib/cmake/cling" "${Cling_DIR}/cmake" "${CLING_CONFIG_EXTRA_PATH_HINTS}")
-  endif()
-
-  ## Find supported LLVM
-
-  if (USE_CLING)
-    message(STATUS "Mode USE_CLING = ON")
-    find_package(LLVM REQUIRED CONFIG ${llvm_search_hints} NO_DEFAULT_PATH)
-    find_package(Clang REQUIRED CONFIG ${clang_search_hints} NO_DEFAULT_PATH)
-    find_package(Cling REQUIRED CONFIG ${cling_search_hints} NO_DEFAULT_PATH)
-  endif(USE_CLING)
-
-  if (LLVM_FOUND)
-    if (LLVM_PACKAGE_VERSION VERSION_LESS LLVM_MIN_SUPPORTED OR LLVM_PACKAGE_VERSION VERSION_GREATER_EQUAL LLVM_VERSION_UPPER_BOUND)
-      unset(LLVM_FOUND)
-      unset(LLVM_VERSION_MAJOR)
-      unset(LLVM_VERSION_MINOR)
-      unset(LLVM_VERSION_PATCH)
-      unset(LLVM_PACKAGE_VERSION)
-    else()
-      if (NOT DEFINED LLVM_VERSION AND NOT DEFINED LLVM_DIR)
-        set(LLVM_VERSION ${LLVM_PACKAGE_VERSION})
-      endif()
-    endif()
-  endif()
-
-  if (NOT LLVM_FOUND AND DEFINED LLVM_VERSION)
-    if (LLVM_VERSION VERSION_GREATER_EQUAL LLVM_VERSION_UPPER_BOUND)
-      set(LLVM_VERSION ${LLVM_VERSION_UPPER_BOUND})
-    endif()
-    if (LLVM_VERSION VERSION_LESS LLVM_MIN_SUPPORTED)
-      set(LLVM_VERSION ${LLVM_MIN_SUPPORTED})
-    endif()
-
-    find_package(LLVM ${LLVM_VERSION} REQUIRED CONFIG ${llvm_search_hints} NO_DEFAULT_PATHS)
-  endif()
-
-  if (NOT LLVM_FOUND AND DEFINED LLVM_DIR)
-    find_package(LLVM REQUIRED CONFIG ${llvm_search_hints} NO_DEFAULT_PATH)
-  endif()
-
-  if (NOT LLVM_FOUND)
-    find_package(LLVM REQUIRED CONFIG)
-  endif()
-
-  if (NOT LLVM_FOUND)
-    message(FATAL_ERROR "Please set LLVM_DIR pointing to the LLVM build or installation folder")
-  endif()
-
-  if (LLVM_PACKAGE_VERSION VERSION_LESS LLVM_MIN_SUPPORTED OR LLVM_PACKAGE_VERSION VERSION_GREATER_EQUAL LLVM_VERSION_UPPER_BOUND)
-    message(FATAL_ERROR "Found unsupported version: LLVM ${LLVM_PACKAGE_VERSION};\nPlease set LLVM_DIR pointing to the llvm version ${LLVM_MIN_SUPPORTED} to ${LLVM_MAX_SUPPORTED} build or installation folder")
-  endif()
-
-  message(STATUS "Found supported version: LLVM ${LLVM_PACKAGE_VERSION}")
-  message(STATUS "Using LLVMConfig.cmake in: ${LLVM_DIR}")
-
-  ## Find supported Clang
-
-  if (DEFINED CLANG_VERSION)
-    if (CLANG_VERSION VERSION_GREATER_EQUAL CLANG_VERSION_UPPER_BOUND)
-      set(CLANG_VERSION ${CLANG_VERSION_UPPER_BOUND})
-    endif()
-    if (CLANG_VERSION VERSION_LESS CLANG_MIN_SUPPORTED)
-      set(CLANG_VERSION ${CLANG_MIN_SUPPORTED})
-    endif()
-
-    find_package(Clang ${CLANG_VERSION} REQUIRED CONFIG ${clang_search_hints} NO_DEFAULT_PATH)
-  endif()
-
-  if (NOT Clang_FOUND AND DEFINED Clang_DIR)
-    find_package(Clang REQUIRED CONFIG ${clang_search_hints} NO_DEFAULT_PATH)
-  endif()
-
-  if (NOT Clang_FOUND)
-    find_package(Clang REQUIRED CONFIG)
-  endif()
-
-  if (NOT Clang_FOUND)
-    message(FATAL_ERROR "Please set Clang_DIR pointing to the clang build or installation folder")
-  endif()
-
-  set(CLANG_VERSION_MAJOR ${LLVM_VERSION_MAJOR})
-  set(CLANG_VERSION_MINOR ${LLVM_VERSION_MINOR})
-  set(CLANG_VERSION_PATCH ${LLVM_VERSION_PATCH})
-  set(CLANG_PACKAGE_VERSION ${LLVM_PACKAGE_VERSION})
-
-  if (CLANG_PACKAGE_VERSION VERSION_LESS CLANG_MIN_SUPPORTED OR CLANG_PACKAGE_VERSION VERSION_GREATER_EQUAL CLANG_VERSION_UPPER_BOUND)
-    message(FATAL_ERROR "Found unsupported version: Clang ${CLANG_PACKAGE_VERSION};\nPlease set Clang_DIR pointing to the clang version ${CLANG_MIN_SUPPORTED} to ${CLANG_MAX_SUPPORTED} build or installation folder")
-  endif()
-
-  message(STATUS "Found supported version: Clang ${CLANG_PACKAGE_VERSION}")
-  message(STATUS "Using ClangConfig.cmake in: ${Clang_DIR}")
-
-  ## Clang 13 require c++14 or later, Clang 16 require c++17 or later.
-  if (CLANG_VERSION_MAJOR GREATER_EQUAL 16)
-    if (NOT CMAKE_CXX_STANDARD)
-      set (CMAKE_CXX_STANDARD 17)
-    endif()
-    if (CMAKE_CXX_STANDARD LESS 17)
-      message(fatal "LLVM/CppInterOp requires c++17 or later")
-    endif()
-  elseif (CLANG_VERSION_MAJOR GREATER_EQUAL 13)
-    if (NOT CMAKE_CXX_STANDARD)
-      set (CMAKE_CXX_STANDARD 14)
-    endif()
-    if (CMAKE_CXX_STANDARD LESS 14)
-      message(fatal "LLVM/CppInterOp requires c++14 or later")
-    endif()
-  endif()
-  
-  ## Find supported Cling
-  
-  if (USE_CLING)
-    if (NOT Cling_FOUND AND DEFINED Cling_DIR)
-      find_package(Cling REQUIRED CONFIG ${cling_extra_hints} NO_DEFAULT_PATH)
-    endif()
-
-    if (NOT Cling_FOUND)
-      find_package(Cling REQUIRED CONFIG)
-    endif()
-
-    if (NOT Cling_FOUND)
-      message(FATAL_ERROR "Please set Cling_DIR pointing to the cling build or installation folder")
-    endif()
-
-    message(STATUS "Found supported version: Cling ${CLING_PACKAGE_VERSION}")
-    message(STATUS "Using ClingConfig.cmake in: ${Cling_DIR}")
-
-  endif()
-
-  #Replace \ with / in LLVM_DIR (attempt to fix path parsing issue Windows)
-  string(REPLACE "\\" "/" LLVM_DIR "${LLVM_DIR}")
-
-  # When in debug mode the llvm package thinks it is built with -frtti.
-  # For consistency we should set it to the correct value.
-  set(LLVM_CONFIG_HAS_RTTI NO CACHE BOOL "" FORCE)
-
-  ## Init
-
-  # In case this was a path to a build folder of llvm still try to find AddLLVM
-  list(APPEND CMAKE_MODULE_PATH "${LLVM_DIR}")
-
-  # Fix bug in some AddLLVM.cmake implementation (-rpath "" problem)
-  set(LLVM_LIBRARY_OUTPUT_INTDIR ${CMAKE_CURRENT_BINARY_DIR}/${CMAKE_CFG_INTDIR}/lib${LLVM_LIBDIR_SUFFIX})
-
-  include(AddLLVM)
-  include(HandleLLVMOptions)
-
-  set(CMAKE_INCLUDE_CURRENT_DIR ON)
-
-  # In rare cases we might want to have clang installed in a different place
-  # than llvm and the header files should be found first (even though the
-  # LLVM_INCLUDE_DIRS) contain clang headers, too.
-  if (USE_CLING)
-    include_directories(SYSTEM ${CLING_INCLUDE_DIRS})
-  endif(USE_CLING)
-  include_directories(SYSTEM ${CLANG_INCLUDE_DIRS})
-  include_directories(SYSTEM ${LLVM_INCLUDE_DIRS})
-  separate_arguments(LLVM_DEFINITIONS_LIST NATIVE_COMMAND ${LLVM_DEFINITIONS})
-  add_definitions(${LLVM_DEFINITIONS_LIST})
-
-  if (USE_CLING)
-    message(STATUS "CLING_INCLUDE_DIRS: ${CLING_INCLUDE_DIRS}")
-  endif(USE_CLING)
-  message(STATUS "CLANG_INCLUDE_DIRS: ${CLANG_INCLUDE_DIRS}")
-  message(STATUS "LLVM_INCLUDE_DIRS: ${LLVM_INCLUDE_DIRS}")
-  message(STATUS "LLVM_DEFINITIONS_LIST: ${LLVM_DEFINITIONS_LIST}")
-
-  # If the llvm sources are present add them with higher priority.
-  if (LLVM_BUILD_MAIN_SRC_DIR)
-    # LLVM_INCLUDE_DIRS contains the include paths to both LLVM's source and
-    # build directories. Since we cannot just include ClangConfig.cmake (see
-    # fixme above) we have to do a little more work to get the right include
-    # paths for clang.
-    #
-    # FIXME: We only support in-tree builds of clang, that is clang being built
-    # in llvm_src/tools/clang.
-    include_directories(SYSTEM ${LLVM_BUILD_MAIN_SRC_DIR}/tools/clang/include/)
-
-    if (NOT LLVM_BUILD_BINARY_DIR)
-      message(FATAL "LLVM_BUILD_* values should be available for the build tree")
-    endif()
-
-    include_directories(SYSTEM ${LLVM_BUILD_BINARY_DIR}/tools/clang/include/)
-  endif()
-
-  set(CMAKE_LIBRARY_OUTPUT_DIRECTORY ${CMAKE_BINARY_DIR}/lib/)
-  set(CMAKE_RUNTIME_OUTPUT_DIRECTORY ${CMAKE_BINARY_DIR}/bin/)
-
-  set( CPPINTEROP_BUILT_STANDALONE 1 )
-endif()
-
-## Code Coverage Configuration
-add_library(coverage_config INTERFACE)
-option(CODE_COVERAGE "Enable coverage reporting" OFF)
-if(CODE_COVERAGE AND CMAKE_CXX_COMPILER_ID MATCHES "GNU|Clang")
-  string(TOUPPER "${CMAKE_BUILD_TYPE}" uppercase_CMAKE_BUILD_TYPE)
-  if(NOT uppercase_CMAKE_BUILD_TYPE STREQUAL "DEBUG")
-    message(FATAL_ERROR "CodeCov enabled on non-debug build!")
-  endif()
-  set(GCC_COVERAGE_COMPILE_FLAGS "-fprofile-arcs -ftest-coverage")
-  set(GCC_COVERAGE_LINK_FLAGS    "--coverage")
-  set(CMAKE_CXX_FLAGS            "${CMAKE_CXX_FLAGS} ${GCC_COVERAGE_COMPILE_FLAGS}")
-  set(CMAKE_EXE_LINKER_FLAGS     "${CMAKE_EXE_LINKER_FLAGS} ${GCC_COVERAGE_LINK_FLAGS}")
-  set(CMAKE_SHARED_LINKER_FLAGS  "${CMAKE_SHAREDLINKER_FLAGS} ${GCC_COVERAGE_LINK_FLAGS}")
-  set(CMAKE_SHARED_LIBRARY_CREATE_CXX_FLAGS "${CMAKE_SHARED_LIBRARY_CREATE_CXX_FLAGS} ${GCC_COVERAGE_COMPILE_FLAGS}")
-endif()
-
-if( CMAKE_SOURCE_DIR STREQUAL CMAKE_BINARY_DIR AND NOT MSVC_IDE )
-  message(FATAL_ERROR "In-source builds are not allowed. CMake would overwrite "
-"the makefiles distributed with LLVM. Please create a directory and run cmake "
-"from there, passing the path to this source directory as the last argument. "
-"This process created the file `CMakeCache.txt' and the directory "
-"`CMakeFiles'. Please delete them.")
-endif()
-
-# Add appropriate flags for GCC
-if (LLVM_COMPILER_IS_GCC_COMPATIBLE)
-  set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -fno-common -Woverloaded-virtual -Wcast-qual -fno-strict-aliasing -pedantic -Wno-long-long -Wall -W -Wno-unused-parameter -Wwrite-strings")
-endif ()
-
-# Fixes "C++ exception handler used, but unwind semantics are not enabled" warning Windows
-if (WIN32)
-  set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} /EHsc")
-endif ()
-
-if (APPLE)
-  set(CMAKE_MODULE_LINKER_FLAGS "-Wl,-flat_namespace -Wl,-undefined -Wl,suppress")
-endif ()
-
-# FIXME: Use merge this with the content from the LLVMConfig and ClangConfig.
-if (NOT CPPINTEROP_BUILT_STANDALONE)
-include_directories(BEFORE SYSTEM
-  ${CMAKE_CURRENT_BINARY_DIR}/../clang/include
-  ${CMAKE_CURRENT_SOURCE_DIR}/../clang/include
-  )
-endif()
-
-include_directories(BEFORE SYSTEM
-  ${CMAKE_CURRENT_BINARY_DIR}/include
-  ${CMAKE_CURRENT_SOURCE_DIR}/include
-  )
-
-#Removes flag due to issue with Google test download when LLVM_ENABLE_WERROR=On
-string(REPLACE "-Wcovered-switch-default" "" CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS}")
-
-file(STRINGS "VERSION" CPPINTEROP_VERSION)
-string(REPLACE "." ";" VERSION_LIST "${CPPINTEROP_VERSION}")
-list(GET VERSION_LIST 0 CPPINTEROP_VERSION_MAJOR)
-list(GET VERSION_LIST 1 CPPINTEROP_VERSION_MINOR)
-list(GET VERSION_LIST 2 CPPINTEROP_VERSION_PATCH)
-
-configure_file(
-  ${CMAKE_CURRENT_SOURCE_DIR}/cmake/CppInterOp/CppInterOpConfig.cmake.in
-  ${CMAKE_CURRENT_BINARY_DIR}/lib/cmake/CppInterOp/CppInterOpConfig.cmake
-  @ONLY)
-configure_file(
-  ${CMAKE_CURRENT_SOURCE_DIR}/cmake/CppInterOp/CppInterOpConfigVersion.cmake.in
-  ${CMAKE_CURRENT_BINARY_DIR}/lib/cmake/CppInterOp/CppInterOpConfigVersion.cmake
-  @ONLY)
-install(DIRECTORY ${CMAKE_CURRENT_BINARY_DIR}/lib/cmake/CppInterOp/
-  DESTINATION lib/cmake/CppInterOp
-  FILES_MATCHING
-  PATTERN "*.cmake"
-  )
-
-
-install(DIRECTORY include/
-  DESTINATION include
-  FILES_MATCHING
-  PATTERN "*.def"
-  PATTERN "*.h"
-  PATTERN ".svn" EXCLUDE
-  )
-
-install(DIRECTORY tools/
-  DESTINATION include/CppInterOp/tools
-  FILES_MATCHING
-  PATTERN "*.h"
-)
-
-install(DIRECTORY ${CMAKE_CURRENT_BINARY_DIR}/include/
-  DESTINATION include
-  FILES_MATCHING
-  PATTERN "CMakeFiles" EXCLUDE
-  PATTERN "*.inc"
-  )
-
-add_definitions( -D_GNU_SOURCE )
-
-# Add deps if we build together with clang.
-if (TARGET intrinsics_gen)
-  list(APPEND LLVM_COMMON_DEPENDS intrinsics_gen)
-endif()
-if (TARGET clang-headers)
-  list(APPEND LLVM_COMMON_DEPENDS clang-headers)
-endif()
-
-# Generate docs for CppInterOp
-option(CPPINTEROP_INCLUDE_DOCS "Generate build targets for the CppInterOp docs.")
-option(CPPINTEROP_ENABLE_DOXYGEN "Use doxygen to generate CppInterOp interal API documentation.")
-option(CPPINTEROP_ENABLE_SPHINX "Use sphinx to generage CppInterOp user documentation")
-
-
-if(EMSCRIPTEN)
-    message("Build with emscripten")
-    option(CPPINTEROP_ENABLE_TESTING "Enables the testing infrastructure." OFF)
-else()
-    message("Build with cmake")
-    option(CPPINTEROP_ENABLE_TESTING "Enables the testing infrastructure." ON)
-endif()
-
-if(MSVC)
-
-  set(MSVC_EXPORTLIST
-   ??_7type_info@@6B@
-   ?nothrow@std@@3Unothrow_t@1@B
-   _Init_thread_header
-   _Init_thread_footer
-   ??_7type_info@@6B@
-   ?_Facet_Register@std@@YAXPEAV_Facet_base@1@@Z
-  )
-
-  set(MSVC_EXPORTLIST ${MSVC_EXPORTLIST}
-   ??2@YAPEAX_K@Z
-   ??3@YAXPEAX@Z
-   ??3@YAXPEAX_K@Z
-   ??_U@YAPEAX_K@Z
-   ??_V@YAXPEAX@Z
-   ??_V@YAXPEAX_K@Z
-   ??2@YAPEAX_KAEBUnothrow_t@std@@@Z
-   ??_U@YAPEAX_KAEBUnothrow_t@std@@@Z
-   ??6?$basic_ostream@DU?$char_traits@D@std@@@std@@QEAAAEAV01@H@Z
-   ??6?$basic_ostream@DU?$char_traits@D@std@@@std@@QEAAAEAV01@M@Z
-   ??6?$basic_ostream@DU?$char_traits@D@std@@@std@@QEAAAEAV01@N@Z
-   ??6?$basic_ostream@DU?$char_traits@D@std@@@std@@QEAAAEAV01@PEBX@Z
-   ??6?$basic_ostream@DU?$char_traits@D@std@@@std@@QEAAAEAV01@P6AAEAV01@AEAV01@@Z@Z
-   ??$?6U?$char_traits@D@std@@@std@@YAAEAV?$basic_ostream@DU?$char_traits@D@std@@@0@AEAV10@D@Z
-   ??$?6U?$char_traits@D@std@@@std@@YAAEAV?$basic_ostream@DU?$char_traits@D@std@@@0@AEAV10@PEBD@Z
-   ?_Facet_Register@std@@YAXPEAV_Facet_base@1@@Z
-  )
-
-  if(MSVC_VERSION LESS 1914)
-    set(MSVC_EXPORTLIST ${MSVC_EXPORTLIST} ??3@YAXPAX0@Z ??_V@YAXPAX0@Z)
-  endif()
-
-  if(MSVC_VERSION GREATER_EQUAL 1936)
-    set(MSVC_EXPORTLIST ${MSVC_EXPORTLIST}
-        __std_find_trivial_1
-        __std_find_trivial_2
-        __std_find_trivial_4
-        __std_find_trivial_8
-    )
-  endif()
-
-foreach(sym ${MSVC_EXPORTLIST})
-  set(MSVC_EXPORTS "${MSVC_EXPORTS} /EXPORT:${sym}")
-endforeach(sym ${MSVC_EXPORTLIST})
-
-endif()
-
-if (CPPINTEROP_INCLUDE_DOCS)
-  add_subdirectory(docs)
+add_library(CppInterOp SHARED)
+add_subdirectory(lib)
+add_subdirectory(include)
+
+target_include_directories(CppInterOp PUBLIC
+    $<BUILD_INTERFACE:${CMAKE_CURRENT_SOURCE_DIR}/include>
+    $<BUILD_INTERFACE:${LLVM_INCLUDE_DIRS}>
+    $<BUILD_INTERFACE:${Clang_INCLUDE_DIRS}>
+    $<INSTALL_INTERFACE:include>)
+    
+target_compile_features(CppInterOp PRIVATE cxx_std_17)
+
+target_compile_definitions(CppInterOp PUBLIC "USE_REPL")
+target_compile_definitions(CppInterOp PUBLIC "__STDC_FORMAT_MACROS") # see https://github.com/tensorflow/tensorflow/issues/12998
+
+file(STRINGS "${CMAKE_CURRENT_SOURCE_DIR}/VERSION" CPPINTEROP_VERSION)
+string(REGEX MATCH "([0-9]*)\.([0-9]*)\.([0-9]*)" CPPINTEROP_VERSION_ONLY "${CPPINTEROP_VERSION}")
+set(CPPINTEROP_VERSION_MAJOR "${CMAKE_MATCH_1}")
+set(CPPINTEROP_VERSION_MINOR "${CMAKE_MATCH_2}")
+set(CPPINTEROP_VERSION_PATCH "${CMAKE_MATCH_3}")
+message(STATUS "CppInterOp Version: ${CPPINTEROP_VERSION}")
+message(STATUS "LLVM Binary Directory: ${LLVM_BINARY_DIR}")
+
+target_compile_definitions(CppInterOp PRIVATE "CPPINTEROP_VERSION=\"${CPPINTEROP_VERSION}\"")
+target_compile_definitions(CppInterOp PRIVATE "LLVM_BINARY_DIR=\"${LLVM_BINARY_DIR}\";")
+
+target_link_libraries(CppInterOp PUBLIC LLVM clang-cpp)
+
+# Install CompilationDatabase
+set_target_properties(CppInterOp PROPERTIES EXPORT_COMPILE_COMMANDS true)
+set(ccmds_json ${CMAKE_CURRENT_BINARY_DIR}/compile_commands.json)
+if(EXISTS ${ccmds_json})
+    message(STATUS "Found CompilationDatabase File: " ${ccmds_json})
+    install(FILES ${ccmds_json} DESTINATION share)
 endif()
 
-add_subdirectory(lib)
-if (CPPINTEROP_ENABLE_TESTING)
-  add_subdirectory(unittests)
-endif(CPPINTEROP_ENABLE_TESTING)
+# Install Binaries
+install(TARGETS CppInterOp
+        EXPORT CppInterOpTargets
+        RUNTIME DESTINATION bin
+        LIBRARY DESTINATION lib
+        ARCHIVE DESTINATION lib/static
+        INCLUDES DESTINATION include/clang)
+
+install(DIRECTORY ${CMAKE_CURRENT_SOURCE_DIR}/include/clang/ DESTINATION include/clang
+        FILES_MATCHING PATTERN "*.h")
+
+# Install CMake targets
+install(EXPORT CppInterOpTargets
+        NAMESPACE CppInterOp::
+        FILE CppInterOpConfig.cmake
+        DESTINATION lib/cmake/CppInterOp)
diff --git a/include/CMakeLists.txt b/include/CMakeLists.txt
new file mode 100644
index 0000000..aaabf20
--- /dev/null
+++ b/include/CMakeLists.txt
@@ -0,0 +1 @@
+add_subdirectory(clang)
\ No newline at end of file
diff --git a/include/clang/CMakeLists.txt b/include/clang/CMakeLists.txt
new file mode 100644
index 0000000..cdb72f0
--- /dev/null
+++ b/include/clang/CMakeLists.txt
@@ -0,0 +1 @@
+add_subdirectory(Interpreter)
\ No newline at end of file
diff --git a/include/clang/Interpreter/CMakeLists.txt b/include/clang/Interpreter/CMakeLists.txt
new file mode 100644
index 0000000..c6c9939
--- /dev/null
+++ b/include/clang/Interpreter/CMakeLists.txt
@@ -0,0 +1 @@
+target_sources(CppInterOp PRIVATE ${CMAKE_CURRENT_LIST_DIR}/CppInterOp.h)
\ No newline at end of file
diff --git a/lib/Interpreter/CMakeLists.txt b/lib/Interpreter/CMakeLists.txt
index 7f4ca53..342c8f6 100644
--- a/lib/Interpreter/CMakeLists.txt
+++ b/lib/Interpreter/CMakeLists.txt
@@ -1,108 +1,8 @@
-set(LLVM_LINK_COMPONENTS
-  ${LLVM_TARGETS_TO_BUILD}
-  BinaryFormat
-  Core
-  Object
-  OrcJit
-  Support
-)
-# FIXME: Investigate why this needs to be conditionally included.
-if ("LLVMFrontendDriver" IN_LIST LLVM_AVAILABLE_LIBS)
-  list(APPEND LLVM_LINK_COMPONENTS  FrontendDriver)
-endif()
-if ("LLVMOrcDebugging" IN_LIST LLVM_AVAILABLE_LIBS)
-  list(APPEND LLVM_LINK_COMPONENTS OrcDebugging)
-endif()
-
-set(DLM
-  DynamicLibraryManager.cpp
-  DynamicLibraryManagerSymbol.cpp
-  Paths.cpp
-)
-if (USE_CLING)
-  set(LLVM_OPTIONAL_SOURCES ${LLVM_OPTIONAL_SOURCES} ${DLM})
-  set(DLM)
-endif(USE_CLING)
-if (USE_REPL)
-  #Use DML optional sources
-endif(USE_REPL)
-
-if (USE_CLING)
-  set(cling_clang_interp clingInterpreter)
-endif()
-if (USE_REPL)
-  set(cling_clang_interp clangInterpreter)
-endif()
-
-set(link_libs
-  ${cling_clang_interp}
-  clangAST
-  clangBasic
-  clangFrontend
-  clangLex
-  clangSema
-  )
-
- if(NOT WIN32)
-  list(APPEND link_libs dl)
- endif()
-
-# Get rid of libLLVM-X.so which is appended to the list of static libraries.
-if (LLVM_LINK_LLVM_DYLIB)
-  set(new_libs ${link_libs})
-  set(libs ${new_libs})
-  while(NOT "${new_libs}" STREQUAL "")
-    foreach(lib ${new_libs})
-      if(TARGET ${lib})
-        get_target_property(transitive_libs ${lib} INTERFACE_LINK_LIBRARIES)
-        if (NOT transitive_libs)
-          continue()
-        endif()
-        foreach(transitive_lib ${transitive_libs})
-          get_target_property(lib_type ${transitive_lib} TYPE)
-          if("${lib_type}" STREQUAL "STATIC_LIBRARY")
-            list(APPEND static_transitive_libs ${transitive_lib})
-          else()
-            # Filter our libLLVM.so and friends.
-            continue()
-          endif()
-          if(NOT ${transitive_lib} IN_LIST libs)
-            list(APPEND newer_libs ${transitive_lib})
-            list(APPEND libs ${transitive_lib})
-          endif()
-        endforeach(transitive_lib)
-        # Update the target properties with the list of only static libraries.
-        set_target_properties(${lib} PROPERTIES INTERFACE_LINK_LIBRARIES "${static_transitive_libs}")
-        set(static_transitive_libs "")
-      endif()
-    endforeach(lib)
-    set(new_libs ${newer_libs})
-    set(newer_libs "")
-  endwhile()
-  # We just got rid of the libLLVM.so and other components shipped as shared
-  # libraries, we need to make up for the missing dependency.
-  list(APPEND LLVM_LINK_COMPONENTS
-    Coverage
-    FrontendHLSL
-    LTO
-    )
-  # We will need to append the missing dependencies to pull in the right
-  # LLVM library dependencies. 
-  list(APPEND link_libs
-    clangCodeGen
-    clangStaticAnalyzerCore
-    )
-endif(LLVM_LINK_LLVM_DYLIB)
-
-add_llvm_library(clangCppInterOp
-  DISABLE_LLVM_LINK_LLVM_DYLIB
-  CppInterOp.cpp
-  ${DLM}
-  LINK_LIBS
-  ${link_libs}
- )
-
-string(REPLACE ";" "\;" _VER CPPINTEROP_VERSION)
-set_source_files_properties(CppInterOp.cpp PROPERTIES COMPILE_DEFINITIONS
-  "LLVM_BINARY_DIR=\"${LLVM_BINARY_DIR}\";CPPINTEROP_VERSION=\"${_VAR}\""
-)
+target_sources(CppInterOp PRIVATE ${CMAKE_CURRENT_LIST_DIR}/CppInterOp.cpp)
+target_sources(CppInterOp PRIVATE ${CMAKE_CURRENT_LIST_DIR}/Compatibility.h)
+target_sources(CppInterOp PRIVATE ${CMAKE_CURRENT_LIST_DIR}/CppInterOpInterpreter.h)
+target_sources(CppInterOp PRIVATE ${CMAKE_CURRENT_LIST_DIR}/DynamicLibraryManager.cpp)
+target_sources(CppInterOp PRIVATE ${CMAKE_CURRENT_LIST_DIR}/DynamicLibraryManager.h)
+target_sources(CppInterOp PRIVATE ${CMAKE_CURRENT_LIST_DIR}/DynamicLibraryManagerSymbol.cpp)
+target_sources(CppInterOp PRIVATE ${CMAKE_CURRENT_LIST_DIR}/Paths.cpp)
+target_sources(CppInterOp PRIVATE ${CMAKE_CURRENT_LIST_DIR}/Paths.h)
\ No newline at end of file
-- 
2.39.3 (Apple Git-146)

