diff --git a/irif/inc/irif.h b/irif/inc/irif.h
index 90e5d05..7d68f8c 100644
--- a/irif/inc/irif.h
+++ b/irif/inc/irif.h
@@ -33,6 +33,15 @@ extern __attribute__((const)) half2 __llvm_copysign_2f16(half2, half2) __asm("ll
 #define BUILTIN_CTZ_U32(x) (uint)(x == 0u ? 32 : __builtin_ctz(x))
 #define BUILTIN_CTZ_U64(x) (ulong)(x == 0u ? 64 : __builtin_ctzl(x))
 
+extern __attribute__((const, convergent)) ulong __llvm_amdgcn_icmp_i64_i32(uint, uint, uint) __asm("llvm.amdgcn.icmp.i64.i32");
+extern __attribute__((const, convergent)) ulong __llvm_amdgcn_icmp_i64_i64(ulong, ulong, uint) __asm("llvm.amdgcn.icmp.i64.i64");
+extern __attribute__((const, convergent)) ulong __llvm_amdgcn_fcmp_i64_f32(float, float, uint) __asm("llvm.amdgcn.fcmp.i64.f32");
+extern __attribute__((const, convergent)) ulong __llvm_amdgcn_fcmp_i64_f64(double, double, uint) __asm("llvm.amdgcn.fcmp.i64.f64");
+extern __attribute__((const, convergent)) uint __llvm_amdgcn_icmp_i32_i32(uint, uint, uint) __asm("llvm.amdgcn.icmp.i32.i32");
+extern __attribute__((const, convergent)) uint __llvm_amdgcn_icmp_i32_i64(ulong, ulong, uint) __asm("llvm.amdgcn.icmp.i32.i64");
+extern __attribute__((const, convergent)) uint __llvm_amdgcn_fcmp_i32_f32(float, float, uint) __asm("llvm.amdgcn.fcmp.i32.f32");
+extern __attribute__((const, convergent)) uint __llvm_amdgcn_fcmp_i32_f64(double, double, uint) __asm("llvm.amdgcn.fcmp.i32.f64");
+
 // Buffer Load/Store
 extern __attribute__((pure)) float4 __llvm_amdgcn_struct_buffer_load_format_v4f32(uint4 rsrc, uint vindex, uint voffset, uint soffset, uint cachepolicy) __asm("llvm.amdgcn.struct.buffer.load.format.v4f32");
 extern __attribute__((pure)) half4 __llvm_amdgcn_struct_buffer_load_format_v4f16(uint4 rsrc, uint vindex, uint voffset, uint soffset, uint cachepolicy) __asm("llvm.amdgcn.struct.buffer.load.format.v4f16");
diff --git a/ockl/src/dm.cl b/ockl/src/dm.cl
index 9b8cf24..2be4354 100644
--- a/ockl/src/dm.cl
+++ b/ockl/src/dm.cl
@@ -14,6 +14,8 @@
 
 extern ulong __ockl_devmem_request(ulong addr, ulong size);
 
+#define ICMP_NE 33
+
 // Define this to track user requested non-slab (i.e. "large") in-use
 // allocations. This adds the definition of a query function nna() that
 // returns a snapshot of the current value.
@@ -298,7 +300,7 @@ static uint
 elect_uint_wave64(int pred, uint val, uint none) {
     uint ret = none;
 
-    ulong mask = __builtin_amdgcn_ballot_w64(pred != 0);
+    ulong mask = __llvm_amdgcn_icmp_i64_i32(pred, 0, ICMP_NE);
     if (mask != 0UL) {
         uint l = __ockl_ctz_u64(mask);
         ret = __builtin_amdgcn_ds_bpermute(l << 2, val);
@@ -311,7 +313,7 @@ REQUIRES_WAVE32
 static uint
 elect_uint_wave32(int pred, uint val, uint none) {
     uint ret = none;
-    uint mask = __builtin_amdgcn_ballot_w32(pred != 0);
+    uint mask = __llvm_amdgcn_icmp_i32_i32(pred, 0, ICMP_NE);
     if (mask != 0U) {
         uint l = __ockl_ctz_u32(mask);
         ret = __builtin_amdgcn_ds_bpermute(l << 2, val);
@@ -335,7 +337,7 @@ REQUIRES_WAVE64
 static uint
 countnz_wave64(ulong a)
 {
-    ulong mask = __builtin_amdgcn_ballot_w64(a != 0UL);
+    ulong mask = __llvm_amdgcn_icmp_i64_i64(a, 0UL, ICMP_NE);
     return __builtin_popcountl(mask);
 }
 
@@ -343,7 +345,7 @@ REQUIRES_WAVE32
 static uint
 countnz_wave32(ulong a)
 {
-    uint mask = __builtin_amdgcn_ballot_w32(a != 0UL);
+    uint mask = __llvm_amdgcn_icmp_i32_i64(a, 0UL, ICMP_NE);
     return __builtin_popcount(mask);
 }
 
diff --git a/ockl/src/toas.cl b/ockl/src/toas.cl
index a121c1c..3f0b8a4 100644
--- a/ockl/src/toas.cl
+++ b/ockl/src/toas.cl
@@ -6,14 +6,14 @@
  *===------------------------------------------------------------------------*/
 
 #include "ockl.h"
-__attribute__((const))
+__attribute__((const, target("flat-address-space")))
 bool
 OCKL_MANGLE_T(is_local,addr)(const void *a)
 {
     return __builtin_amdgcn_is_shared(a);
 }
 
-__attribute__((const))
+__attribute__((const, target("flat-address-space")))
 bool
 OCKL_MANGLE_T(is_private,addr)(const void *a)
 {
diff --git a/ockl/src/wfaas.cl b/ockl/src/wfaas.cl
index d657d50..aed45da 100644
--- a/ockl/src/wfaas.cl
+++ b/ockl/src/wfaas.cl
@@ -11,6 +11,8 @@
 
 #define ATTR __attribute__((always_inline))
 
+#define ICMP_NE 33
+
 // Hack to prevent incorrect hoisting of the operation. There
 // currently is no proper way in llvm to prevent hoisting of
 // operations control flow dependent results.
@@ -24,12 +26,12 @@ static int optimizationBarrierHack(int in_val)
 
 REQUIRES_WAVE32
 static bool wfany_impl_w32(int e) {
-    return __builtin_amdgcn_ballot_w32(e) != 0;
+    return __llvm_amdgcn_icmp_i32_i32(e, 0, ICMP_NE) != 0U;
 }
 
 REQUIRES_WAVE64
 static bool wfany_impl_w64(int e) {
-    return __builtin_amdgcn_ballot_w64(e) != 0;
+    return __llvm_amdgcn_icmp_i64_i32(e, 0, ICMP_NE) != 0UL;
 }
 
 ATTR bool
@@ -42,12 +44,12 @@ OCKL_MANGLE_I32(wfany)(int e)
 
 REQUIRES_WAVE32
 static bool wfall_impl_w32(int e) {
-    return __builtin_amdgcn_ballot_w32(e) == __builtin_amdgcn_read_exec_lo();
+    return __llvm_amdgcn_icmp_i32_i32(e, 0, ICMP_NE) == __builtin_amdgcn_read_exec_lo();
 }
 
 REQUIRES_WAVE64
 static bool wfall_impl_w64(int e) {
-    return __builtin_amdgcn_ballot_w64(e) == __builtin_amdgcn_read_exec();
+    return __llvm_amdgcn_icmp_i64_i32(e, 0, ICMP_NE) == __builtin_amdgcn_read_exec();
 }
 
 ATTR bool
@@ -61,13 +63,13 @@ OCKL_MANGLE_I32(wfall)(int e)
 
 REQUIRES_WAVE32
 static bool wfsame_impl_w32(int e) {
-    uint u = __builtin_amdgcn_ballot_w32(e);
-    return (u == 0) | (u == __builtin_amdgcn_read_exec_lo());
+    uint u = __llvm_amdgcn_icmp_i32_i32(e, 0, ICMP_NE) != 0U;
+    return (u == 0UL) | (u == __builtin_amdgcn_read_exec_lo());
 }
 
 REQUIRES_WAVE64
 static bool wfsame_impl_w64(int e) {
-    ulong u = __builtin_amdgcn_ballot_w64(e);
+    ulong u = __llvm_amdgcn_icmp_i64_i32(e, 0, ICMP_NE) != 0UL;
     return (u == 0UL) | (u == __builtin_amdgcn_read_exec());
 }
 
