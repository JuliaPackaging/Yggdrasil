--- a/root/cmake/modules/RootMacros.cmake	2024-01-31 09:17:06.000000000 +0100
+++ c/root/cmake/modules/RootMacros.cmake	2024-06-29 18:12:28.081464326 +0200
@@ -8,6 +8,8 @@
 #  RootMacros.cmake
 #---------------------------------------------------------------------------------------------------
 
+set(NATIVE_BINARY_DIR FALSE CACHE FILEPATH "Path of native built in case of cross compiling.")
+
 if(WIN32)
   set(libprefix lib)
   set(ld_library_path PATH)
@@ -603,20 +605,37 @@
   #---what rootcling command to use--------------------------
   if(ARG_STAGE1)
     if(MSVC AND CMAKE_ROOTTEST_DICT)
-      set(command ${CMAKE_COMMAND} -E ${CMAKE_BINARY_DIR}/bin/rootcling_stage1.exe)
+      if(NATIVE_BINARY_DIR)
+        set(command ${CMAKE_COMMAND} -E ${NATIVE_BINARY_DIR}/bin/rootcling_stage1.exe)
+      else()
+        set(command ${CMAKE_COMMAND} -E ${CMAKE_BINARY_DIR}/bin/rootcling_stage1.exe)
+      endif()
     else()
-      set(command ${CMAKE_COMMAND} -E env "LD_LIBRARY_PATH=${CMAKE_BINARY_DIR}/lib:$ENV{LD_LIBRARY_PATH}" $<TARGET_FILE:rootcling_stage1>)
+      if(NATIVE_BINARY_DIR)
+        set(command ${CMAKE_COMMAND} -E env "CPLUS_INCLUDE_PATH=$ENV{SYSTEM_INCLUDE_PATH}" "LD_LIBRARY_PATH=${NATIVE_BINARY_DIR}/lib:$ENV{LD_LIBRARY_PATH}" ${NATIVE_BINARY_DIR}/core/rootcling_stage1/src/rootcling_stage1)
+      else()
+        set(command ${CMAKE_COMMAND} -E env "LD_LIBRARY_PATH=${CMAKE_BINARY_DIR}/lib:$ENV{LD_LIBRARY_PATH}" $<TARGET_FILE:rootcling_stage1>)
+      endif()
     endif()
     set(ROOTCINTDEP rconfigure)
     set(pcm_name)
   else()
     if(CMAKE_PROJECT_NAME STREQUAL ROOT)
       if(MSVC AND CMAKE_ROOTTEST_DICT)
-        set(command ${CMAKE_COMMAND} -E env "ROOTIGNOREPREFIX=1" ${CMAKE_BINARY_DIR}/bin/rootcling.exe)
+        if(NATIVE_BINARY_DIR)
+          set(command ${CMAKE_COMMAND} -E env "ROOTIGNOREPREFIX=1" ${NATIVE_BINARY_DIR}/bin/rootcling.exe)
+        else()
+          set(command ${CMAKE_COMMAND} -E env "ROOTIGNOREPREFIX=1" ${CMAKE_BINARY_DIR}/core/rootcling_stage1/src/rootcling.exe)
+        endif()
       else()
-        set(command ${CMAKE_COMMAND} -E env "LD_LIBRARY_PATH=${CMAKE_BINARY_DIR}/lib:$ENV{LD_LIBRARY_PATH}"
-                    "ROOTIGNOREPREFIX=1" $<TARGET_FILE:rootcling> -rootbuild)
-        # Modules need RConfigure.h copied into include/.
+        if(NATIVE_BINARY_DIR)
+          set(command ${CMAKE_COMMAND} -E env "CPLUS_INCLUDE_PATH=$ENV{SYSTEM_INCLUDE_PATH}" "LD_LIBRARY_PATH=${NATIVE_BINARY_DIR}/lib:$ENV{LD_LIBRARY_PATH}"
+            "ROOTIGNOREPREFIX=1" ${NATIVE_BINARY_DIR}/bin/rootcling -rootbuild)
+        else()
+          set(command ${CMAKE_COMMAND} -E env "LD_LIBRARY_PATH=${CMAKE_BINARY_DIR}/lib:$ENV{LD_LIBRARY_PATH}"
+            "ROOTIGNOREPREFIX=1" $<TARGET_FILE:rootcling> -rootbuild)
+        endif()
+          # Modules need RConfigure.h copied into include/.
         set(ROOTCINTDEP rootcling rconfigure)
       endif()
     elseif(TARGET ROOT::rootcling)

--- a/CMakeLists.txt
+++ b/CMakeLists.txt
@@ -601,24 +601,26 @@ if(runtime_cxxmodules)
 endif()
 
 #---hsimple.root---------(use the executable for clearer dependencies and proper return code)---
-add_custom_target(hsimple ALL DEPENDS tutorials/hsimple.root)
-add_dependencies(hsimple onepcm)
-if(WIN32)
-  add_custom_command(OUTPUT tutorials/hsimple.root
-                     COMMAND set PATH=${CMAKE_RUNTIME_OUTPUT_DIRECTORY} &&
-                             set ROOTIGNOREPREFIX=1 && set ROOT_HIST=0 &&
-                             $<TARGET_FILE:root.exe> -l -q -b -n -x hsimple.C -e return
-                     WORKING_DIRECTORY tutorials
-                     DEPENDS $<TARGET_FILE:root.exe> Cling Hist Tree Gpad Graf HistPainter move_artifacts)
-else()
-  add_custom_command(OUTPUT tutorials/hsimple.root
-                     COMMAND ${MODULES_ROOT_INCPATH} ${ld_library_path}=${CMAKE_LIBRARY_OUTPUT_DIRECTORY}:$ENV{${ld_library_path}}
-                             ROOTIGNOREPREFIX=1 ROOT_HIST=0
-                             $<TARGET_FILE:root.exe> -l -q -b -n -x hsimple.C -e return
-                     WORKING_DIRECTORY tutorials
-                     DEPENDS $<TARGET_FILE:root.exe> Cling Hist Tree Gpad Graf HistPainter move_artifacts)
+if(NOT CMAKE_CROSSCOMPILING)
+  add_custom_target(hsimple ALL DEPENDS tutorials/hsimple.root)
+  add_dependencies(hsimple onepcm)
+  if(WIN32)
+    add_custom_command(OUTPUT tutorials/hsimple.root
+                      COMMAND set PATH=${CMAKE_RUNTIME_OUTPUT_DIRECTORY} &&
+                              set ROOTIGNOREPREFIX=1 && set ROOT_HIST=0 &&
+                              $<TARGET_FILE:root.exe> -l -q -b -n -x hsimple.C -e return
+                      WORKING_DIRECTORY tutorials
+                      DEPENDS $<TARGET_FILE:root.exe> Cling Hist Tree Gpad Graf HistPainter move_artifacts)
+  else()
+    add_custom_command(OUTPUT tutorials/hsimple.root
+                      COMMAND ${MODULES_ROOT_INCPATH} ${ld_library_path}=${CMAKE_LIBRARY_OUTPUT_DIRECTORY}:$ENV{${ld_library_path}}
+                              ROOTIGNOREPREFIX=1 ROOT_HIST=0
+                              $<TARGET_FILE:root.exe> -l -q -b -n -x hsimple.C -e return
+                      WORKING_DIRECTORY tutorials
+                      DEPENDS $<TARGET_FILE:root.exe> Cling Hist Tree Gpad Graf HistPainter move_artifacts)
+  endif()
+  install(FILES ${CMAKE_BINARY_DIR}/tutorials/hsimple.root DESTINATION ${CMAKE_INSTALL_TUTDIR} COMPONENT tests)
 endif()
-install(FILES ${CMAKE_BINARY_DIR}/tutorials/hsimple.root DESTINATION ${CMAKE_INSTALL_TUTDIR} COMPONENT tests)
 
 if(runtime_cxxmodules)
   add_dependencies(hsimple modules_idx)
@@ -805,4 +807,6 @@ Linker flags:
 ROOT_SHOW_ENABLED_OPTIONS()
 
 #---Packaging-------------------------------------------------------------------------------------
-include(RootCPack)
+if(NOT CMAKE_CROSSCOMPILING)
+  include(RootCPack)
+endif()
--- a/root/cmake/modules/SetUpMacOS.cmake
+++ b/root/cmake/modules/SetUpMacOS.cmake
@@ -113,15 +113,14 @@ endif()
 
 #---Avoid using a x86_64 Ninja executable with on a arm64 MacOS
 #---This issue leads to the external being build for x86_64 instead of arm64
-execute_process(COMMAND lipo -archs ${CMAKE_MAKE_PROGRAM} OUTPUT_VARIABLE _NINJA_ARCH OUTPUT_STRIP_TRAILING_WHITESPACE)
-if(CMAKE_GENERATOR MATCHES Ninja)
-
-  set( _NINJA_ARCH_LIST ${_NINJA_ARCH} )
-  separate_arguments(_NINJA_ARCH_LIST) # This replace space with semi-colons
-  if (NOT "${CMAKE_HOST_SYSTEM_PROCESSOR}" IN_LIST _NINJA_ARCH_LIST)
-    message(FATAL_ERROR
-            " ${CMAKE_MAKE_PROGRAM} does not support ${CMAKE_HOST_SYSTEM_PROCESSOR}.\n"
-            " It only supports ${_NINJA_ARCH_LIST}.\n"
-            " Downloading the latest version of Ninja might solve the problem.\n")
-  endif()
-endif()
+#execute_process(COMMAND lipo -archs ${CMAKE_MAKE_PROGRAM} OUTPUT_VARIABLE _NINJA_ARCH OUTPUT_STRIP_TRAILING_WHITESPACE)
+#if(CMAKE_GENERATOR MATCHES Ninja)
+#  set( _NINJA_ARCH_LIST ${_NINJA_ARCH} )
+#  separate_arguments(_NINJA_ARCH_LIST) # This replace space with semi-colons
+#  if (NOT "${CMAKE_HOST_SYSTEM_PROCESSOR}" IN_LIST _NINJA_ARCH_LIST)
+#    message(FATAL_ERROR
+#            " ${CMAKE_MAKE_PROGRAM} does not support ${CMAKE_HOST_SYSTEM_PROCESSOR}.\n"
+#            " It only supports ${_NINJA_ARCH_LIST}.\n"
+#            " Downloading the latest version of Ninja might solve the problem.\n")
+#  endif()
+#endif()
--- a/root/cmake/modules/SearchInstalledSoftware.cmake
+++ b/root/cmake/modules/SearchInstalledSoftware.cmake
@@ -37,7 +37,9 @@ endif()
 if(cocoa)
   if(APPLE)
     set(x11 OFF CACHE BOOL "Disabled because cocoa requested (${x11_description})" FORCE)
-    set(builtin_freetype ON CACHE BOOL "Enabled because needed for Cocoa graphics (${builtin_freetype_description})" FORCE)
+    if(NOT CMAKE_CROSSCOMPILING)   # leave freetype as external on cross-compiling
+      set(builtin_freetype ON CACHE BOOL "Enabled because needed for Cocoa graphics (${builtin_freetype_description})" FORCE)
+    endif()
   else()
     message(STATUS "Cocoa option can only be enabled on MacOSX platform")
     set(cocoa OFF CACHE BOOL "Disabled because only available on MacOSX (${cocoa_description})" FORCE)
--- a/root/etc/dictpch/makepch.py
+++ b/root/etc/dictpch/makepch.py
@@ -99,7 +99,12 @@ def makepch():
       allheadersFilename.replace("\\","/")
       alllinkdefsFilename.replace("\\","/")
 
-   rootclingExe = os.path.join(rootdir,"bin","rootcling")
+   if "ROOTCLINGNATIVE" in os.environ:
+      rootclingExe = os.environ["ROOTCLINGNATIVE"]
+      crosscomp = True
+   else:
+      rootclingExe = os.path.join(rootdir,"bin","rootcling")
+      crosscomp = False
    command = "%s %s -generate-pch -f allDict.cxx -noDictSelection %s %s %s %s" %(rootclingExe,
                                                                                  rootbuildFlag,
                                                                                  allCppFlags,
@@ -111,9 +116,10 @@ def makepch():
       print(command)
 
    my_env = os.environ.copy()
-   existing_ldlib = my_env.get("LD_LIBRARY_PATH")
-   if not existing_ldlib: existing_ldlib = ""
-   my_env["LD_LIBRARY_PATH"] = os.path.join(rootdir, "lib") + ":" + existing_ldlib
+   if not crosscomp:
+      existing_ldlib = my_env.get("LD_LIBRARY_PATH")
+      if not existing_ldlib: existing_ldlib = ""
+      my_env["LD_LIBRARY_PATH"] = os.path.join(rootdir, "lib") + ":" + existing_ldlib
 
    ret = subprocess.call(command.split(), env=my_env)
    if ret == 0:
