diff --git a/src/R-scape-sim.c b/src/R-scape-sim.c
index fd33547..10004e0 100644
--- a/src/R-scape-sim.c
+++ b/src/R-scape-sim.c
@@ -373,12 +373,17 @@ static int process_commandline(int argc, char **argv, ESL_GETOPTS **ret_go, stru
 
   /* the evo paramfile  */
   cfg.paramfile = NULL;
+
+  // override default RSCAPE_SHARE with environment variable if it is set
+  char *env_rscape_share = getenv("RSCAPE_SHARE");
+  char *rscape_share = env_rscape_share ? env_rscape_share : RSCAPE_SHARE;
+
   if ( esl_opt_IsOn(go, "--evofile") ) { cfg.paramfile = esl_opt_GetString(go, "--evofile"); }
-  else if (RSCAPE_SHARE) {
+  else if (rscape_share) {
     if (cfg.evomodel == AIF)
-      esl_sprintf(&cfg.paramfile, "%s/doc/Pfam.seed.S1000.trainGD.AIF.param", RSCAPE_SHARE);
+      esl_sprintf(&cfg.paramfile, "%s/doc/Pfam.seed.S1000.trainGD.AIF.param", rscape_share);
     else if (cfg.evomodel == AFG)
-      esl_sprintf(&cfg.paramfile, "%s/doc/Pfam.seed.S1000.trainGD.AFG.param", RSCAPE_SHARE);
+      esl_sprintf(&cfg.paramfile, "%s/doc/Pfam.seed.S1000.trainGD.AFG.param", rscape_share);
     else esl_fatal("could not identify evomodel");
   }
   else ESL_XFAIL(status, cfg.errbuf, "Failed to find evo parameters\n");
@@ -533,11 +538,15 @@ create_subsmodel(ESL_GETOPTS *go, struct cfg_s *cfg)
   
   if (cfg->abc == NULL) esl_fatal("cannot create evolutionary model w/o an alphabet");
 
+  // override default RSCAPE_SHARE with environment variable if it is set
+  char *env_rscape_share = getenv("RSCAPE_SHARE");
+  char *rscape_share = env_rscape_share ? env_rscape_share : RSCAPE_SHARE;
+
   switch(cfg->abc->type) {
   case eslDNA:
   case eslRNA:
     if ( esl_opt_IsOn(go, "--ribofile") ) { cfg->ribofile = esl_opt_GetString(go, "--ribofile"); }
-    else if (RSCAPE_SHARE) esl_sprintf(&cfg->ribofile, "%s/doc/ssu-lsu.final.er.ribosum", RSCAPE_SHARE);  
+    else if (rscape_share) esl_sprintf(&cfg->ribofile, "%s/doc/ssu-lsu.final.er.ribosum", rscape_share);
     else                   ESL_XFAIL(status, cfg->errbuf, "Failed to find ribosum matrices\n");
     
     /* if RNA/DNA, calculate ribosum mtx */
diff --git a/src/R-scape.c b/src/R-scape.c
index ee236c5..c6865a8 100644
--- a/src/R-scape.c
+++ b/src/R-scape.c
@@ -951,15 +951,18 @@ static int process_commandline(int argc, char **argv, ESL_GETOPTS **ret_go, stru
     cfg.powerhis = power_Histogram_Create(0.0, 10000, 1.0);
   }
   else { // read the power file
+    // override default RSCAPE_HOME with environment variable if it is set
+    char *env_rscape_home = getenv("RSCAPE_HOME");
+    char *rscape_home = env_rscape_home ? env_rscape_home : RSCAPE_HOME;
     if (cfg.power_includegaps) {
-      if      (cfg.powerdouble) esl_sprintf(&cfg.powerfile, "%s/data/power/R-scape.power.double.withgaps.csv", RSCAPE_HOME);
-      else if (cfg.powerjoin)   esl_sprintf(&cfg.powerfile, "%s/data/power/R-scape.power.join.withgaps.csv",   RSCAPE_HOME);
-      else                      esl_sprintf(&cfg.powerfile, "%s/data/power/R-scape.power.subs.withgaps.csv",   RSCAPE_HOME);
+      if      (cfg.powerdouble) esl_sprintf(&cfg.powerfile, "%s/data/power/R-scape.power.double.withgaps.csv", rscape_home);
+      else if (cfg.powerjoin)   esl_sprintf(&cfg.powerfile, "%s/data/power/R-scape.power.join.withgaps.csv",   rscape_home);
+      else                      esl_sprintf(&cfg.powerfile, "%s/data/power/R-scape.power.subs.withgaps.csv",   rscape_home);
     }
     else {
-      if      (cfg.powerdouble) esl_sprintf(&cfg.powerfile, "%s/data/power/R-scape.power.double.csv", RSCAPE_HOME);
-      else if (cfg.powerjoin)   esl_sprintf(&cfg.powerfile, "%s/data/power/R-scape.power.join.csv", RSCAPE_HOME);
-      else                      esl_sprintf(&cfg.powerfile, "%s/data/power/R-scape.power.subs.csv",   RSCAPE_HOME);
+      if      (cfg.powerdouble) esl_sprintf(&cfg.powerfile, "%s/data/power/R-scape.power.double.csv", rscape_home);
+      else if (cfg.powerjoin)   esl_sprintf(&cfg.powerfile, "%s/data/power/R-scape.power.join.csv", rscape_home);
+      else                      esl_sprintf(&cfg.powerfile, "%s/data/power/R-scape.power.subs.csv",   rscape_home);
     }
     power_Read(cfg.powerfile, cfg.powerdouble, cfg.powerjoin, cfg.power_includegaps, &cfg.power, cfg.errbuf, cfg.verbose);
   }
diff --git a/src/contactmap.c b/src/contactmap.c
index ba0e1c4..da140df 100644
--- a/src/contactmap.c
+++ b/src/contactmap.c
@@ -215,34 +215,37 @@ ContactMap_FromPDB(char *pdbfile, char *pdbchain, char *msafile, ESL_MSA *msa, i
   fclose(tmpfp);
   
   // read the contact from the pdbfile  (small output -S)
-  if (RSCAPE_BIN) esl_sprintf(&cmd, "%s/pdb_parse.pl", RSCAPE_BIN);  
+  // override default RSCAPE_BIN with environment variable if it is set
+  char *env_rscape_bin = getenv("RSCAPE_BIN");
+  char *rscape_bin = env_rscape_bin ? env_rscape_bin : RSCAPE_BIN;
+  if (rscape_bin) esl_sprintf(&cmd, "%s/pdb_parse.pl", rscape_bin);  
   else            ESL_XFAIL(status, errbuf, "Failed to find program pdb_parse.pl\n");
   
   if (abcisRNA)  {// run rnaview as well
     if (pdbchain) {
       if (noss)
 	esl_sprintf(&args, "%s -N -c %s -D %f -L %d -W MIN -C %s -M %s -R -S %s %s %s  &> /dev/null",
-		    cmd, pdbchain, cntmaxD, cntmind, tmpmapfile, tmpcfile, pdbfile, msafile, RSCAPE_BIN);
+		    cmd, pdbchain, cntmaxD, cntmind, tmpmapfile, tmpcfile, pdbfile, msafile, rscape_bin);
        else 
 	esl_sprintf(&args, "%s -c %s -D %f -L %d -W MIN -C %s -M %s -R -S %s %s %s  &> /dev/null",
-		    cmd, pdbchain, cntmaxD, cntmind, tmpmapfile, tmpcfile, pdbfile, msafile, RSCAPE_BIN);
+		    cmd, pdbchain, cntmaxD, cntmind, tmpmapfile, tmpcfile, pdbfile, msafile, rscape_bin);
     }
     else {
       if (noss)
 	esl_sprintf(&args, "%s -N -D %f -L %d -W MIN -C %s -M %s -R -S %s %s %s  &> /dev/null",
-		    cmd, cntmaxD, cntmind, tmpmapfile, tmpcfile, pdbfile, msafile, RSCAPE_BIN);
+		    cmd, cntmaxD, cntmind, tmpmapfile, tmpcfile, pdbfile, msafile, rscape_bin);
       else
 	esl_sprintf(&args, "%s -D %f -L %d -W MIN -C %s -M %s -R -S %s %s %s  &> /dev/null",
-		    cmd, cntmaxD, cntmind, tmpmapfile, tmpcfile, pdbfile, msafile, RSCAPE_BIN);
+		    cmd, cntmaxD, cntmind, tmpmapfile, tmpcfile, pdbfile, msafile, rscape_bin);
     }
   }
   else {
     if (noss)
       esl_sprintf(&args, "%s -N -D %f -L %d -W MIN -C %s -M %s -S %s %s %s  &> /dev/null",
-		  cmd, cntmaxD, cntmind, tmpmapfile, tmpcfile, pdbfile, msafile, RSCAPE_BIN);
+		  cmd, cntmaxD, cntmind, tmpmapfile, tmpcfile, pdbfile, msafile, rscape_bin);
     else 
       esl_sprintf(&args, "%s -D %f -L %d -W MIN -C %s -M %s -S %s %s %s  &> /dev/null",
-		  cmd, cntmaxD, cntmind, tmpmapfile, tmpcfile, pdbfile, msafile, RSCAPE_BIN);
+		  cmd, cntmaxD, cntmind, tmpmapfile, tmpcfile, pdbfile, msafile, rscape_bin);
   }
   
   if (1||verbose) printf("%s\n", args);
diff --git a/src/msatree.c b/src/msatree.c
index a5e268e..b2691ba 100644
--- a/src/msatree.c
+++ b/src/msatree.c
@@ -122,8 +122,11 @@ Tree_CreateExtFile(const ESL_MSA *msa, char **ret_treefile, char *errbuf, int ve
   if ((status = esl_msafile_Write(msafp, (ESL_MSA *)msa, eslMSAFILE_AFA)) != eslOK) ESL_XFAIL(status, errbuf, "Failed to write AFA file\n");
   fclose(msafp);
 
-  if (RSCAPE_BIN)                         // look for the installed executable
-    esl_sprintf(&cmd, "%s/FastTree", RSCAPE_BIN);  
+  // override default RSCAPE_BIN with environment variable if it is set
+  char *env_rscape_bin = getenv("RSCAPE_BIN");
+  char *rscape_bin = env_rscape_bin ? env_rscape_bin : RSCAPE_BIN;
+  if (rscape_bin)                         // look for the installed executable
+    esl_sprintf(&cmd, "%s/FastTree", rscape_bin);
   else
     ESL_XFAIL(status, errbuf, "Failed to find FASTTREE executable\n");
 
diff --git a/src/r2rdepict.c b/src/r2rdepict.c
index b920439..ea3a9ba 100644
--- a/src/r2rdepict.c
+++ b/src/r2rdepict.c
@@ -92,7 +92,10 @@ r2r_Depict(ESL_RANDOMNESS *r, char *r2rfile, int r2rall, ESL_MSA *omsa, CTLIST *
   
   // we need to modify a perfectly valid stockholm formatted msa into
   // the weirdness that R2R accepts
-  esl_sprintf(&args, "%s/r2r_msa_comply.pl %s", RSCAPE_BIN, r2rfile);
+  // override default RSCAPE_BIN with environment variable if it is set
+  char *env_rscape_bin = getenv("RSCAPE_BIN");
+  char *rscape_bin = env_rscape_bin ? env_rscape_bin : RSCAPE_BIN;
+  esl_sprintf(&args, "%s/r2r_msa_comply.pl %s", rscape_bin, r2rfile);
   status = system(args);
   if (status == -1) ESL_XFAIL(status, errbuf, "Failed to run r2r_msa_comply\n");
 
@@ -572,8 +575,11 @@ r2r_depict_pdf(char *r2rfile, char *metafile, int verbose, char *errbuf)
   int   status;
 
   /* produce the R2R pdf */
-  if (RSCAPE_BIN)                         // look for the installed executable
-    esl_sprintf(&cmd, "%s/r2r --disable-usage-warning", RSCAPE_BIN);  
+  // override default RSCAPE_BIN with environment variable if it is set
+  char *env_rscape_bin = getenv("RSCAPE_BIN");
+  char *rscape_bin = env_rscape_bin ? env_rscape_bin : RSCAPE_BIN;
+  if (rscape_bin)                         // look for the installed executable
+    esl_sprintf(&cmd, "%s/r2r --disable-usage-warning", rscape_bin);
   else
     ESL_XFAIL(status, errbuf, "Failed to find R2R executable\n");
   
@@ -606,8 +612,11 @@ r2r_depict_svg(char *r2rfile, char *metafile, int verbose, char *errbuf)
   int   status;
 
   /* produce the R2R svg */
-  if (RSCAPE_BIN)  // look for the installed executable
-    esl_sprintf(&cmd, "%s/r2r --disable-usage-warning", RSCAPE_BIN);  
+  // override default RSCAPE_BIN with environment variable if it is set
+  char *env_rscape_bin = getenv("RSCAPE_BIN");
+  char *rscape_bin = env_rscape_bin ? env_rscape_bin : RSCAPE_BIN;
+  if (rscape_bin)  // look for the installed executable
+    esl_sprintf(&cmd, "%s/r2r --disable-usage-warning", rscape_bin);
   else
     ESL_XFAIL(status, errbuf, "Failed to find R2R executable\n");
 
@@ -797,6 +806,10 @@ r2r_pseudoknot_callout(char *r2rfile, HITLIST *hitlist, int nct, char **r2rpkfil
 
   if (nct == 1) return eslOK;
 
+  // override default RSCAPE_BIN with environment variable if it is set
+  char *env_rscape_bin = getenv("RSCAPE_BIN");
+  char *rscape_bin = env_rscape_bin ? env_rscape_bin : RSCAPE_BIN;
+
   // run script to extract individual msa files for each pseudoknot
   //
   // (1) run script to extract the individual msa in files
@@ -806,15 +819,15 @@ r2r_pseudoknot_callout(char *r2rfile, HITLIST *hitlist, int nct, char **r2rpkfil
   //
   for (s = 1; s < nct; s ++) {
     if (!r2rpkfile[s]) continue;
-    
-    esl_sprintf(&cmd, "%s/SelectSubFamilyFromStockholm.pl", RSCAPE_BIN);
+
+    esl_sprintf(&cmd, "%s/SelectSubFamilyFromStockholm.pl", rscape_bin);
     esl_sprintf(&args, "%s %s pknot%d > %s", cmd, r2rfile, s, r2rpkfile[s]);
     status = system(args);
     if (status == -1) ESL_XFAIL(status, errbuf, "Failed to run R2R script SelectSubFamilyFromStockholm.pl\n");
     free(args); args = NULL;
     
     // now again run the script to modify a perfectly good stockholm file into something that R2R can digest
-    esl_sprintf(&args, "%s/r2r_msa_comply.pl %s", RSCAPE_BIN, r2rpkfile[s]);
+    esl_sprintf(&args, "%s/r2r_msa_comply.pl %s", rscape_bin, r2rpkfile[s]);
     status = system(args);
     if (status == -1) ESL_XFAIL(status, errbuf, "Failed to run r2r_msa_comply\n");
     free(cmd);  cmd = NULL;
@@ -837,9 +850,13 @@ r2r_run_consensus_from_file(char *inmsafile, char *outmsafile, char *errbuf)
   char *cmd  = NULL;
   char *args = NULL;
   int   status;
-  
-  if (RSCAPE_BIN)         // look for the installed executable
-    esl_sprintf(&cmd, "%s/r2r --cutEmptyLines", RSCAPE_BIN);  
+
+  // override default RSCAPE_BIN with environment variable if it is set
+  char *env_rscape_bin = getenv("RSCAPE_BIN");
+  char *rscape_bin = env_rscape_bin ? env_rscape_bin : RSCAPE_BIN;
+
+  if (rscape_bin)         // look for the installed executable
+    esl_sprintf(&cmd, "%s/r2r --cutEmptyLines", rscape_bin);
   else
     ESL_XFAIL(status, errbuf, "Failed to find R2R executable\n");
   
