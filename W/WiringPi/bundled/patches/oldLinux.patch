diff --git before/WiringPi/wiringPi/wiringPi.h after/WiringPi/wiringPi/wiringPi.h
index aa3c753..685cca0 100644
--- before/WiringPi/wiringPi/wiringPi.h
+++ after/WiringPi/wiringPi/wiringPi.h
@@ -24,6 +24,109 @@
 #ifndef	__WIRING_PI_H__
 #define	__WIRING_PI_H__
 
+#include <linux/types.h>
+
+
+
+// Built on old linux
+
+#define __AC(X,Y)	(X##Y)
+#define _AC(X,Y)	__AC(X,Y)
+
+#define GPIOHANDLE_REQUEST_BIAS_PULL_UP        (1UL << 5)
+#define GPIOHANDLE_REQUEST_BIAS_PULL_DOWN      (1UL << 6)
+#define GPIOHANDLE_REQUEST_BIAS_DISABLE        (1UL << 7)
+#define GPIO_V2_LINES_MAX 64
+#define GPIO_MAX_NAME_SIZE 32
+#define GPIO_V2_LINE_NUM_ATTRS_MAX 10
+#define ULL(x)         (_ULL(x))
+typedef __signed__ int __s32;
+typedef unsigned int __u32;
+#define __aligned_u64 __u64 __attribute__((aligned(8)))
+
+struct gpio_v2_line_attribute {
+	__u32 id;
+	__u32 padding;
+	union {
+		__aligned_u64 flags;
+		__aligned_u64 values;
+		__u32 debounce_period_us;
+	};
+};
+
+struct gpio_v2_line_config_attribute {
+	struct gpio_v2_line_attribute attr;
+	__aligned_u64 mask;
+};
+
+enum gpio_v2_line_event_id {
+       GPIO_V2_LINE_EVENT_RISING_EDGE  = 1,
+       GPIO_V2_LINE_EVENT_FALLING_EDGE = 2,
+};
+
+struct gpio_v2_line_values {
+       __aligned_u64 bits;
+       __aligned_u64 mask;
+};
+
+struct gpio_v2_line_event {
+       __aligned_u64 timestamp_ns;
+       __u32 id;
+       __u32 offset;
+       __u32 seqno;
+       __u32 line_seqno;
+       /* Space reserved for future use. */
+       __u32 padding[6];
+};
+
+struct gpio_v2_line_config {
+       __aligned_u64 flags;
+       __u32 num_attrs;
+       /* Pad to fill implicit padding and reserve space for future use. */
+       __u32 padding[5];
+       struct gpio_v2_line_config_attribute attrs[GPIO_V2_LINE_NUM_ATTRS_MAX];
+};
+#define _BITULL(x)     (_AC(1,ULL) << (x))
+enum gpio_v2_line_flag {
+       GPIO_V2_LINE_FLAG_USED                  = _BITULL(0),
+       GPIO_V2_LINE_FLAG_ACTIVE_LOW            = _BITULL(1),
+       GPIO_V2_LINE_FLAG_INPUT                 = _BITULL(2),
+       GPIO_V2_LINE_FLAG_OUTPUT                = _BITULL(3),
+       GPIO_V2_LINE_FLAG_EDGE_RISING           = _BITULL(4),
+       GPIO_V2_LINE_FLAG_EDGE_FALLING          = _BITULL(5),
+       GPIO_V2_LINE_FLAG_OPEN_DRAIN            = _BITULL(6),
+       GPIO_V2_LINE_FLAG_OPEN_SOURCE           = _BITULL(7),
+       GPIO_V2_LINE_FLAG_BIAS_PULL_UP          = _BITULL(8),
+       GPIO_V2_LINE_FLAG_BIAS_PULL_DOWN        = _BITULL(9),
+       GPIO_V2_LINE_FLAG_BIAS_DISABLED         = _BITULL(10),
+       GPIO_V2_LINE_FLAG_EVENT_CLOCK_REALTIME  = _BITULL(11),
+       GPIO_V2_LINE_FLAG_EVENT_CLOCK_HTE       = _BITULL(12),
+};
+
+struct gpio_v2_line_request {
+       __u32 offsets[GPIO_V2_LINES_MAX];
+       char consumer[GPIO_MAX_NAME_SIZE];
+       struct gpio_v2_line_config config;
+       __u32 num_lines;
+       __u32 event_buffer_size;
+       /* Pad to fill implicit padding and reserve space for future use. */
+       __u32 padding[5];
+       __s32 fd;
+};
+
+enum gpio_v2_line_attr_id {
+       GPIO_V2_LINE_ATTR_ID_FLAGS              = 1,
+       GPIO_V2_LINE_ATTR_ID_OUTPUT_VALUES      = 2,
+       GPIO_V2_LINE_ATTR_ID_DEBOUNCE           = 3,
+};
+#define GPIO_V2_GET_LINEINFO_IOCTL _IOWR(0xB4, 0x05, struct gpio_v2_line_info)
+#define GPIO_V2_GET_LINEINFO_WATCH_IOCTL _IOWR(0xB4, 0x06, struct gpio_v2_line_info)
+#define GPIO_V2_GET_LINE_IOCTL _IOWR(0xB4, 0x07, struct gpio_v2_line_request)
+#define GPIO_V2_LINE_SET_CONFIG_IOCTL _IOWR(0xB4, 0x0D, struct gpio_v2_line_config)
+#define GPIO_V2_LINE_GET_VALUES_IOCTL _IOWR(0xB4, 0x0E, struct gpio_v2_line_values)
+#define GPIO_V2_LINE_SET_VALUES_IOCTL _IOWR(0xB4, 0x0F, struct gpio_v2_line_values)
+
+
 // C doesn't have true/false by default and I can never remember which
 //	way round they are, so ...
 //	(and yes, I know about stdbool.h but I like capitals for these and I'm old)
@@ -165,6 +268,7 @@ extern const int   piMemorySize    [ 8] ;
 //	of more than 1 or 2 devices being added are fairly slim, so who
 //	knows....
 
+
 struct wiringPiNodeStruct
 {
   int     pinBase ;
