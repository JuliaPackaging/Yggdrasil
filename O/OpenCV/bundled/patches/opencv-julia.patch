diff --git a/modules/julia/CMakeLists.txt b/modules/julia/CMakeLists.txt
index 77158cac..27bae233 100644
--- a/modules/julia/CMakeLists.txt
+++ b/modules/julia/CMakeLists.txt
@@ -1,46 +1,8 @@
-if(NOT HAVE_JULIA MATCHES "YES")
-    message(STATUS "Julia not found. Not compiling Julia Bindings. ${HAVE_JULIA}")
-    ocv_module_disable(julia)
-elseif(NOT PYTHON_DEFAULT_EXECUTABLE)
+if(NOT PYTHON_DEFAULT_EXECUTABLE)
    message(WARNING "Python required for Julia bindings...disabling")
    ocv_module_disable(julia)
 endif()
 
-# WARN_MIXED_PRECISION
-macro(WARN_MIXED_PRECISION COMPILER_BITNESS JULIA_BITNESS)
-    set(MSG "Your compiler is ${COMPILER_BITNESS}-bit")
-    set(MSG "${MSG} but your version of Julia is ${JULIA_BITNESS}-bit.")
-    set(MSG "${MSG} To build Julia bindings, please switch to a ${JULIA_BITNESS}-bit compiler.")
-    message(WARNING ${MSG})
-endmacro()
-
-
-math(EXPR ARCH "${CMAKE_SIZEOF_VOID_P} * 8")
-if (${ARCH} EQUAL 32 AND ${Julia_WORD_SIZE} MATCHES "64")
-    warn_mixed_precision("32" "64")
-    ocv_module_disable(julia)
-    return()
-elseif (${ARCH} EQUAL 64 AND NOT ${Julia_WORD_SIZE} MATCHES "64")
-    warn_mixed_precision("64" "32")
-    ocv_module_disable(julia)
-    return()
-endif()
-
-if(NOT JlCxx_DIR)
-    execute_process(
-        COMMAND "${Julia_EXECUTABLE}" --startup-file=no -e "using CxxWrap; print(CxxWrap.CxxWrapCore.prefix_path())"
-        OUTPUT_VARIABLE JlCxx_DIR
-    )
-endif()
-
-if(JlCxx_DIR)
-    if(EXISTS ${JlCxx_DIR}/JlCxxConfig.cmake)
-    else()
-        message(STATUS "JlCxx found but not source build - disabling Julia module")
-        ocv_module_disable(julia)
-    endif()
-endif()
-
 find_package(JlCxx QUIET)
 
 if(NOT JlCxx_FOUND)
@@ -94,11 +56,11 @@ file(COPY ${CMAKE_CURRENT_BINARY_DIR}/gen/jl_cxx_files/ DESTINATION ${CMAKE_CURR
 ocv_glob_module_sources()
 ocv_module_include_directories()
 ocv_warnings_disable(CMAKE_CXX_FLAGS -Wmissing-prototypes -Wmissing-declarations)
-
 ocv_add_library(${the_module} SHARED ${OPENCV_MODULE_${the_module}_HEADERS}
                                      ${OPENCV_MODULE_${the_module}_SOURCES}
                                      "${CMAKE_CURRENT_BINARY_DIR}/gen/autogen_cpp/cv_core.cpp")
 
+
 if(NOT JULIA_PKG_INSTALL_PATH)
     set(JULIA_PKG_INSTALL_PATH ${CMAKE_BINARY_DIR})
 endif()
@@ -113,23 +75,9 @@ install(DIRECTORY package/ DESTINATION ${JULIA_PKG_INSTALL_PATH})
 install(TARGETS ${the_module} LIBRARY DESTINATION ${JULIA_PKG_INSTALL_PATH}/OpenCV/src/lib)
 
 
-if(JULIA_PKG_INSTALL_ENV)
-    set(JULIA_PKG_EXECS "Pkg.activate(${JULIA_PKG_INSTALL_ENV});${JULIA_PKG_EXECS}")
-endif()
-
-
-set(JULIA_COMMAND "\"${Julia_EXECUTABLE}\" -e \"using Pkg; ${JULIA_PKG_EXECS}\"")
 # message(STATUS "Installing Julia bindings using ${JULIA_COMMAND}")
 
 
-if(NOT INSTALL_CREATE_DISTRIB)
-    install(CODE "
-    set(JULIA_PKG_PATH \"${JULIA_PKG_INSTALL_PATH}/OpenCV\")
-    execute_process(COMMAND \"${Julia_EXECUTABLE}\" ${CMAKE_CURRENT_LIST_DIR}/package/install_package.jl \${JULIA_PKG_PATH} OUTPUT_VARIABLE JULIA_INSTALL_OUT)
-    message(STATUS \"Install output: \${JULIA_INSTALL_OUT}\")
-    ")
-endif()
-
 
 # ocv_create_module()
 
diff --git a/modules/julia/cmake/FindJulia.cmake b/modules/julia/cmake/FindJulia.cmake
index 61439925..9c065818 100644
--- a/modules/julia/cmake/FindJulia.cmake
+++ b/modules/julia/cmake/FindJulia.cmake
@@ -1,5 +1,6 @@
 
 # Original FindJulia.cmake from https://github.com/QuantStack/xtensor-julia-cookiecutter/blob/master/%7B%7Bcookiecutter.github_project_name%7D%7D/cmake/FindJulia.cmake
+
 if(Julia_FOUND)
     return()
 endif()
@@ -8,21 +9,28 @@ endif()
 # Julia Executable #
 ####################
 
-find_program(Julia_EXECUTABLE julia DOC "Julia executable")
+if(Julia_PREFIX)
+    message(STATUS "Adding path ${Julia_PREFIX} to search path")
+    list(APPEND CMAKE_PREFIX_PATH ${Julia_PREFIX})
+    message(STATUS "THIS BRANCH")
+else()
+    find_program(Julia_EXECUTABLE julia DOC "Julia executable")
+    message(STATUS "Found Julia executable: " ${Julia_EXECUTABLE})
+endif()
 
 #################
 # Julia Version #
 #################
 
 if(Julia_EXECUTABLE)
-    message(STATUS "Found Julia executable: " ${Julia_EXECUTABLE})
-
     execute_process(
         COMMAND "${Julia_EXECUTABLE}" --startup-file=no --version
         OUTPUT_VARIABLE Julia_VERSION_STRING
     )
 else()
-    return()
+    find_file(Julia_VERSION_INCLUDE julia_version.h PATH_SUFFIXES include/julia)
+    file(READ ${Julia_VERSION_INCLUDE} Julia_VERSION_STRING)
+    string(REGEX MATCH "JULIA_VERSION_STRING.*" Julia_VERSION_STRING ${Julia_VERSION_STRING})
 endif()
 
 string(
@@ -66,6 +74,7 @@ elseif(Julia_EXECUTABLE)
 elseif(Julia_PREFIX)
     set(Julia_INCLUDE_DIRS ${Julia_PREFIX}/include/julia)
 endif()
+set(Julia_INCLUDE_DIRS ${Julia_INCLUDE_DIRS};$ENV{includedir})
 MESSAGE(STATUS "Julia_INCLUDE_DIRS:   ${Julia_INCLUDE_DIRS}")
 
 ###################
@@ -73,7 +82,7 @@ MESSAGE(STATUS "Julia_INCLUDE_DIRS:   ${Julia_INCLUDE_DIRS}")
 ###################
 
 if(WIN32)
-    set(CMAKE_FIND_LIBRARY_SUFFIXES ${CMAKE_FIND_LIBRARY_SUFFIXES} .a)
+    set(CMAKE_FIND_LIBRARY_SUFFIXES ${CMAKE_FIND_LIBRARY_SUFFIXES} .a;.dll)
 endif()
 
 if(Julia_EXECUTABLE)
@@ -157,13 +166,17 @@ if(Julia_EXECUTABLE)
     MESSAGE(STATUS "Julia_WORD_SIZE:      ${Julia_WORD_SIZE}")
 endif()
 
+if($ENV{target} MATCHES "^i686.*")
+    set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -msse -msse2")
+endif()
+
 ###########################
 # FindPackage Boilerplate #
 ###########################
 
 include(FindPackageHandleStandardArgs)
 find_package_handle_standard_args(Julia
-    REQUIRED_VARS   Julia_LIBRARY Julia_LIBRARY_DIR Julia_INCLUDE_DIRS Julia_MAIN_HEADER Julia_EXECUTABLE
+    REQUIRED_VARS   Julia_LIBRARY Julia_LIBRARY_DIR Julia_INCLUDE_DIRS Julia_MAIN_HEADER
     VERSION_VAR     Julia_VERSION_STRING
     FAIL_MESSAGE    "Julia not found"
-)
+)
\ No newline at end of file
diff --git a/modules/julia/cmake/init.cmake b/modules/julia/cmake/init.cmake
index 09e83ccb..36f241c4 100644
--- a/modules/julia/cmake/init.cmake
+++ b/modules/julia/cmake/init.cmake
@@ -1,4 +1,4 @@
-OCV_OPTION(WITH_JULIA         "Include Julia support (opencv_contrib)"     OFF   IF (NOT ANDROID AND NOT IOS AND NOT WINRT AND NOT WIN32))
+OCV_OPTION(WITH_JULIA         "Include Julia support (opencv_contrib)"     OFF   IF (NOT ANDROID AND NOT IOS AND NOT WINRT))
 
 ocv_assert(OPENCV_INITIAL_PASS)
 
@@ -8,15 +8,8 @@ endif()
 
 # --- Julia ---
 if(WITH_JULIA AND NOT DEFINED Julia_FOUND)
-  include(${CMAKE_CURRENT_LIST_DIR}/FindJulia.cmake)
-  if(NOT Julia_FOUND)
-    message(WARNING "Julia was not found. Disabling Julia bindings...")
-    ocv_module_disable(julia)
-  endif()
-
-  # publish vars for status() dumper
-  set(Julia_FOUND "${Julia_FOUND}" PARENT_SCOPE)
-  set(Julia_EXECUTABLE "${Julia_EXECUTABLE}" PARENT_SCOPE)
+  set(Julia_FOUND "YES" PARENT_SCOPE)
+  set(Julia_EXECUTABLE "dummy_for_bb" PARENT_SCOPE)
   set(HAVE_JULIA "YES" CACHE STRING ADVANCED)
 
 endif()
diff --git a/modules/julia/gen/jl_cxx_files/OpenCV.jl b/modules/julia/gen/jl_cxx_files/OpenCV.jl
index 448d0055..53dc610a 100644
--- a/modules/julia/gen/jl_cxx_files/OpenCV.jl
+++ b/modules/julia/gen/jl_cxx_files/OpenCV.jl
@@ -1,6 +1,4 @@
 
-module OpenCV
-
 import Base.size
 
 include("cv_cxx.jl")
@@ -8,4 +6,3 @@ include("cv_cxx.jl")
 
 include("cv_wrap.jl")
 
-end
\ No newline at end of file
diff --git a/modules/julia/gen/jl_cxx_files/cv_cxx.jl b/modules/julia/gen/jl_cxx_files/cv_cxx.jl
index 948b22ac..4061ef16 100644
--- a/modules/julia/gen/jl_cxx_files/cv_cxx.jl
+++ b/modules/julia/gen/jl_cxx_files/cv_cxx.jl
@@ -1,12 +1,14 @@
 # using StaticArrays
 
+using OpenCV_jll
+
 include("typestructs.jl")
 include("Vec.jl")
 const dtypes = Union{UInt8, Int8, UInt16, Int16, Int32, Float32, Float64}
 size_t = UInt64
 
 using CxxWrap
-@wrapmodule(joinpath(@__DIR__,"lib","libopencv_julia"), :cv_wrap)
+@wrapmodule(OpenCV_jll.libopencv_julia_path, :cv_wrap)
 function __init__()
     @initcxx
 
