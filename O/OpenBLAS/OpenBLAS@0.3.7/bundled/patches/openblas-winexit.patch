commit d9a4e67bb613a8720b606870903afac95273c607
Author: Keno Fischer <keno@juliacomputing.com>
Date:   Fri Feb 28 15:10:08 2020 -0500

    Winexit patch redux

diff --git a/driver/others/memory.c b/driver/others/memory.c
index 534d6d9f..f5cba6a0 100644
--- a/driver/others/memory.c
+++ b/driver/others/memory.c
@@ -80,7 +80,7 @@ USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 #undef COMPILE_TLS
 #endif
 
-#if defined(__GLIBC_PREREQ) 
+#if defined(__GLIBC_PREREQ)
 #if !__GLIBC_PREREQ(2,20)
 #undef COMPILE_TLS
 #endif
@@ -248,7 +248,7 @@ int get_num_procs(void) {
       return nums;
     }
     ret = CPU_COUNT_S(size,cpusetp);
-    if (ret > 0 && ret < nums) nums = ret;	
+    if (ret > 0 && ret < nums) nums = ret;
     CPU_FREE(cpusetp);
     return nums;
   } else {
@@ -257,7 +257,7 @@ int get_num_procs(void) {
       return nums;
     }
     ret = CPU_COUNT(&cpuset);
-    if (ret > 0 && ret < nums) nums = ret;	
+    if (ret > 0 && ret < nums) nums = ret;
     return nums;
   }
  #endif
@@ -1510,7 +1510,7 @@ void CONSTRUCTOR gotoblas_init(void) {
 
 }
 
-void DESTRUCTOR gotoblas_quit(void) {
+void gotoblas_quit(void) {
 
   if (gotoblas_initialized == 0) return;
 
@@ -1521,7 +1521,7 @@ void DESTRUCTOR gotoblas_quit(void) {
   TlsFree(local_storage_key);
 #else
   pthread_key_delete(local_storage_key);
-#endif		
+#endif
 #endif
 
 #ifdef PROFILE
@@ -1547,74 +1547,12 @@ void DESTRUCTOR gotoblas_quit(void) {
 #endif
 }
 
-#if defined(_MSC_VER) && !defined(__clang__)
-BOOL APIENTRY DllMain(HMODULE hModule, DWORD  ul_reason_for_call, LPVOID lpReserved)
-{
-  switch (ul_reason_for_call)
-  {
-    case DLL_PROCESS_ATTACH:
-      gotoblas_init();
-      break;
-    case DLL_THREAD_ATTACH:
-      break;
-    case DLL_THREAD_DETACH:
-#if defined(SMP)
-      blas_thread_memory_cleanup();
-#endif
-      break;
-    case DLL_PROCESS_DETACH:
-      gotoblas_quit();
-      break;
-    default:
-      break;
-  }
-  return TRUE;
-}
-
-/*
-  This is to allow static linking.
-  Code adapted from Google performance tools:
-  https://gperftools.googlecode.com/git-history/perftools-1.0/src/windows/port.cc
-  Reference:
-  https://sourceware.org/ml/pthreads-win32/2008/msg00028.html
-  http://ci.boost.org/svn-trac/browser/trunk/libs/thread/src/win32/tss_pe.cpp
-*/
-static int on_process_term(void)
-{
-	gotoblas_quit();
-	return 0;
-}
 #ifdef _WIN64
 #pragma comment(linker, "/INCLUDE:_tls_used")
 #else
 #pragma comment(linker, "/INCLUDE:__tls_used")
 #endif
 
-#ifdef _WIN64
-#pragma const_seg(".CRT$XLB")
-#else
-#pragma data_seg(".CRT$XLB")
-#endif
-static void (APIENTRY *dll_callback)(HINSTANCE h, DWORD ul_reason_for_call, PVOID pv) = DllMain;
-#ifdef _WIN64
-#pragma const_seg()
-#else
-#pragma data_seg()
-#endif
-
-#ifdef _WIN64
-#pragma const_seg(".CRT$XTU")
-#else
-#pragma data_seg(".CRT$XTU")
-#endif
-static int(*p_process_term)(void) = on_process_term;
-#ifdef _WIN64
-#pragma const_seg()
-#else
-#pragma data_seg()
-#endif
-#endif
-
 #if (defined(C_PGI) || (!defined(C_SUN) && defined(F_INTERFACE_SUN))) && (defined(ARCH_X86) || defined(ARCH_X86_64))
 /* Don't call me; this is just work around for PGI / Sun bug */
 void gotoblas_dummy_for_PGI(void) {
@@ -1793,7 +1731,7 @@ int get_num_procs(void) {
       return nums;
     }
     ret = CPU_COUNT_S(size,cpusetp);
-    if (ret > 0 && ret < nums) nums = ret;	
+    if (ret > 0 && ret < nums) nums = ret;
     CPU_FREE(cpusetp);
     return nums;
   } else {
@@ -1802,7 +1740,7 @@ int get_num_procs(void) {
       return nums;
     }
     ret = CPU_COUNT(&cpuset);
-    if (ret > 0 && ret < nums) nums = ret;	
+    if (ret > 0 && ret < nums) nums = ret;
     return nums;
   }
  #endif
@@ -2070,15 +2008,15 @@ static void *alloc_mmap(void *address){
   if (map_address != (void *)-1) {
 #if (defined(SMP) || defined(USE_LOCKING)) && !defined(USE_OPENMP)
     LOCK_COMMAND(&alloc_lock);
-#endif    
+#endif
     release_info[release_pos].address = map_address;
     release_info[release_pos].func    = alloc_mmap_free;
     release_pos ++;
 #if (defined(SMP) || defined(USE_LOCKING)) && !defined(USE_OPENMP)
     UNLOCK_COMMAND(&alloc_lock);
-#endif    
+#endif
   } else {
-#ifdef DEBUG  
+#ifdef DEBUG
         int errsv=errno;
        perror("OpenBLAS : mmap failed:");
        printf("error code=%d,\tmap_address=%lx\n",errsv,map_address);
@@ -2487,7 +2425,7 @@ static void *alloc_hugetlb(void *address){
 
   tp.PrivilegeCount = 1;
   tp.Privileges[0].Attributes = SE_PRIVILEGE_ENABLED;
-  
+
   if (LookupPrivilegeValue(NULL, SE_LOCK_MEMORY_NAME, &tp.Privileges[0].Luid) != TRUE) {
       CloseHandle(hToken);
       return (void*)-1;
@@ -2693,7 +2631,7 @@ void *blas_memory_alloc(int procpos){
     if (!memory[position].used && (memory[position].pos == mypos)) {
 #if defined(SMP) && !defined(USE_OPENMP)
       LOCK_COMMAND(&alloc_lock);
-#else      
+#else
       blas_lock(&memory[position].lock);
 #endif
       if (!memory[position].used) goto allocation;
@@ -2701,7 +2639,7 @@ void *blas_memory_alloc(int procpos){
       UNLOCK_COMMAND(&alloc_lock);
 #else
       blas_unlock(&memory[position].lock);
-#endif      
+#endif
     }
 
     position ++;
@@ -2717,21 +2655,21 @@ void *blas_memory_alloc(int procpos){
   LOCK_COMMAND(&alloc_lock);
 #endif
   do {
-#if defined(USE_OPENMP)	  
-    if (!memory[position].used) { 
+#if defined(USE_OPENMP)
+    if (!memory[position].used) {
       blas_lock(&memory[position].lock);
 #endif
       if (!memory[position].used) goto allocation;
-      
+
 #if defined(USE_OPENMP)
-      blas_unlock(&memory[position].lock);      
+      blas_unlock(&memory[position].lock);
     }
 #endif
     position ++;
 
   } while (position < NUM_BUFFERS);
 #if (defined(SMP) || defined(USE_LOCKING)) && !defined(USE_OPENMP)
-  UNLOCK_COMMAND(&alloc_lock);	
+  UNLOCK_COMMAND(&alloc_lock);
 #endif
   goto error;
 
@@ -2745,7 +2683,7 @@ void *blas_memory_alloc(int procpos){
 #if (defined(SMP) || defined(USE_LOCKING)) && !defined(USE_OPENMP)
   UNLOCK_COMMAND(&alloc_lock);
 #else
-  blas_unlock(&memory[position].lock);	
+  blas_unlock(&memory[position].lock);
 #endif
   if (!memory[position].addr) {
     do {
@@ -2793,7 +2731,7 @@ void *blas_memory_alloc(int procpos){
 
 #if (defined(SMP) || defined(USE_LOCKING)) && !defined(USE_OPENMP)
     LOCK_COMMAND(&alloc_lock);
-#endif    
+#endif
     memory[position].addr = map_address;
 #if (defined(SMP) || defined(USE_LOCKING)) && !defined(USE_OPENMP)
     UNLOCK_COMMAND(&alloc_lock);
@@ -3104,7 +3042,7 @@ void CONSTRUCTOR gotoblas_init(void) {
 
 }
 
-void DESTRUCTOR gotoblas_quit(void) {
+void gotoblas_quit(void) {
 
   if (gotoblas_initialized == 0) return;
 
@@ -3133,71 +3071,6 @@ void DESTRUCTOR gotoblas_quit(void) {
 #endif
 }
 
-#if defined(_MSC_VER) && !defined(__clang__)
-BOOL APIENTRY DllMain(HMODULE hModule, DWORD  ul_reason_for_call, LPVOID lpReserved)
-{
-  switch (ul_reason_for_call)
-  {
-    case DLL_PROCESS_ATTACH:
-      gotoblas_init();
-      break;
-    case DLL_THREAD_ATTACH:
-      break;
-    case DLL_THREAD_DETACH:
-      break;
-    case DLL_PROCESS_DETACH:
-      gotoblas_quit();
-      break;
-    default:
-      break;
-  }
-  return TRUE;
-}
-
-/*
-  This is to allow static linking.
-  Code adapted from Google performance tools:
-  https://gperftools.googlecode.com/git-history/perftools-1.0/src/windows/port.cc
-  Reference:
-  https://sourceware.org/ml/pthreads-win32/2008/msg00028.html
-  http://ci.boost.org/svn-trac/browser/trunk/libs/thread/src/win32/tss_pe.cpp
-*/
-static int on_process_term(void)
-{
-	gotoblas_quit();
-	return 0;
-}
-#ifdef _WIN64
-#pragma comment(linker, "/INCLUDE:_tls_used")
-#else
-#pragma comment(linker, "/INCLUDE:__tls_used")
-#endif
-
-#ifdef _WIN64
-#pragma const_seg(".CRT$XLB")
-#else
-#pragma data_seg(".CRT$XLB")
-#endif
-static void (APIENTRY *dll_callback)(HINSTANCE h, DWORD ul_reason_for_call, PVOID pv) = DllMain;
-#ifdef _WIN64
-#pragma const_seg()
-#else
-#pragma data_seg()
-#endif
-
-#ifdef _WIN64
-#pragma const_seg(".CRT$XTU")
-#else
-#pragma data_seg(".CRT$XTU")
-#endif
-static int(*p_process_term)(void) = on_process_term;
-#ifdef _WIN64
-#pragma const_seg()
-#else
-#pragma data_seg()
-#endif
-#endif
-
 #if (defined(C_PGI) || (!defined(C_SUN) && defined(F_INTERFACE_SUN))) && (defined(ARCH_X86) || defined(ARCH_X86_64))
 /* Don't call me; this is just work around for PGI / Sun bug */
 void gotoblas_dummy_for_PGI(void) {
@@ -3212,7 +3085,7 @@ void gotoblas_dummy_for_PGI(void) {
   asm (".section .init,\"ax\"; call gotoblas_init@PLT; .section .text");
   asm (".section .fini,\"ax\"; call gotoblas_quit@PLT; .section .text");
 #endif
-#endif	
+#endif
 }
 #endif
 
