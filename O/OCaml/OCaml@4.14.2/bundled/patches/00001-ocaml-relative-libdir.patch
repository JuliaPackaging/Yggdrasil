commit 7df7d13d502b8f8603d8ddab58622c17aa41a1c0
Author: Cody Tapscott <topolarity@tapscott.me>
Date:   Fri Jan 31 16:06:08 2025 -0500

    Add relative path fallback for libdir / bindir
    
    The existing `OCAMLLIB` environment variable already allows you to use
    a standard library installed elsewhere, but it doesn't let you re-locate
    an existing installation. As one might expect, the problem is that the
    stdlib itself contains absolute references to its own paths.
    
    This patch tries to hook into both places where that happens and do an
    on-the-fly replacement of the standard library path, if it turns out
    this is the standard library that OCaml that was built with (just
    moved).
    
    This kicks in if the default hard-coded `%%LIBDIR%%`/`%%BINDIR%%` cannot
    be found.

diff --git a/bytecomp/bytelink.ml b/bytecomp/bytelink.ml
index ba6a3c39f5..760b848322 100644
--- a/bytecomp/bytelink.ml
+++ b/bytecomp/bytelink.ml
@@ -323,6 +323,7 @@ let link_bytecode ?final_name tolink exec_name standalone =
     ~always:(fun () -> close_out outchan)
     ~exceptionally:(fun () -> remove_file exec_name)
     (fun () ->
+       let relocate_bindir = Misc.replace_substring ~before:Config.bindir_default ~after:Config.bindir in
        if standalone && !Clflags.with_runtime then begin
          (* Copy the header *)
          let header =
@@ -331,8 +332,9 @@ let link_bytecode ?final_name tolink exec_name standalone =
          in
          try
            let inchan = open_in_bin (Load_path.find header) in
-           copy_file inchan outchan;
-           close_in inchan
+           let header_contents = string_of_file inchan in
+             output_string outchan (relocate_bindir header_contents);
+             close_in inchan
          with
          | Not_found -> raise (Error (File_not_found header))
          | Sys_error msg -> raise (Error (Camlheader (header, msg)))
diff --git a/runtime/caml/misc.h b/runtime/caml/misc.h
index c605f8711e..e9f6b8bffb 100644
--- a/runtime/caml/misc.h
+++ b/runtime/caml/misc.h
@@ -28,6 +28,7 @@
 #include <stddef.h>
 #include <stdlib.h>
 #include <stdarg.h>
+#include <libgen.h>
 
 /* Deprecation warnings */
 
@@ -327,11 +328,13 @@ extern double caml_log1p(double);
 #define execvp_os _wexecvp
 #define execvpe_os _wexecvpe
 #define strcmp_os wcscmp
+#define strncmp_os wcsncmp
 #define strlen_os wcslen
 #define sscanf_os swscanf
 #define strcpy_os wcscpy
 #define mktemp_os _wmktemp
 #define fopen_os _wfopen
+#define dirname_os _wdirname
 
 #define clock_os caml_win32_clock
 
@@ -367,11 +370,13 @@ extern double caml_log1p(double);
 #define execvp_os execvp
 #define execvpe_os execvpe
 #define strcmp_os strcmp
+#define strncmp_os strncmp
 #define strlen_os strlen
 #define sscanf_os sscanf
 #define strcpy_os strcpy
 #define mktemp_os mktemp
 #define fopen_os fopen
+#define dirname_os dirname
 
 #define clock_os clock
 
diff --git a/runtime/dynlink.c b/runtime/dynlink.c
index b92d5e36eb..1fb16310f7 100644
--- a/runtime/dynlink.c
+++ b/runtime/dynlink.c
@@ -77,18 +77,62 @@ static c_primitive lookup_primitive(char * name)
 
 #define LD_CONF_NAME T("ld.conf")
 
+static int is_directory(char_os * p)
+{
+#ifdef _WIN32
+  struct _stati64 st;
+#else
+  struct stat st;
+#endif
+  int ret;
+
+  ret = stat_os(p, &st);
+  if (ret == -1) return -1;
+  if (st.st_mode == -1) return -1;
+
+#ifdef S_ISDIR
+  return S_ISDIR(st.st_mode) ? 1 : 0;
+#else
+  return st.st_mode & S_IFDIR ? 1 : 0;
+#endif
+}
+
+
 CAMLexport char_os * caml_get_stdlib_location(void)
 {
-  char_os * stdlib;
+  char_os * bindir, * exe;
+
+  static char_os * stdlib = NULL;
+  if (stdlib != NULL)
+    return stdlib;
+
   stdlib = caml_secure_getenv(T("OCAMLLIB"));
   if (stdlib == NULL) stdlib = caml_secure_getenv(T("CAMLLIB"));
-  if (stdlib == NULL) stdlib = OCAML_STDLIB_DIR;
+
+  if (stdlib == NULL && is_directory(OCAML_STDLIB_DIR) == 1)
+    stdlib = OCAML_STDLIB_DIR;
+
+  if (stdlib == NULL) {
+    exe = caml_executable_name();
+    bindir = dirname_os(exe);
+
+    stdlib = caml_stat_strconcat_os(7,
+      bindir, T("/"), "..", T("/"), "lib", T("/"), "ocaml");
+
+    caml_stat_free(exe);
+  }
+
   return stdlib;
 }
 
+int starts_with(const char_os *str, const char_os * pre)
+{
+    return strncmp_os(pre, str, strlen_os(pre)) == 0;
+}
+
 CAMLexport char_os * caml_parse_ld_conf(void)
 {
-  char_os * stdlib, * ldconfname, * wconfig, * p, * q;
+  char_os * stdlib, * ldconfname, * wconfig, * tail, * replaced, * p, * q;
   char * config;
 #ifdef _WIN32
   struct _stati64 st;
@@ -120,7 +164,14 @@ CAMLexport char_os * caml_parse_ld_conf(void)
   for (p = wconfig; *p != 0; p++) {
     if (*p == '\n') {
       *p = 0;
-      caml_ext_table_add(&caml_shared_libs_path, q);
+      if (starts_with(q, OCAML_STDLIB_DIR)) {
+        // replace 'OCAML_STDLIB_DIR' with 'stdlib'
+        tail = q + strlen(OCAML_STDLIB_DIR);
+        replaced = caml_stat_strconcat_os(2, stdlib, tail);
+        caml_ext_table_add(&caml_shared_libs_path, replaced);
+      } else {
+        caml_ext_table_add(&caml_shared_libs_path, q);
+      }
       q = p + 1;
     }
   }
diff --git a/utils/config.mli b/utils/config.mli
index 94dee3cb92..4dcfe92c52 100644
--- a/utils/config.mli
+++ b/utils/config.mli
@@ -26,6 +26,9 @@ val version: string
 val bindir: string
 (** The directory containing the binary programs *)
 
+val bindir_default: string
+(** The directory containing the binary programs (at build-time) *)
+
 val standard_library: string
 (** The directory containing the standard libraries *)
 
diff --git a/utils/config.mlp b/utils/config.mlp
index f758a9b483..ae4fdd3ff6 100644
--- a/utils/config.mlp
+++ b/utils/config.mlp
@@ -17,10 +17,24 @@
 (* The main OCaml version string has moved to ../build-aux/ocaml_version.m4 *)
 let version = Sys.ocaml_version
 
-let bindir = "%%BINDIR%%"
+let bindir_default = "%%BINDIR%%"
+
+let bindir =
+  let relative_path = Filename.dirname Sys.executable_name in
+    try
+      if Sys.is_directory bindir_default then
+        bindir_default
+      else
+        relative_path
+    with Sys_error(_) ->
+      relative_path
 
 let standard_library_default = "%%LIBDIR%%"
 
+let standard_library_relative =
+  let dir_sep = Filename.dir_sep in
+    ".." ^ dir_sep ^ "lib" ^ dir_sep ^ "ocaml"
+
 let standard_library =
   try
     Sys.getenv "OCAMLLIB"
@@ -28,7 +42,17 @@ let standard_library =
   try
     Sys.getenv "CAMLLIB"
   with Not_found ->
-    standard_library_default
+    let dirname = Filename.dirname
+    and dir_sep = Filename.dir_sep
+    and executable_name = Sys.executable_name in
+      let relative_path = (dirname executable_name) ^ dir_sep ^ standard_library_relative in
+        try
+          if Sys.is_directory standard_library_default then
+            standard_library_default
+          else
+            relative_path
+        with Sys_error(_) ->
+          relative_path
 
 let ccomp_type = "%%CCOMPTYPE%%"
 let c_compiler = "%%CC%%"
@@ -164,6 +188,7 @@ let configuration_variables =
 [
   p "version" version;
   p "standard_library_default" standard_library_default;
+  p "standard_library_relative" standard_library_relative;
   p "standard_library" standard_library;
   p "ccomp_type" ccomp_type;
   p "c_compiler" c_compiler;
