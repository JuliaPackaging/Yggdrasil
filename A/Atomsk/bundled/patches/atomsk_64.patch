diff --git a/src/Makefile b/src/Makefile
index 9eb21e9..658445a 100644
--- a/src/Makefile
+++ b/src/Makefile
@@ -65,9 +65,11 @@ ifndef FORTRAN
   # -I is used to specify folders where the compiler should look for *.mod files
   # -J is used to specify the folder where the compiler will store the *.mod files
   FFLAGS=-O2 $(OPENMP) -fno-backslash -I..$(SEP)$(OBJ) -J..$(SEP)$(OBJ)
+  EXEFFLAGS=-O2 $(OPENMP) -fno-backslash -I$(OBJ) -J$(OBJ)
   
   # Add -fpic to compile Atomsk as a shared library
-  #FFLAGS+=-fPIC
+  FFLAGS+=-fPIC
+  EXEFFLAGS+=-fPIC
   
   # Un-comment the following line to use 8-bits integers by default
   # (number of atoms up to 9x10^18 instead of 2x10^9)
@@ -157,8 +159,8 @@ all: atomsk
 
 # Compile the program
 # Note that the preprocessor must be called (-cpp)
-atomsk: message modes compute general
-	$(FORTRAN) $(FFLAGS) -cpp -o $(BIN) $(OBJ)$(SEP)*.o atomsk.f90 -I $(OBJ) $(LAPACK)
+atomsk: clib
+	$(FORTRAN) $(EXEFFLAGS) -cpp -o $(bindir)/atomsk$(exeext) atomsk.f90 $(LDFLAGS) -latomsk
 	@echo ""
 	@echo "    \o/ Compilation was successful!"
 	@echo ""
@@ -175,7 +177,7 @@ lib: message compute modes
 	@echo ""
 
 clib: message compute modes
-	$(FORTRAN) $(FFLAGS) -cpp -shared -o atomsk.so $(OBJ)$(SEP)*.o
+	$(FORTRAN) $(EXEFFLAGS) -cpp -shared -o $(libdir)/libatomsk.$(dlext) $(OBJ)$(SEP)*.o $(LAPACK)
 	@echo ""
 	@echo "    \o/ Atomsk was compiled as a shared library file with cbindings, 'atomsk.so'."
 	@echo ""
diff --git a/src/compute/compute_G.f90 b/src/compute/compute_G.f90
index fe5294e..34bb4f4 100644
--- a/src/compute/compute_G.f90
+++ b/src/compute/compute_G.f90
@@ -1018,7 +1018,7 @@ DO iat=1,SIZE(P2,1)
       ALLOCATE (work_array(MAX(1,LWORK)))
       ALLOCATE (Stemp(3))
       !
-      CALL DGELSS(nb_neigh,3,nb_neigh,Q_matrix,nb_neigh,IdMat,MAX(nb_neigh,3),  &
+      CALL DGELSS_64(nb_neigh,3,nb_neigh,Q_matrix,nb_neigh,IdMat,MAX(nb_neigh,3),  &
                   & Stemp,-1.d0,Q_matrix_rank,work_array,LWORK,INFO)
       !
       IF ( INFO.NE.0 ) THEN
diff --git a/src/include/math.f90 b/src/include/math.f90
index c48ac7c..90ca219 100644
--- a/src/include/math.f90
+++ b/src/include/math.f90
@@ -518,9 +518,9 @@ ELSE
   ELSEIF( SIZE(G,1)==SIZE(M,1) .AND. SIZE(G,2)==SIZE(M,2) ) THEN
     !general NxN matrix: call LAPACK routines DGETRF and DGETRI
     G(:,:) = M(:,:)
-    CALL DGETRF( SIZE(M,1), SIZE(M,2), G, SIZE(M,1), IPIV, i)
+    CALL DGETRF_64( SIZE(M,1), SIZE(M,2), G, SIZE(M,1), IPIV, i)
     IF( i==0 ) THEN
-      CALL DGETRI( SIZE(M,1), G, SIZE(M,1), IPIV, WORK, SIZE(M,1), i )
+      CALL DGETRI_64( SIZE(M,1), G, SIZE(M,1), IPIV, WORK, SIZE(M,1), i )
     ENDIF
     !
   ELSE
diff --git a/src/modes/mode_nye.f90 b/src/modes/mode_nye.f90
index 4e97da1..de9dba9 100644
--- a/src/modes/mode_nye.f90
+++ b/src/modes/mode_nye.f90
@@ -708,7 +708,7 @@ DO iat=1,SIZE(P2,1)
       ALLOCATE (work_array(MAX(1,LWORK)))
       ALLOCATE (Stemp(3))
       !
-      CALL DGELSS(nb_neigh,3,nb_neigh,Q_matrix,nb_neigh,IdMat,MAX(nb_neigh,3),    &
+      CALL DGELSS_64(nb_neigh,3,nb_neigh,Q_matrix,nb_neigh,IdMat,MAX(nb_neigh,3),    &
                   & Stemp,-1.d0,Q_matrix_rank,work_array,LWORK,INFO)
       !
       IF (INFO.NE.0) THEN
diff --git a/src/options/disloc_aniso.f90 b/src/options/disloc_aniso.f90
index 98198e1..65c56b6 100644
--- a/src/options/disloc_aniso.f90
+++ b/src/options/disloc_aniso.f90
@@ -287,7 +287,7 @@ aik_Hess(6,6) = -1.d0*aik_det(2)/aik_det(1)
 !
 !Call LAPACK routine DGEEV to find the 6 complex eigenvalues of aik_Hess
 !( eigenvalues of aik_Hess = roots of Eq.(13-85) )
-CALL DGEEV( 'N', 'N', 6, aik_Hess, 6, WR, WI, VL, 1, VR,1, WORK, 18, k )
+CALL DGEEV_64( 'N', 'N', 6, aik_Hess, 6, WR, WI, VL, 1, VR,1, WORK, 18, k )
 !If k is different from 0 then it failed => exit
 IF(k.NE.0) THEN
   ifail = 1
@@ -623,7 +623,7 @@ ENDIF
 !
 !Solving the 6 linear equations
 !Note: DGESV is a LAPACK routine for solving linear equations
-CALL DGESV(6,1,LHA(:,:),6,IPIV,RHA(:,:),6,k)
+CALL DGESV_64(6,1,LHA(:,:),6,IPIV,RHA(:,:),6,k)
 !
 IF(verbosity==4) THEN
   !Some debug messages
