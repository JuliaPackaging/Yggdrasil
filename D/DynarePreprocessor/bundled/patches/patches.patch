From b8766f2605bf044d98cc938030e7159744ff780d Mon Sep 17 00:00:00 2001
From: MichelJuillard <michel.juillard@mjui.fr>
Date: Sun, 6 Nov 2022 10:15:02 +0100
Subject: [PATCH 01/16] Exception class instead of struct

---
 src/DataTree.hh               | 14 ++++++++++---
 src/EquationTags.hh           |  9 ++++++++-
 src/ExternalFunctionsTable.hh |  6 +++++-
 src/SymbolTable.hh            | 37 ++++++++++++++++++++++++++++++-----
 4 files changed, 56 insertions(+), 10 deletions(-)

diff --git a/src/DataTree.hh b/src/DataTree.hh
index 8afab57c..1319fee2 100644
--- a/src/DataTree.hh
+++ b/src/DataTree.hh
@@ -287,9 +287,13 @@ public:
   };
 
   //! Raised when a trend is declared twice
-  struct TrendException
+  class TrendException : public std::exception
   {
-    string name;
+  private: 
+    const string name;
+
+  public:
+    TrendException(string name_arg) : name(name_arg) {}
   };
 
   // Returns the derivation ID, or throws an exception if the derivation ID does not exist
@@ -337,10 +341,14 @@ public:
     return false;
   };
 
-  struct UnknownLocalVariableException
+  class UnknownLocalVariableException : public std::exception
   {
+  private: 
     //! Symbol ID
     int id;
+
+  public:
+    UnknownLocalVariableException(int id_arg) : id(id_arg) {}
   };
 
   expr_t
diff --git a/src/EquationTags.hh b/src/EquationTags.hh
index e57753b8..b17bb516 100644
--- a/src/EquationTags.hh
+++ b/src/EquationTags.hh
@@ -31,9 +31,16 @@ class EquationTags
 private:
   map<int, map<string, string>> eqn_tags;
 public:
-  struct TagNotFoundException
+  class TagNotFoundException : public std::exception
   {
+  private: 
     const string key, value;
+
+  public:
+    TagNotFoundException(const string key_arg, const string value_arg) : key(key_arg),
+									 value(value_arg)
+    {
+    }
   };
 
   // Add multiple equation tags for the given equation
diff --git a/src/ExternalFunctionsTable.hh b/src/ExternalFunctionsTable.hh
index 39fbd67f..3d9626f9 100644
--- a/src/ExternalFunctionsTable.hh
+++ b/src/ExternalFunctionsTable.hh
@@ -33,10 +33,14 @@ class ExternalFunctionsTable
 {
 public:
   //! Thrown when trying to access an unknown symbol (by id)
-  struct UnknownExternalFunctionSymbolIDException
+  class UnknownExternalFunctionSymbolIDException : public std::exception
   {
+  private: 
     //! Symbol ID
     int id;
+
+  public:
+    UnknownExternalFunctionSymbolIDException(int id_arg) : id(id_arg) {}
   };
 
   /* For all arguments, -2 means not set
diff --git a/src/SymbolTable.hh b/src/SymbolTable.hh
index 818334fc..cce17027 100644
--- a/src/SymbolTable.hh
+++ b/src/SymbolTable.hh
@@ -148,36 +148,63 @@ private:
 
 public:
   //! Thrown when trying to access an unknown symbol (by name)
-  struct UnknownSymbolNameException
+  class UnknownSymbolNameException : public std::exception
   {
+  private: 
     //! Symbol name
     const string name;
+
+  public:
+    UnknownSymbolNameException(const string name_arg) : name(name_arg) {}
   };
   //! Thrown when trying to access an unknown symbol (by id)
-  struct UnknownSymbolIDException
+  class UnknownSymbolIDException : public std::exception
   {
+  private: 
     //! Symbol ID
     const int id;
+
+  public:
+    UnknownSymbolIDException(const int id_arg) : id(id_arg) {}
   };
   //! Thrown when trying to access an unknown type specific ID
-  struct UnknownTypeSpecificIDException
+  class UnknownTypeSpecificIDException : public std::exception
   {
+  private: 
     const int tsid;
     const SymbolType type;
+
+  public:
+    UnknownTypeSpecificIDException(int tsid_arg, SymbolType type_arg) : tsid(tsid_arg),
+									type(type_arg)
+    {
+    }
   };
   /* Thrown when requesting the type specific ID of a symbol which doesn’t
      have one */
-  struct NoTypeSpecificIDException
+  class NoTypeSpecificIDException : public std::exception
   {
+  private: 
+    //! Symbol ID
     const int symb_id;
+
+  public:
+    NoTypeSpecificIDException(int symb_id_arg) : symb_id(symb_id_arg) {}
   };
   //! Thrown when trying to declare a symbol twice
-  struct AlreadyDeclaredException
+  class AlreadyDeclaredException : public std::exception
   {
+  private: 
     //! Symbol name
     const string name;
     //! Was the previous declaration done with the same symbol type ?
     const bool same_type;
+
+  public:
+    AlreadyDeclaredException(string name_arg, bool same_type_arg) : name(name_arg),
+								    same_type(same_type_arg)
+    {
+    }
   };
   //! Thrown when table is frozen and trying to modify it
   class FrozenException
-- 
2.35.1


From b36f1836afbc072b37e8ccf81923a61c8f1e2f89 Mon Sep 17 00:00:00 2001
From: MichelJuillard <michel.juillard@mjui.fr>
Date: Sun, 6 Nov 2022 10:33:44 +0100
Subject: [PATCH 02/16] clang doesn't support jthread

---
 src/DynareMain.cc | 2 +-
 src/ModelTree.cc  | 4 +++-
 src/ModelTree.hh  | 2 +-
 3 files changed, 5 insertions(+), 3 deletions(-)

diff --git a/src/DynareMain.cc b/src/DynareMain.cc
index 4acd1bd2..45662846 100644
--- a/src/DynareMain.cc
+++ b/src/DynareMain.cc
@@ -503,7 +503,7 @@ main(int argc, char **argv)
     }
 
   if (mod_file->use_dll)
-    ModelTree::initializeMEXCompilationWorkers(max(jthread::hardware_concurrency(), 1U));
+    ModelTree::initializeMEXCompilationWorkers(max(thread::hardware_concurrency(), 1U));
 
   if (json == JsonOutputPointType::parsing)
     mod_file->writeJsonOutput(basename, json, json_output_mode, onlyjson);
diff --git a/src/ModelTree.cc b/src/ModelTree.cc
index d196094d..26920833 100644
--- a/src/ModelTree.cc
+++ b/src/ModelTree.cc
@@ -45,7 +45,7 @@ condition_variable_any ModelTree::mex_compilation_cv;
 mutex ModelTree::mex_compilation_mut;
 vector<tuple<filesystem::path, set<filesystem::path>, string>> ModelTree::mex_compilation_queue;
 set<filesystem::path> ModelTree::mex_compilation_done;
-vector<jthread> ModelTree::mex_compilation_workers;
+vector<thread> ModelTree::mex_compilation_workers;
 
 void
 ModelTree::copyHelper(const ModelTree &m)
@@ -1917,6 +1917,7 @@ ModelTree::writeBlockBytecodeAdditionalDerivatives([[maybe_unused]] BytecodeWrit
 void
 ModelTree::initializeMEXCompilationWorkers(int numworkers)
 {
+  /*
   assert(numworkers > 0);
   assert(mex_compilation_workers.empty());
 
@@ -1965,6 +1966,7 @@ ModelTree::initializeMEXCompilationWorkers(int numworkers)
             mex_compilation_cv.notify_all();
           }
     });
+*/
 }
 
 void
diff --git a/src/ModelTree.hh b/src/ModelTree.hh
index d96d1818..d0515b51 100644
--- a/src/ModelTree.hh
+++ b/src/ModelTree.hh
@@ -401,7 +401,7 @@ private:
   vector<int> endo2eq;
 
   // Stores workers used for compiling MEX files in parallel
-  static vector<jthread> mex_compilation_workers;
+  static vector<thread> mex_compilation_workers;
 
   /* The following variables implement the thread synchronization mechanism for
      limiting the number of concurrent GCC processes and tracking dependencies
-- 
2.35.1


From 9d1959b20a4bca33d0556f716f9458cbd543dac6 Mon Sep 17 00:00:00 2001
From: MichelJuillard <michel.juillard@mjui.fr>
Date: Sun, 6 Nov 2022 11:31:30 +0100
Subject: [PATCH 03/16] ignore unused-private-field warning

---
 src/Makefile.am | 2 +-
 1 file changed, 1 insertion(+), 1 deletion(-)

diff --git a/src/Makefile.am b/src/Makefile.am
index 36c5ff56..86871fce 100644
--- a/src/Makefile.am
+++ b/src/Makefile.am
@@ -68,7 +68,7 @@ EXTRA_DIST = \
 	$(BUILT_SOURCES)
 
 # The -I. is for <FlexLexer.h>
-dynare_preprocessor_CPPFLAGS = $(BOOST_CPPFLAGS) -I.
+dynare_preprocessor_CPPFLAGS = $(BOOST_CPPFLAGS) -I. -Wno-unused-private-field
 dynare_preprocessor_LDFLAGS = $(AM_LDFLAGS) $(BOOST_LDFLAGS)
 # -lpthread is no longer necessary for glibc ⩾ 2.34 (i.e. Debian “bookworm” 12)
 dynare_preprocessor_LDADD = macro/libmacro.a -lpthread
-- 
2.35.1


From 6fb912fbff80ba6a837e7f6505afe38bb008137b Mon Sep 17 00:00:00 2001
From: MichelJuillard <michel.juillard@mjui.fr>
Date: Wed, 9 Nov 2022 18:04:24 +0100
Subject: [PATCH 04/16] add -Wno-unused-private-field

---
 configure.ac    | 2 +-
 src/Makefile.am | 2 +-
 2 files changed, 2 insertions(+), 2 deletions(-)

diff --git a/configure.ac b/configure.ac
index a1aa904e..e078d7d0 100644
--- a/configure.ac
+++ b/configure.ac
@@ -43,7 +43,7 @@ esac
 # Use C++ for testing headers
 AC_LANG([C++])
 
-AM_CXXFLAGS="-std=gnu++20 -Wall -Wno-dangling-else -Wextra -Wold-style-cast"
+AM_CXXFLAGS="-std=gnu++20 -Wall -Wno-dangling-else -Wextra -Wold-style-cast -Wno-unused-private-field"
 AC_SUBST([AM_CXXFLAGS])
 
 # If default 'ar' is not available, try to find one with a host prefix (see ticket #145)
diff --git a/src/Makefile.am b/src/Makefile.am
index 86871fce..36c5ff56 100644
--- a/src/Makefile.am
+++ b/src/Makefile.am
@@ -68,7 +68,7 @@ EXTRA_DIST = \
 	$(BUILT_SOURCES)
 
 # The -I. is for <FlexLexer.h>
-dynare_preprocessor_CPPFLAGS = $(BOOST_CPPFLAGS) -I. -Wno-unused-private-field
+dynare_preprocessor_CPPFLAGS = $(BOOST_CPPFLAGS) -I.
 dynare_preprocessor_LDFLAGS = $(AM_LDFLAGS) $(BOOST_LDFLAGS)
 # -lpthread is no longer necessary for glibc ⩾ 2.34 (i.e. Debian “bookworm” 12)
 dynare_preprocessor_LDADD = macro/libmacro.a -lpthread
-- 
2.35.1


From f0ffdaffd89ba23813348fa6d421e104ba4a36fc Mon Sep 17 00:00:00 2001
From: MichelJuillard <michel.juillard@mjui.fr>
Date: Sun, 13 Nov 2022 10:38:05 +0100
Subject: [PATCH 05/16] fix for clang error "local binding used in enclosing
 function"

---
 src/ModelTree.cc | 12 ++++++++----
 1 file changed, 8 insertions(+), 4 deletions(-)

diff --git a/src/ModelTree.cc b/src/ModelTree.cc
index 26920833..4782a5dd 100644
--- a/src/ModelTree.cc
+++ b/src/ModelTree.cc
@@ -354,6 +354,7 @@ ModelTree::evaluateAndReduceJacobian(const eval_context_t &eval_context) const
   jacob_map_t contemporaneous_jacobian;
   for (const auto &[indices, d1] : derivatives[1])
     {
+      auto &d11 = d1;
       int deriv_id = indices[1];
       if (getTypeByDerivID(deriv_id) == SymbolType::endogenous)
         {
@@ -364,7 +365,7 @@ ModelTree::evaluateAndReduceJacobian(const eval_context_t &eval_context) const
           {
             try
               {
-                return d1->eval(eval_context);
+                return d11->eval(eval_context);
               }
             catch (ExprNode::EvalExternalFunctionException &e)
               {
@@ -1929,10 +1930,11 @@ ModelTree::initializeMEXCompilationWorkers(int numworkers)
       unique_lock<mutex> lk {mex_compilation_mut};
       filesystem::path output;
       string cmd;
-
+  */
       /* Look for an object to compile, whose prerequisites are already
          compiled. If found, remove it from the queue, save the output path and
          the compilation command, and return true. Must be run under the lock. */
+  /*
       auto pick_job = [&cmd, &output]
       {
         for (auto it {mex_compilation_queue.begin()}; it != mex_compilation_queue.end(); ++it)
@@ -1959,11 +1961,13 @@ ModelTree::initializeMEXCompilationWorkers(int numworkers)
               }
             lk.lock();
             mex_compilation_done.insert(output);
-            /* The object just compiled may be a prerequisite for several
+  */    
+        /* The object just compiled may be a prerequisite for several
                other objects, so notify all waiting workers. Also needed to
                notify the main thread when in
                ModelTree::waitForMEXCompilationWorkers().*/
-            mex_compilation_cv.notify_all();
+  /*
+  mex_compilation_cv.notify_all();
           }
     });
 */
-- 
2.35.1


From fec8837243fad12f5abf29a99187c1e3893c8724 Mon Sep 17 00:00:00 2001
From: MichelJuillard <michel.juillard@mjui.fr>
Date: Sun, 13 Nov 2022 20:07:53 +0100
Subject: [PATCH 06/16] make some fields public to fix

---
 src/DataTree.hh    | 3 +--
 src/SymbolTable.hh | 3 +--
 2 files changed, 2 insertions(+), 4 deletions(-)

diff --git a/src/DataTree.hh b/src/DataTree.hh
index 1319fee2..b6416139 100644
--- a/src/DataTree.hh
+++ b/src/DataTree.hh
@@ -289,10 +289,9 @@ public:
   //! Raised when a trend is declared twice
   class TrendException : public std::exception
   {
-  private: 
-    const string name;
 
   public:
+    const string name;
     TrendException(string name_arg) : name(name_arg) {}
   };
 
diff --git a/src/SymbolTable.hh b/src/SymbolTable.hh
index cce17027..cc3299a5 100644
--- a/src/SymbolTable.hh
+++ b/src/SymbolTable.hh
@@ -194,13 +194,12 @@ public:
   //! Thrown when trying to declare a symbol twice
   class AlreadyDeclaredException : public std::exception
   {
-  private: 
+  public:
     //! Symbol name
     const string name;
     //! Was the previous declaration done with the same symbol type ?
     const bool same_type;
 
-  public:
     AlreadyDeclaredException(string name_arg, bool same_type_arg) : name(name_arg),
 								    same_type(same_type_arg)
     {
-- 
2.35.1


From c85530a04c36532b105bcd811a612667f20f1c62 Mon Sep 17 00:00:00 2001
From: MichelJuillard <michel.juillard@mjui.fr>
Date: Sun, 13 Nov 2022 21:58:38 +0100
Subject: [PATCH 07/16] replace emplace_back

---
 src/SymbolTable.cc | 36 ++++++++++++++++++++++++------------
 1 file changed, 24 insertions(+), 12 deletions(-)

diff --git a/src/SymbolTable.cc b/src/SymbolTable.cc
index 055fedd5..4240e00a 100644
--- a/src/SymbolTable.cc
+++ b/src/SymbolTable.cc
@@ -420,7 +420,8 @@ SymbolTable::addLeadAuxiliaryVarInternal(bool endo, int index, expr_t expr_arg)
       exit(EXIT_FAILURE);
     }
 
-  aux_vars.emplace_back(symb_id, (endo ? AuxVarType::endoLead : AuxVarType::exoLead), 0, 0, 0, 0, expr_arg, "");
+  aux_var_info = AuxVarInfo(symb_id, (endo ? AuxVarType::endoLead : AuxVarType::exoLead), 0, 0, 0, 0, expr_arg, "");
+  aux_vars.push_back(aux_var_info);
 
   return symb_id;
 }
@@ -440,7 +441,8 @@ SymbolTable::addLagAuxiliaryVarInternal(bool endo, int orig_symb_id, int orig_le
       exit(EXIT_FAILURE);
     }
 
-  aux_vars.emplace_back(symb_id, (endo ? AuxVarType::endoLag : AuxVarType::exoLag), orig_symb_id, orig_lead_lag, 0, 0, expr_arg, "");
+  aux_var_info = AuxVarInfo(symb_id, (endo ? AuxVarType::endoLag : AuxVarType::exoLag), orig_symb_id, orig_lead_lag, 0, 0, expr_arg, "");
+  aux_vars.push_back(aux_var_info);
 
   return symb_id;
 }
@@ -485,7 +487,8 @@ SymbolTable::addExpectationAuxiliaryVar(int information_set, int index, expr_t e
       exit(EXIT_FAILURE);
     }
 
-  aux_vars.emplace_back(symb_id, AuxVarType::expectation, 0, 0, 0, information_set, expr_arg, "");
+  aux_var_info = AuxVarInfo(symb_id, AuxVarType::expectation, 0, 0, 0, information_set, expr_arg, "");
+  aux_vars.emplace_back(aux_var_info);
 
   return symb_id;
 }
@@ -505,7 +508,8 @@ SymbolTable::addLogTransformAuxiliaryVar(int orig_symb_id, int orig_lead_lag, ex
       exit(EXIT_FAILURE);
     }
 
-  aux_vars.emplace_back(symb_id, AuxVarType::logTransform, orig_symb_id, orig_lead_lag, 0, 0, expr_arg, "");
+  aux_var_info = AuxVarInfo(symb_id, AuxVarType::logTransform, orig_symb_id, orig_lead_lag, 0, 0, expr_arg, "");
+  aux_vars.push_back(aux_var_info);
 
   return symb_id;
 }
@@ -525,7 +529,8 @@ SymbolTable::addDiffLagAuxiliaryVar(int index, expr_t expr_arg, int orig_symb_id
       exit(EXIT_FAILURE);
     }
 
-  aux_vars.emplace_back(symb_id, AuxVarType::diffLag, orig_symb_id, orig_lag, 0, 0, expr_arg, "");
+  aux_var_info = AuxVarInfo(symb_id, AuxVarType::diffLag, orig_symb_id, orig_lag, 0, 0, expr_arg, "");
+  aux_vars.psuh_back(aux_var_info);
 
   return symb_id;
 }
@@ -545,7 +550,8 @@ SymbolTable::addDiffLeadAuxiliaryVar(int index, expr_t expr_arg, int orig_symb_i
       exit(EXIT_FAILURE);
     }
 
-  aux_vars.emplace_back(symb_id, AuxVarType::diffLead, orig_symb_id, orig_lead, 0, 0, expr_arg, "");
+  aux_var_info = AuxVarInfo(symb_id, AuxVarType::diffLead, orig_symb_id, orig_lead, 0, 0, expr_arg, "");
+  aux_vars.push_back(aux_var_info);
 
   return symb_id;
 }
@@ -565,7 +571,8 @@ SymbolTable::addDiffAuxiliaryVar(int index, expr_t expr_arg, optional<int> orig_
       exit(EXIT_FAILURE);
     }
 
-  aux_vars.emplace_back(symb_id, AuxVarType::diff, move(orig_symb_id), move(orig_lag), 0, 0, expr_arg, "");
+  aux_var_info = AuxVarInfo(symb_id, AuxVarType::diff, move(orig_symb_id), move(orig_lag), 0, 0, expr_arg, "");
+  aux_vars.push_back(aux_var_info);
 
   return symb_id;
 }
@@ -585,7 +592,8 @@ SymbolTable::addUnaryOpAuxiliaryVar(int index, expr_t expr_arg, string unary_op,
       exit(EXIT_FAILURE);
     }
 
-  aux_vars.emplace_back(symb_id, AuxVarType::unaryOp, move(orig_symb_id), move(orig_lag), 0, 0, expr_arg, unary_op);
+  aux_var_info = AuxVarInfo(symb_id, AuxVarType::unaryOp, move(orig_symb_id), move(orig_lag), 0, 0, expr_arg, unary_op);
+  aux_vars.push_back(aux_var_info);
 
   return symb_id;
 }
@@ -605,7 +613,8 @@ SymbolTable::addMultiplierAuxiliaryVar(int index) noexcept(false)
       exit(EXIT_FAILURE);
     }
 
-  aux_vars.emplace_back(symb_id, AuxVarType::multiplier, 0, 0, index, 0, nullptr, "");
+  aux_var_info = AuxVarInfo(symb_id, AuxVarType::multiplier, 0, 0, index, 0, nullptr, "");
+  aux_vars.push_back(aux_var_info);
   return symb_id;
 }
 
@@ -624,7 +633,8 @@ SymbolTable::addDiffForwardAuxiliaryVar(int orig_symb_id, int orig_lead_lag, exp
       exit(EXIT_FAILURE);
     }
 
-  aux_vars.emplace_back(symb_id, AuxVarType::diffForward, orig_symb_id, orig_lead_lag, 0, 0, expr_arg, "");
+  aux_var_info = AuxVarInfo(symb_id, AuxVarType::diffForward, orig_symb_id, orig_lead_lag, 0, 0, expr_arg, "");
+  aux_vars.push_back(aux_var_info);
   return symb_id;
 }
 
@@ -642,7 +652,8 @@ SymbolTable::addPacExpectationAuxiliaryVar(const string &name, expr_t expr_arg)
       exit(EXIT_FAILURE);
     }
 
-  aux_vars.emplace_back(symb_id, AuxVarType::pacExpectation, 0, 0, 0, 0, expr_arg, "");
+  aux_var_info = AuxVarInfo(symb_id, AuxVarType::pacExpectation, 0, 0, 0, 0, expr_arg, "");
+  aux_vars.push_back(aux_var_info);
   return symb_id;
 }
 
@@ -660,7 +671,8 @@ SymbolTable::addPacTargetNonstationaryAuxiliaryVar(const string &name, expr_t ex
       exit(EXIT_FAILURE);
     }
 
-  aux_vars.emplace_back(symb_id, AuxVarType::pacTargetNonstationary, 0, 0, 0, 0, expr_arg, "");
+  aux_var_info = AuxVarInfo(symb_id, AuxVarType::pacTargetNonstationary, 0, 0, 0, 0, expr_arg, "");
+  aux_vars.push_back(aux_var_info);
   return symb_id;
 }
 
-- 
2.35.1


From e0ea209e48e70ebf07230123a19ba9d1e6350111 Mon Sep 17 00:00:00 2001
From: MichelJuillard <michel.juillard@mjui.fr>
Date: Mon, 14 Nov 2022 16:25:52 +0100
Subject: [PATCH 08/16] test emplace_back

---
 src/SymbolTable.cc | 5 ++---
 1 file changed, 2 insertions(+), 3 deletions(-)

diff --git a/src/SymbolTable.cc b/src/SymbolTable.cc
index 4240e00a..92c334b5 100644
--- a/src/SymbolTable.cc
+++ b/src/SymbolTable.cc
@@ -420,8 +420,7 @@ SymbolTable::addLeadAuxiliaryVarInternal(bool endo, int index, expr_t expr_arg)
       exit(EXIT_FAILURE);
     }
 
-  aux_var_info = AuxVarInfo(symb_id, (endo ? AuxVarType::endoLead : AuxVarType::exoLead), 0, 0, 0, 0, expr_arg, "");
-  aux_vars.push_back(aux_var_info);
+    aux_vars.emplace_back({symb_id, (endo ? AuxVarType::endoLead : AuxVarType::exoLead), 0, 0, 0, 0, expr_arg, ""});
 
   return symb_id;
 }
@@ -530,7 +529,7 @@ SymbolTable::addDiffLagAuxiliaryVar(int index, expr_t expr_arg, int orig_symb_id
     }
 
   aux_var_info = AuxVarInfo(symb_id, AuxVarType::diffLag, orig_symb_id, orig_lag, 0, 0, expr_arg, "");
-  aux_vars.psuh_back(aux_var_info);
+  aux_vars.push_back(aux_var_info);
 
   return symb_id;
 }
-- 
2.35.1


From ff1e2be65ed3364f2a1524dac2339701614313b7 Mon Sep 17 00:00:00 2001
From: MichelJuillard <michel.juillard@mjui.fr>
Date: Mon, 14 Nov 2022 16:50:53 +0100
Subject: [PATCH 09/16] more test

---
 src/SymbolTable.cc | 4 ++--
 1 file changed, 2 insertions(+), 2 deletions(-)

diff --git a/src/SymbolTable.cc b/src/SymbolTable.cc
index 92c334b5..519a291b 100644
--- a/src/SymbolTable.cc
+++ b/src/SymbolTable.cc
@@ -419,8 +419,8 @@ SymbolTable::addLeadAuxiliaryVarInternal(bool endo, int index, expr_t expr_arg)
       cerr << "ERROR: you should rename your variable called " << varname << ", this name is internally used by Dynare" << endl;
       exit(EXIT_FAILURE);
     }
-
-    aux_vars.emplace_back({symb_id, (endo ? AuxVarType::endoLead : AuxVarType::exoLead), 0, 0, 0, 0, expr_arg, ""});
+  AuxVarInfo aux_var_info = {symb_id, (endo ? AuxVarType::endoLead : AuxVarType::exoLead), 0, 0, 0, 0, expr_arg, ""};
+  aux_vars.emplace_back(aux_var_info);
 
   return symb_id;
 }
-- 
2.35.1


From 536fbbb1f28084ad6553badfce8f5252ab388587 Mon Sep 17 00:00:00 2001
From: MichelJuillard <michel.juillard@mjui.fr>
Date: Mon, 14 Nov 2022 17:20:33 +0100
Subject: [PATCH 10/16] yet more test

---
 src/SymbolTable.cc | 42 +++++++++++++++++++++---------------------
 1 file changed, 21 insertions(+), 21 deletions(-)

diff --git a/src/SymbolTable.cc b/src/SymbolTable.cc
index 519a291b..bc2ab9ee 100644
--- a/src/SymbolTable.cc
+++ b/src/SymbolTable.cc
@@ -440,8 +440,8 @@ SymbolTable::addLagAuxiliaryVarInternal(bool endo, int orig_symb_id, int orig_le
       exit(EXIT_FAILURE);
     }
 
-  aux_var_info = AuxVarInfo(symb_id, (endo ? AuxVarType::endoLag : AuxVarType::exoLag), orig_symb_id, orig_lead_lag, 0, 0, expr_arg, "");
-  aux_vars.push_back(aux_var_info);
+  AuxVarInfo aux_var_info = {symb_id, (endo ? AuxVarType::endoLag : AuxVarType::exoLag), orig_symb_id, orig_lead_lag, 0, 0, expr_arg, ""};
+  aux_vars.emplace_back(aux_var_info);
 
   return symb_id;
 }
@@ -486,7 +486,7 @@ SymbolTable::addExpectationAuxiliaryVar(int information_set, int index, expr_t e
       exit(EXIT_FAILURE);
     }
 
-  aux_var_info = AuxVarInfo(symb_id, AuxVarType::expectation, 0, 0, 0, information_set, expr_arg, "");
+  AuxVarInfo aux_var_info = {symb_id, AuxVarType::expectation, 0, 0, 0, information_set, expr_arg, ""};
   aux_vars.emplace_back(aux_var_info);
 
   return symb_id;
@@ -507,8 +507,8 @@ SymbolTable::addLogTransformAuxiliaryVar(int orig_symb_id, int orig_lead_lag, ex
       exit(EXIT_FAILURE);
     }
 
-  aux_var_info = AuxVarInfo(symb_id, AuxVarType::logTransform, orig_symb_id, orig_lead_lag, 0, 0, expr_arg, "");
-  aux_vars.push_back(aux_var_info);
+  AuxVarInfo aux_var_info = {symb_id, AuxVarType::logTransform, orig_symb_id, orig_lead_lag, 0, 0, expr_arg, ""};
+  aux_vars.emplace_back(aux_var_info);
 
   return symb_id;
 }
@@ -528,8 +528,8 @@ SymbolTable::addDiffLagAuxiliaryVar(int index, expr_t expr_arg, int orig_symb_id
       exit(EXIT_FAILURE);
     }
 
-  aux_var_info = AuxVarInfo(symb_id, AuxVarType::diffLag, orig_symb_id, orig_lag, 0, 0, expr_arg, "");
-  aux_vars.push_back(aux_var_info);
+  AuxVarInfo aux_var_info = {symb_id, AuxVarType::diffLag, orig_symb_id, orig_lag, 0, 0, expr_arg, ""};
+  aux_vars.emplace_back(aux_var_info);
 
   return symb_id;
 }
@@ -549,8 +549,8 @@ SymbolTable::addDiffLeadAuxiliaryVar(int index, expr_t expr_arg, int orig_symb_i
       exit(EXIT_FAILURE);
     }
 
-  aux_var_info = AuxVarInfo(symb_id, AuxVarType::diffLead, orig_symb_id, orig_lead, 0, 0, expr_arg, "");
-  aux_vars.push_back(aux_var_info);
+  AuxVarInfo aux_var_info = {symb_id, AuxVarType::diffLead, orig_symb_id, orig_lead, 0, 0, expr_arg, ""};
+  aux_vars.emplace_back(aux_var_info);
 
   return symb_id;
 }
@@ -570,8 +570,8 @@ SymbolTable::addDiffAuxiliaryVar(int index, expr_t expr_arg, optional<int> orig_
       exit(EXIT_FAILURE);
     }
 
-  aux_var_info = AuxVarInfo(symb_id, AuxVarType::diff, move(orig_symb_id), move(orig_lag), 0, 0, expr_arg, "");
-  aux_vars.push_back(aux_var_info);
+  AuxVarInfo aux_var_info = {symb_id, AuxVarType::diff, move(orig_symb_id), move(orig_lag), 0, 0, expr_arg, ""};
+  aux_vars.emplace_back(aux_var_info);
 
   return symb_id;
 }
@@ -591,8 +591,8 @@ SymbolTable::addUnaryOpAuxiliaryVar(int index, expr_t expr_arg, string unary_op,
       exit(EXIT_FAILURE);
     }
 
-  aux_var_info = AuxVarInfo(symb_id, AuxVarType::unaryOp, move(orig_symb_id), move(orig_lag), 0, 0, expr_arg, unary_op);
-  aux_vars.push_back(aux_var_info);
+  AuxVarInfo aux_var_info = {symb_id, AuxVarType::unaryOp, move(orig_symb_id), move(orig_lag), 0, 0, expr_arg, unary_op);
+  aux_vars.emplace_back(aux_var_info);
 
   return symb_id;
 }
@@ -612,8 +612,8 @@ SymbolTable::addMultiplierAuxiliaryVar(int index) noexcept(false)
       exit(EXIT_FAILURE);
     }
 
-  aux_var_info = AuxVarInfo(symb_id, AuxVarType::multiplier, 0, 0, index, 0, nullptr, "");
-  aux_vars.push_back(aux_var_info);
+  AuxVarInfo aux_var_info = {symb_id, AuxVarType::multiplier, 0, 0, index, 0, nullptr, ""};
+  aux_vars.emplace_back(aux_var_info);
   return symb_id;
 }
 
@@ -632,8 +632,8 @@ SymbolTable::addDiffForwardAuxiliaryVar(int orig_symb_id, int orig_lead_lag, exp
       exit(EXIT_FAILURE);
     }
 
-  aux_var_info = AuxVarInfo(symb_id, AuxVarType::diffForward, orig_symb_id, orig_lead_lag, 0, 0, expr_arg, "");
-  aux_vars.push_back(aux_var_info);
+  AuxVarInfo aux_var_info = {symb_id, AuxVarType::diffForward, orig_symb_id, orig_lead_lag, 0, 0, expr_arg, ""};
+  aux_vars.emplace_back(aux_var_info);
   return symb_id;
 }
 
@@ -651,8 +651,8 @@ SymbolTable::addPacExpectationAuxiliaryVar(const string &name, expr_t expr_arg)
       exit(EXIT_FAILURE);
     }
 
-  aux_var_info = AuxVarInfo(symb_id, AuxVarType::pacExpectation, 0, 0, 0, 0, expr_arg, "");
-  aux_vars.push_back(aux_var_info);
+  AuxVarInfo aux_var_info = {symb_id, AuxVarType::pacExpectation, 0, 0, 0, 0, expr_arg, ""};
+  aux_vars.emplace_back(aux_var_info);
   return symb_id;
 }
 
@@ -670,8 +670,8 @@ SymbolTable::addPacTargetNonstationaryAuxiliaryVar(const string &name, expr_t ex
       exit(EXIT_FAILURE);
     }
 
-  aux_var_info = AuxVarInfo(symb_id, AuxVarType::pacTargetNonstationary, 0, 0, 0, 0, expr_arg, "");
-  aux_vars.push_back(aux_var_info);
+  AuxVarInfo aux_var_info = {symb_id, AuxVarType::pacTargetNonstationary, 0, 0, 0, 0, expr_arg, ""};
+  aux_vars.emplace_back(aux_var_info);
   return symb_id;
 }
 
-- 
2.35.1


From 97ba2ca4394bab592f40a56f0fdc477e1f759bf4 Mon Sep 17 00:00:00 2001
From: MichelJuillard <michel.juillard@mjui.fr>
Date: Mon, 14 Nov 2022 17:32:07 +0100
Subject: [PATCH 11/16] yet more test

---
 src/SymbolTable.cc | 2 +-
 1 file changed, 1 insertion(+), 1 deletion(-)

diff --git a/src/SymbolTable.cc b/src/SymbolTable.cc
index bc2ab9ee..ffec4f83 100644
--- a/src/SymbolTable.cc
+++ b/src/SymbolTable.cc
@@ -591,7 +591,7 @@ SymbolTable::addUnaryOpAuxiliaryVar(int index, expr_t expr_arg, string unary_op,
       exit(EXIT_FAILURE);
     }
 
-  AuxVarInfo aux_var_info = {symb_id, AuxVarType::unaryOp, move(orig_symb_id), move(orig_lag), 0, 0, expr_arg, unary_op);
+  AuxVarInfo aux_var_info = {symb_id, AuxVarType::unaryOp, move(orig_symb_id), move(orig_lag), 0, 0, expr_arg, unary_op};
   aux_vars.emplace_back(aux_var_info);
 
   return symb_id;
-- 
2.35.1


From 0ecfbfa008383af693a47e819ea4bf41ce2fd4c1 Mon Sep 17 00:00:00 2001
From: MichelJuillard <michel.juillard@mjui.fr>
Date: Mon, 14 Nov 2022 18:34:14 +0100
Subject: [PATCH 12/16] add class for exceptions

---
 src/DataTree.hh | 8 +++++++-
 1 file changed, 7 insertions(+), 1 deletion(-)

diff --git a/src/DataTree.hh b/src/DataTree.hh
index b6416139..c0ad2ec9 100644
--- a/src/DataTree.hh
+++ b/src/DataTree.hh
@@ -142,13 +142,17 @@ public:
   expr_t MinusOne, MinusInfinity;
 
   //! Raised when a local parameter is declared twice
-  struct LocalVariableException
+  class LocalVariableException
   {
+  public:
     string name;
+    LocalVariableException(str name_arg) : name(name_arg) {}
   };
 
   class DivisionByZeroException
   {
+  public:
+    DivisionByZeroException() {}
   };
 
   inline expr_t AddPossiblyNegativeConstant(double val);
@@ -284,6 +288,8 @@ public:
   //! Thrown when trying to access an unknown variable by deriv_id
   class UnknownDerivIDException
   {
+  public:
+    UnknownDerivIDException() {}
   };
 
   //! Raised when a trend is declared twice
-- 
2.35.1


From 47786e9535c61394ad604822d04dbf6c854e6d8b Mon Sep 17 00:00:00 2001
From: MichelJuillard <michel.juillard@mjui.fr>
Date: Mon, 14 Nov 2022 18:38:17 +0100
Subject: [PATCH 13/16] fix previous commit

---
 src/DataTree.hh | 2 +-
 1 file changed, 1 insertion(+), 1 deletion(-)

diff --git a/src/DataTree.hh b/src/DataTree.hh
index c0ad2ec9..5800dba6 100644
--- a/src/DataTree.hh
+++ b/src/DataTree.hh
@@ -146,7 +146,7 @@ public:
   {
   public:
     string name;
-    LocalVariableException(str name_arg) : name(name_arg) {}
+    LocalVariableException(string name_arg) : name(name_arg) {}
   };
 
   class DivisionByZeroException
-- 
2.35.1


From 152df33064445c48f0b487c5fe81583ba6f41923 Mon Sep 17 00:00:00 2001
From: MichelJuillard <michel.juillard@mjui.fr>
Date: Mon, 14 Nov 2022 18:52:58 +0100
Subject: [PATCH 14/16] more fix for local bindings error

---
 src/Statement.cc | 5 +++--
 1 file changed, 3 insertions(+), 2 deletions(-)

diff --git a/src/Statement.cc b/src/Statement.cc
index 10e94dcb..5bdf521d 100644
--- a/src/Statement.cc
+++ b/src/Statement.cc
@@ -185,13 +185,14 @@ void
 OptionsList::writeOutputCommon(ostream &output, const string &option_group) const
 {
   for (const auto &[name, val] : options)
+    auto name1 = name;
     std::visit([&]<class T>(const T &v)
     {
       if constexpr(is_same_v<T, SymbolListVal>)
-        v.writeOutput(option_group + "." + name, output);
+        v.writeOutput(option_group + "." + name1, output);
       else
         {
-          output << option_group << "." << name << " = ";
+          output << option_group << "." << name1 << " = ";
           if constexpr(is_same_v<T, NumVal> || is_same_v<T, DateVal>)
             output << v;
           else if constexpr(is_same_v<T, pair<string, string>>)
-- 
2.35.1


From 5dc87e17cc86521dcfce25065aed114f0416baa9 Mon Sep 17 00:00:00 2001
From: MichelJuillard <michel.juillard@mjui.fr>
Date: Mon, 14 Nov 2022 18:55:33 +0100
Subject: [PATCH 15/16] add class for exceptions

---
 src/ExprNode.hh | 4 +++-
 1 file changed, 3 insertions(+), 1 deletion(-)

diff --git a/src/ExprNode.hh b/src/ExprNode.hh
index f7cbc96c..9868f795 100644
--- a/src/ExprNode.hh
+++ b/src/ExprNode.hh
@@ -791,9 +791,11 @@ public:
   virtual pair<int, expr_t> matchEndogenousTimesConstant() const;
 
   //! Exception thrown when matching fails
-  struct MatchFailureException
+  class MatchFailureException
   {
+  public:
     const string message;
+    MatchFailureException(string message_arg) : message(message_arg) {}
   };
 
   /* Match an expression of the form ∏ x(l)ᵏ, where x are endogenous, as used
-- 
2.35.1


From bd22806d73a056c5acc642f106481d0fc0824ddb Mon Sep 17 00:00:00 2001
From: MichelJuillard <michel.juillard@mjui.fr>
Date: Mon, 14 Nov 2022 19:07:56 +0100
Subject: [PATCH 16/16] fix previous commit

---
 src/Statement.cc | 146 ++++++++++++++++++++++++-----------------------
 1 file changed, 74 insertions(+), 72 deletions(-)

diff --git a/src/Statement.cc b/src/Statement.cc
index 5bdf521d..5b73e3b9 100644
--- a/src/Statement.cc
+++ b/src/Statement.cc
@@ -185,82 +185,84 @@ void
 OptionsList::writeOutputCommon(ostream &output, const string &option_group) const
 {
   for (const auto &[name, val] : options)
-    auto name1 = name;
-    std::visit([&]<class T>(const T &v)
     {
-      if constexpr(is_same_v<T, SymbolListVal>)
-        v.writeOutput(option_group + "." + name1, output);
-      else
-        {
-          output << option_group << "." << name1 << " = ";
-          if constexpr(is_same_v<T, NumVal> || is_same_v<T, DateVal>)
-            output << v;
-          else if constexpr(is_same_v<T, pair<string, string>>)
-            output << '[' << v.first << "; " << v.second << ']';
-          else if constexpr(is_same_v<T, StringVal>)
-            output << "'" << v << "'";
-          else if constexpr(is_same_v<T, vector<int>>)
-            {
-              if (v.size() > 1)
+      auto name1 = name;
+      std::visit([&]<class T>(const T &v)
+	{
+	  if constexpr(is_same_v<T, SymbolListVal>)
+			v.writeOutput(option_group + "." + name1, output);
+	  else
+	    {
+	      output << option_group << "." << name1 << " = ";
+	      if constexpr(is_same_v<T, NumVal> || is_same_v<T, DateVal>)
+			    output << v;
+	      else if constexpr(is_same_v<T, pair<string, string>>)
+				 output << '[' << v.first << "; " << v.second << ']';
+	      else if constexpr(is_same_v<T, StringVal>)
+				 output << "'" << v << "'";
+	      else if constexpr(is_same_v<T, vector<int>>)
+                {
+		  if (v.size() > 1)
+		    {
+		      output << '[';
+		      for (int it : v)
+			output << it << ";";
+		      output << ']';
+		    }
+		  else
+		    output << v.front();
+		}
+	      else if constexpr(is_same_v<T, VecStrVal>)
                 {
-                  output << '[';
-                  for (int it : v)
-                    output << it << ";";
-                  output << ']';
-                }
-              else
-                output << v.front();
-            }
-          else if constexpr(is_same_v<T, VecStrVal>)
-            {
-              if (v.size() > 1)
+		  if (v.size() > 1)
+		    {
+		      output << '{';
+		      for (const auto &it : v)
+			output << "'" << it << "';";
+		      output << '}';
+		    }
+		  else
+		    output << v.front();
+		}
+	      else if constexpr(is_same_v<T, VecCellStrVal>)
                 {
-                  output << '{';
-                  for (const auto &it : v)
-                    output << "'" << it << "';";
-                  output << '}';
-                }
-              else
-                output << v.front();
-            }
-          else if constexpr(is_same_v<T, VecCellStrVal>)
-            {
-              /* VecCellStrVal should ideally be merged into VecStrVal.
-                 only difference is treatment of v.size==1, where VecStrVal
-                 does not add quotes and curly brackets, i.e. allows for type conversion of
-                 '2' into the number 2 */
-              output << '{';
-              for (const auto &it : v)
-                output << "'" << it << "';";
-              output << '}';
-            }
-          else if constexpr(is_same_v<T, VecValueVal>)
-            {
-              /* For historical reason, those vectors are output as row vectors (contrary
-                 to vectors of integers which are output as column vectors) */
-              output << '[';
-              for (const auto &it : v)
-                output << it << ',';
-              output << ']';
-            }
-          else if constexpr(is_same_v<T, vector<vector<string>>>)
-            {
-              // Same remark as for VecValueVal
-              output << '{';
-              for (const auto &v2 : v)
+		  /* VecCellStrVal should ideally be merged into VecStrVal.
+		     only difference is treatment of v.size==1, where VecStrVal
+		     does not add quotes and curly brackets, i.e. allows for type conversion of
+		     '2' into the number 2 */
+		  output << '{';
+		  for (const auto &it : v)
+		    output << "'" << it << "';";
+		  output << '}';
+		}
+	      else if constexpr(is_same_v<T, VecValueVal>)
                 {
-                  output << '[';
-                  for (const auto &it : v2)
-                    output << it << ',';
-                  output << "], ";
-                }
-              output << '}';
-            }
-          else
-            static_assert(always_false_v<T>, "Non-exhaustive visitor!");
-          output << ";" << endl;
-        }
-    }, val);
+		  /* For historical reason, those vectors are output as row vectors (contrary
+		     to vectors of integers which are output as column vectors) */
+		  output << '[';
+		  for (const auto &it : v)
+		    output << it << ',';
+		  output << ']';
+		}
+	      else if constexpr(is_same_v<T, vector<vector<string>>>)
+                {
+		  // Same remark as for VecValueVal
+		  output << '{';
+		  for (const auto &v2 : v)
+		    {
+		      output << '[';
+		      for (const auto &it : v2)
+			output << it << ',';
+		      output << "], ";
+		    }
+		  output << '}';
+		}
+	      else
+		static_assert(always_false_v<T>, "Non-exhaustive visitor!");
+	      output << ";" << endl;
+	    }
+	}, val);
+    }
 }
 
 void
-- 
2.35.1

