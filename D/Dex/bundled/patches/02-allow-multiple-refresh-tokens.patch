diff --git a/cmd/dex/config.go b/cmd/dex/config.go
index aa49a181..f4e2f6fd 100644
--- a/cmd/dex/config.go
+++ b/cmd/dex/config.go
@@ -51,6 +51,8 @@ type Config struct {
 	// querying the storage. Cannot be specified without enabling a passwords
 	// database.
 	StaticPasswords []password `json:"staticPasswords"`
+
+	EnableMultiRefreshTokens bool `json:"enableMultiRefreshTokens"`
 }
 
 // Validate the configuration
diff --git a/cmd/dex/serve.go b/cmd/dex/serve.go
index 8a69c7ee..f0fcce8d 100644
--- a/cmd/dex/serve.go
+++ b/cmd/dex/serve.go
@@ -287,21 +287,22 @@ func runServe(options serveOptions) error {
 	healthChecker := gosundheit.New()
 
 	serverConfig := server.Config{
-		AllowedGrantTypes:      c.OAuth2.GrantTypes,
-		SupportedResponseTypes: c.OAuth2.ResponseTypes,
-		SkipApprovalScreen:     c.OAuth2.SkipApprovalScreen,
-		AlwaysShowLoginScreen:  c.OAuth2.AlwaysShowLoginScreen,
-		PasswordConnector:      c.OAuth2.PasswordConnector,
-		Headers:                c.Web.Headers.ToHTTPHeader(),
-		AllowedOrigins:         c.Web.AllowedOrigins,
-		AllowedHeaders:         c.Web.AllowedHeaders,
-		Issuer:                 c.Issuer,
-		Storage:                s,
-		Web:                    c.Frontend,
-		Logger:                 logger,
-		Now:                    now,
-		PrometheusRegistry:     prometheusRegistry,
-		HealthChecker:          healthChecker,
+		AllowedGrantTypes:        c.OAuth2.GrantTypes,
+		SupportedResponseTypes:   c.OAuth2.ResponseTypes,
+		SkipApprovalScreen:       c.OAuth2.SkipApprovalScreen,
+		AlwaysShowLoginScreen:    c.OAuth2.AlwaysShowLoginScreen,
+		PasswordConnector:        c.OAuth2.PasswordConnector,
+		Headers:                  c.Web.Headers.ToHTTPHeader(),
+		AllowedOrigins:           c.Web.AllowedOrigins,
+		AllowedHeaders:           c.Web.AllowedHeaders,
+		Issuer:                   c.Issuer,
+		Storage:                  s,
+		Web:                      c.Frontend,
+		Logger:                   logger,
+		Now:                      now,
+		PrometheusRegistry:       prometheusRegistry,
+		HealthChecker:            healthChecker,
+		EnableMultiRefreshTokens: c.EnableMultiRefreshTokens,
 	}
 	if c.Expiry.SigningKeys != "" {
 		signingKeys, err := time.ParseDuration(c.Expiry.SigningKeys)
@@ -508,7 +509,7 @@ func runServe(options serveOptions) error {
 		}
 
 		grpcSrv := grpc.NewServer(grpcOptions...)
-		api.RegisterDexServer(grpcSrv, server.NewAPI(serverConfig.Storage, logger, version, serv))
+		api.RegisterDexServer(grpcSrv, server.NewAPI(serverConfig.Storage, logger, c.EnableMultiRefreshTokens, version, serv))
 
 		grpcMetrics.InitializeMetrics(grpcSrv)
 		if c.GRPC.Reflection {
diff --git a/server/api.go b/server/api.go
index 5b0abb0b..3c516e9b 100644
--- a/server/api.go
+++ b/server/api.go
@@ -32,22 +32,24 @@ const (
 )
 
 // NewAPI returns a server which implements the gRPC API interface.
-func NewAPI(s storage.Storage, logger *slog.Logger, version string, server *Server) api.DexServer {
+func NewAPI(s storage.Storage, logger *slog.Logger, enableMultiRefreshTokens bool, version string, server *Server) api.DexServer {
 	return dexAPI{
-		s:       s,
-		logger:  logger.With("component", "api"),
-		version: version,
-		server:  server,
+		s:                        s,
+		logger:                   logger.With("component", "api"),
+		enableMultiRefreshTokens: enableMultiRefreshTokens,
+		version:                  version,
+		server:                   server,
 	}
 }
 
 type dexAPI struct {
 	api.UnimplementedDexServer
 
-	s       storage.Storage
-	logger  *slog.Logger
-	version string
-	server  *Server
+	s                        storage.Storage
+	logger                   *slog.Logger
+	enableMultiRefreshTokens bool
+	version                  string
+	server                   *Server
 }
 
 func (d dexAPI) GetClient(ctx context.Context, req *api.GetClientReq) (*api.GetClientResp, error) {
@@ -321,6 +323,13 @@ func (d dexAPI) VerifyPassword(ctx context.Context, req *api.VerifyPasswordReq)
 }
 
 func (d dexAPI) ListRefresh(ctx context.Context, req *api.ListRefreshReq) (*api.ListRefreshResp, error) {
+	if d.enableMultiRefreshTokens {
+		return d.listRefreshMultiRefreshMode(ctx, req)
+	}
+	return d.listRefresh(ctx, req)
+}
+
+func (d dexAPI) listRefresh(ctx context.Context, req *api.ListRefreshReq) (*api.ListRefreshResp, error) {
 	id := new(internal.IDTokenSubject)
 	if err := internal.Unmarshal(req.UserId, id); err != nil {
 		d.logger.Error("failed to unmarshal ID Token subject", "err", err)
@@ -354,7 +363,45 @@ func (d dexAPI) ListRefresh(ctx context.Context, req *api.ListRefreshReq) (*api.
 	}, nil
 }
 
+func (d dexAPI) listRefreshMultiRefreshMode(ctx context.Context, req *api.ListRefreshReq) (*api.ListRefreshResp, error) {
+	id := new(internal.IDTokenSubject)
+	if err := internal.Unmarshal(req.UserId, id); err != nil {
+		d.logger.Error(fmt.Sprintf("api: failed to unmarshal ID Token subject: %v", err))
+		return nil, err
+	}
+
+	var refreshTokenRefs []*api.RefreshTokenRef
+
+	// FIXME: listing all tokens can be slow
+	refreshTokens, err := d.s.ListRefreshTokens(ctx)
+	if err != nil {
+		return nil, err
+	}
+	for _, t := range refreshTokens {
+		if t.Claims.UserID == id.UserId && t.ConnectorID == id.ConnId {
+			r := api.RefreshTokenRef{
+				Id:        t.ID,
+				ClientId:  t.ClientID,
+				CreatedAt: t.CreatedAt.Unix(),
+				LastUsed:  t.LastUsed.Unix(),
+			}
+			refreshTokenRefs = append(refreshTokenRefs, &r)
+		}
+	}
+
+	return &api.ListRefreshResp{
+		RefreshTokens: refreshTokenRefs,
+	}, nil
+}
+
 func (d dexAPI) RevokeRefresh(ctx context.Context, req *api.RevokeRefreshReq) (*api.RevokeRefreshResp, error) {
+	if d.enableMultiRefreshTokens {
+		return d.revokeRefreshMultiRefreshMode(ctx, req)
+	}
+	return d.revokeRefresh(ctx, req)
+}
+
+func (d dexAPI) revokeRefresh(ctx context.Context, req *api.RevokeRefreshReq) (*api.RevokeRefreshResp, error) {
 	id := new(internal.IDTokenSubject)
 	if err := internal.Unmarshal(req.UserId, id); err != nil {
 		d.logger.Error("failed to unmarshal ID Token subject", "err", err)
@@ -405,6 +452,45 @@ func (d dexAPI) RevokeRefresh(ctx context.Context, req *api.RevokeRefreshReq) (*
 	return &api.RevokeRefreshResp{}, nil
 }
 
+func (d dexAPI) revokeRefreshMultiRefreshMode(ctx context.Context, req *api.RevokeRefreshReq) (*api.RevokeRefreshResp, error) {
+	id := new(internal.IDTokenSubject)
+	if err := internal.Unmarshal(req.UserId, id); err != nil {
+		d.logger.Error(fmt.Sprintf("api: failed to unmarshal ID Token subject: %v", err))
+		return nil, err
+	}
+
+	// FIXME: listing all tokens can be slow
+	refreshTokens, err := d.s.ListRefreshTokens(ctx)
+	if err != nil {
+		return nil, err
+	}
+	if len(refreshTokens) == 0 {
+		return &api.RevokeRefreshResp{NotFound: true}, nil
+	}
+
+	for _, t := range refreshTokens {
+		if t.Claims.UserID == id.UserId && t.ConnectorID == id.ConnId && t.ClientID == req.ClientId {
+			if err := d.s.DeleteRefresh(ctx, t.ID); err != nil {
+				d.logger.Error(fmt.Sprintf("failed to delete refresh token: %v", err))
+				return nil, err
+			}
+		}
+	}
+
+	updater := func(old storage.OfflineSessions) (storage.OfflineSessions, error) {
+		// Remove entry from Refresh list of the OfflineSession object.
+		delete(old.Refresh, req.ClientId)
+		return old, nil
+	}
+
+	if err := d.s.UpdateOfflineSessions(ctx, id.UserId, id.ConnId, updater); err != nil {
+		d.logger.Error(fmt.Sprintf("api: failed to update offline session object: %v", err))
+		return nil, err
+	}
+
+	return &api.RevokeRefreshResp{}, nil
+}
+
 func (d dexAPI) CreateConnector(ctx context.Context, req *api.CreateConnectorReq) (*api.CreateConnectorResp, error) {
 	if !featureflags.APIConnectorsCRUD.Enabled() {
 		return nil, fmt.Errorf("%s feature flag is not enabled", featureflags.APIConnectorsCRUD.Name)
diff --git a/server/api_test.go b/server/api_test.go
index 10242155..e071984c 100644
--- a/server/api_test.go
+++ b/server/api_test.go
@@ -37,7 +37,7 @@ func newAPI(s storage.Storage, logger *slog.Logger, t *testing.T) *apiClient {
 	}
 
 	serv := grpc.NewServer()
-	api.RegisterDexServer(serv, NewAPI(s, logger, "test", nil))
+	api.RegisterDexServer(serv, NewAPI(s, logger, false, "test", nil))
 	go serv.Serve(l)
 
 	// NewClient will retry automatically if the serv.Serve() goroutine
diff --git a/server/handlers.go b/server/handlers.go
index c87038cc..ea5b3fc0 100644
--- a/server/handlers.go
+++ b/server/handlers.go
@@ -1062,13 +1062,15 @@ func (s *Server) exchangeAuthCode(ctx context.Context, w http.ResponseWriter, au
 				return nil, err
 			}
 		} else {
-			if oldTokenRef, ok := session.Refresh[tokenRef.ClientID]; ok {
-				// Delete old refresh token from storage.
-				if err := s.storage.DeleteRefresh(ctx, oldTokenRef.ID); err != nil && err != storage.ErrNotFound {
-					s.logger.ErrorContext(ctx, "failed to delete refresh token", "err", err)
-					s.tokenErrHelper(w, errServerError, "", http.StatusInternalServerError)
-					deleteToken = true
-					return nil, err
+			if !s.enableMultiRefreshTokens {
+				if oldTokenRef, ok := session.Refresh[tokenRef.ClientID]; ok {
+					// Delete old refresh token from storage.
+					if err := s.storage.DeleteRefresh(ctx, oldTokenRef.ID); err != nil && err != storage.ErrNotFound {
+						s.logger.ErrorContext(ctx, "failed to delete refresh token", "err", err)
+						s.tokenErrHelper(w, errServerError, "", http.StatusInternalServerError)
+						deleteToken = true
+						return nil, err
+					}
 				}
 			}
 
@@ -1315,16 +1317,18 @@ func (s *Server) handlePasswordGrant(w http.ResponseWriter, r *http.Request, cli
 				return
 			}
 		} else {
-			if oldTokenRef, ok := session.Refresh[tokenRef.ClientID]; ok {
-				// Delete old refresh token from storage.
-				if err := s.storage.DeleteRefresh(ctx, oldTokenRef.ID); err != nil {
-					if err == storage.ErrNotFound {
-						s.logger.Warn("database inconsistent, refresh token missing", "token_id", oldTokenRef.ID)
-					} else {
-						s.logger.ErrorContext(r.Context(), "failed to delete refresh token", "err", err)
-						s.tokenErrHelper(w, errServerError, "", http.StatusInternalServerError)
-						deleteToken = true
-						return
+			if !s.enableMultiRefreshTokens {
+				if oldTokenRef, ok := session.Refresh[tokenRef.ClientID]; ok {
+					// Delete old refresh token from storage.
+					if err := s.storage.DeleteRefresh(ctx, oldTokenRef.ID); err != nil {
+						if err == storage.ErrNotFound {
+							s.logger.Warn("database inconsistent, refresh token missing", "token_id", oldTokenRef.ID)
+						} else {
+							s.logger.ErrorContext(r.Context(), "failed to delete refresh token", "err", err)
+							s.tokenErrHelper(w, errServerError, "", http.StatusInternalServerError)
+							deleteToken = true
+							return
+						}
 					}
 				}
 			}
diff --git a/server/refreshhandlers.go b/server/refreshhandlers.go
index de8d9b7b..6d41cea1 100644
--- a/server/refreshhandlers.go
+++ b/server/refreshhandlers.go
@@ -208,7 +208,11 @@ func (s *Server) refreshWithConnector(ctx context.Context, rCtx *refreshContext,
 func (s *Server) updateOfflineSession(ctx context.Context, refresh *storage.RefreshToken, ident connector.Identity, lastUsed time.Time) *refreshError {
 	offlineSessionUpdater := func(old storage.OfflineSessions) (storage.OfflineSessions, error) {
 		if old.Refresh[refresh.ClientID].ID != refresh.ID {
-			return old, errors.New("refresh token invalid")
+			if s.enableMultiRefreshTokens {
+				return old, nil
+			} else {
+				return old, errors.New("refresh token invalid")
+			}
 		}
 
 		old.Refresh[refresh.ClientID].LastUsed = lastUsed
diff --git a/server/server.go b/server/server.go
index 8c046296..9f84c788 100644
--- a/server/server.go
+++ b/server/server.go
@@ -119,6 +119,8 @@ type Config struct {
 	PrometheusRegistry *prometheus.Registry
 
 	HealthChecker gosundheit.Health
+
+	EnableMultiRefreshTokens bool
 }
 
 // WebConfig holds the server's frontend templates and asset configuration.
@@ -196,6 +198,8 @@ type Server struct {
 	refreshTokenPolicy *RefreshTokenPolicy
 
 	logger *slog.Logger
+
+	enableMultiRefreshTokens bool
 }
 
 // NewServer constructs a server from the provided config.
@@ -297,21 +301,22 @@ func newServer(ctx context.Context, c Config, rotationStrategy rotationStrategy)
 	}
 
 	s := &Server{
-		issuerURL:              *issuerURL,
-		connectors:             make(map[string]Connector),
-		storage:                newKeyCacher(c.Storage, now),
-		supportedResponseTypes: supportedRes,
-		supportedGrantTypes:    supportedGrants,
-		idTokensValidFor:       value(c.IDTokensValidFor, 24*time.Hour),
-		authRequestsValidFor:   value(c.AuthRequestsValidFor, 24*time.Hour),
-		deviceRequestsValidFor: value(c.DeviceRequestsValidFor, 5*time.Minute),
-		refreshTokenPolicy:     c.RefreshTokenPolicy,
-		skipApproval:           c.SkipApprovalScreen,
-		alwaysShowLogin:        c.AlwaysShowLoginScreen,
-		now:                    now,
-		templates:              tmpls,
-		passwordConnector:      c.PasswordConnector,
-		logger:                 c.Logger,
+		issuerURL:                *issuerURL,
+		connectors:               make(map[string]Connector),
+		storage:                  newKeyCacher(c.Storage, now),
+		supportedResponseTypes:   supportedRes,
+		supportedGrantTypes:      supportedGrants,
+		idTokensValidFor:         value(c.IDTokensValidFor, 24*time.Hour),
+		authRequestsValidFor:     value(c.AuthRequestsValidFor, 24*time.Hour),
+		deviceRequestsValidFor:   value(c.DeviceRequestsValidFor, 5*time.Minute),
+		refreshTokenPolicy:       c.RefreshTokenPolicy,
+		skipApproval:             c.SkipApprovalScreen,
+		alwaysShowLogin:          c.AlwaysShowLoginScreen,
+		now:                      now,
+		templates:                tmpls,
+		passwordConnector:        c.PasswordConnector,
+		logger:                   c.Logger,
+		enableMultiRefreshTokens: c.EnableMultiRefreshTokens,
 	}
 
 	// Retrieves connector objects in backend storage. This list includes the static connectors
@@ -501,7 +506,7 @@ func newServer(ctx context.Context, c Config, rotationStrategy rotationStrategy)
 	s.mux = r
 
 	s.startKeyRotation(ctx, rotationStrategy, now)
-	s.startGarbageCollection(ctx, value(c.GCFrequency, 5*time.Minute), now)
+	s.startGarbageCollection(ctx, value(c.GCFrequency, 5*time.Minute), value(c.RefreshTokenPolicy.absoluteLifetime, 720*time.Hour), now)
 
 	return s, nil
 }
@@ -619,19 +624,19 @@ func (k *keyCacher) GetKeys(ctx context.Context) (storage.Keys, error) {
 	return storageKeys, nil
 }
 
-func (s *Server) startGarbageCollection(ctx context.Context, frequency time.Duration, now func() time.Time) {
+func (s *Server) startGarbageCollection(ctx context.Context, frequency time.Duration, unusedRefreshTokensValidFor time.Duration, now func() time.Time) {
 	go func() {
 		for {
 			select {
 			case <-ctx.Done():
 				return
 			case <-time.After(frequency):
-				if r, err := s.storage.GarbageCollect(ctx, now()); err != nil {
+				if r, err := s.storage.GarbageCollect(ctx, now(), unusedRefreshTokensValidFor); err != nil {
 					s.logger.ErrorContext(ctx, "garbage collection failed", "err", err)
 				} else if !r.IsEmpty() {
 					s.logger.InfoContext(ctx, "garbage collection run, delete auth",
 						"requests", r.AuthRequests, "auth_codes", r.AuthCodes,
-						"device_requests", r.DeviceRequests, "device_tokens", r.DeviceTokens)
+						"device_requests", r.DeviceRequests, "device_tokens", r.DeviceTokens, "refresh_tokens", r.RefreshTokens)
 				}
 			}
 		}
diff --git a/storage/conformance/conformance.go b/storage/conformance/conformance.go
index 58ae3d95..1806f08c 100644
--- a/storage/conformance/conformance.go
+++ b/storage/conformance/conformance.go
@@ -787,8 +787,10 @@ func testGC(t *testing.T, s storage.Storage) {
 		t.Fatalf("failed creating auth code: %v", err)
 	}
 
+	refreshTokensValidFor, err := time.ParseDuration("720h")
+
 	for _, tz := range []*time.Location{time.UTC, est, pst} {
-		result, err := s.GarbageCollect(ctx, expiry.Add(-time.Hour).In(tz))
+		result, err := s.GarbageCollect(ctx, expiry.Add(-time.Hour).In(tz), refreshTokensValidFor)
 		if err != nil {
 			t.Errorf("garbage collection failed: %v", err)
 		} else if result.AuthCodes != 0 || result.AuthRequests != 0 {
@@ -799,7 +801,7 @@ func testGC(t *testing.T, s storage.Storage) {
 		}
 	}
 
-	if r, err := s.GarbageCollect(ctx, expiry.Add(time.Hour)); err != nil {
+	if r, err := s.GarbageCollect(ctx, expiry.Add(time.Hour), refreshTokensValidFor); err != nil {
 		t.Errorf("garbage collection failed: %v", err)
 	} else if r.AuthCodes != 1 {
 		t.Errorf("expected to garbage collect 1 objects, got %d", r.AuthCodes)
@@ -839,7 +841,7 @@ func testGC(t *testing.T, s storage.Storage) {
 	}
 
 	for _, tz := range []*time.Location{time.UTC, est, pst} {
-		result, err := s.GarbageCollect(ctx, expiry.Add(-time.Hour).In(tz))
+		result, err := s.GarbageCollect(ctx, expiry.Add(-time.Hour).In(tz), refreshTokensValidFor)
 		if err != nil {
 			t.Errorf("garbage collection failed: %v", err)
 		} else if result.AuthCodes != 0 || result.AuthRequests != 0 {
@@ -850,7 +852,7 @@ func testGC(t *testing.T, s storage.Storage) {
 		}
 	}
 
-	if r, err := s.GarbageCollect(ctx, expiry.Add(time.Hour)); err != nil {
+	if r, err := s.GarbageCollect(ctx, expiry.Add(time.Hour), refreshTokensValidFor); err != nil {
 		t.Errorf("garbage collection failed: %v", err)
 	} else if r.AuthRequests != 1 {
 		t.Errorf("expected to garbage collect 1 objects, got %d", r.AuthRequests)
@@ -876,7 +878,7 @@ func testGC(t *testing.T, s storage.Storage) {
 	}
 
 	for _, tz := range []*time.Location{time.UTC, est, pst} {
-		result, err := s.GarbageCollect(ctx, expiry.Add(-time.Hour).In(tz))
+		result, err := s.GarbageCollect(ctx, expiry.Add(-time.Hour).In(tz), refreshTokensValidFor)
 		if err != nil {
 			t.Errorf("garbage collection failed: %v", err)
 		} else if result.DeviceRequests != 0 {
@@ -886,7 +888,7 @@ func testGC(t *testing.T, s storage.Storage) {
 			t.Errorf("expected to be able to get auth request after GC: %v", err)
 		}
 	}
-	if r, err := s.GarbageCollect(ctx, expiry.Add(time.Hour)); err != nil {
+	if r, err := s.GarbageCollect(ctx, expiry.Add(time.Hour), refreshTokensValidFor); err != nil {
 		t.Errorf("garbage collection failed: %v", err)
 	} else if r.DeviceRequests != 1 {
 		t.Errorf("expected to garbage collect 1 device request, got %d", r.DeviceRequests)
@@ -916,7 +918,7 @@ func testGC(t *testing.T, s storage.Storage) {
 	}
 
 	for _, tz := range []*time.Location{time.UTC, est, pst} {
-		result, err := s.GarbageCollect(ctx, expiry.Add(-time.Hour).In(tz))
+		result, err := s.GarbageCollect(ctx, expiry.Add(-time.Hour).In(tz), refreshTokensValidFor)
 		if err != nil {
 			t.Errorf("garbage collection failed: %v", err)
 		} else if result.DeviceTokens != 0 {
@@ -926,7 +928,7 @@ func testGC(t *testing.T, s storage.Storage) {
 			t.Errorf("expected to be able to get device token after GC: %v", err)
 		}
 	}
-	if r, err := s.GarbageCollect(ctx, expiry.Add(time.Hour)); err != nil {
+	if r, err := s.GarbageCollect(ctx, expiry.Add(time.Hour), refreshTokensValidFor); err != nil {
 		t.Errorf("garbage collection failed: %v", err)
 	} else if r.DeviceTokens != 1 {
 		t.Errorf("expected to garbage collect 1 device token, got %d", r.DeviceTokens)
diff --git a/storage/ent/client/main.go b/storage/ent/client/main.go
index a78830fc..0e913d67 100644
--- a/storage/ent/client/main.go
+++ b/storage/ent/client/main.go
@@ -70,7 +70,7 @@ func (d *Database) BeginTx(ctx context.Context) (*db.Tx, error) {
 }
 
 // GarbageCollect removes expired entities from the database.
-func (d *Database) GarbageCollect(ctx context.Context, now time.Time) (storage.GCResult, error) {
+func (d *Database) GarbageCollect(ctx context.Context, now time.Time, unusedRefreshTokensValidFor time.Duration) (storage.GCResult, error) {
 	result := storage.GCResult{}
 	utcNow := now.UTC()
 
diff --git a/storage/etcd/etcd.go b/storage/etcd/etcd.go
index 8ccf502f..35704604 100644
--- a/storage/etcd/etcd.go
+++ b/storage/etcd/etcd.go
@@ -40,7 +40,7 @@ func (c *conn) Close() error {
 	return c.db.Close()
 }
 
-func (c *conn) GarbageCollect(ctx context.Context, now time.Time) (result storage.GCResult, err error) {
+func (c *conn) GarbageCollect(ctx context.Context, now time.Time, unusedRefreshTokensValidFor time.Duration) (result storage.GCResult, err error) {
 	ctx, cancel := context.WithTimeout(ctx, defaultStorageTimeout)
 	defer cancel()
 	authRequests, err := c.listAuthRequests(ctx)
diff --git a/storage/kubernetes/storage.go b/storage/kubernetes/storage.go
index eae5b7a6..4a2e295d 100644
--- a/storage/kubernetes/storage.go
+++ b/storage/kubernetes/storage.go
@@ -612,7 +612,7 @@ func (cli *client) UpdateConnector(ctx context.Context, id string, updater func(
 	})
 }
 
-func (cli *client) GarbageCollect(ctx context.Context, now time.Time) (result storage.GCResult, err error) {
+func (cli *client) GarbageCollect(ctx context.Context, now time.Time, unusedRefreshTokensValidFor time.Duration) (result storage.GCResult, err error) {
 	var authRequests AuthRequestList
 	if err := cli.listN(resourceAuthRequest, &authRequests, gcResultLimit); err != nil {
 		return result, fmt.Errorf("failed to list auth requests: %v", err)
diff --git a/storage/memory/memory.go b/storage/memory/memory.go
index eff75e71..71568a47 100644
--- a/storage/memory/memory.go
+++ b/storage/memory/memory.go
@@ -3,6 +3,7 @@ package memory
 
 import (
 	"context"
+	"fmt"
 	"log/slog"
 	"strings"
 	"sync"
@@ -71,7 +72,7 @@ func (s *memStorage) tx(f func()) {
 
 func (s *memStorage) Close() error { return nil }
 
-func (s *memStorage) GarbageCollect(ctx context.Context, now time.Time) (result storage.GCResult, err error) {
+func (s *memStorage) GarbageCollect(ctx context.Context, now time.Time, unusedRefreshTokensValidFor time.Duration) (result storage.GCResult, err error) {
 	s.tx(func() {
 		for id, a := range s.authCodes {
 			if now.After(a.Expiry) {
@@ -98,6 +99,24 @@ func (s *memStorage) GarbageCollect(ctx context.Context, now time.Time) (result
 			}
 		}
 	})
+	staleRefreshTokenCutoff := now.Add(-unusedRefreshTokensValidFor)
+	for id, a := range s.refreshTokens {
+		if staleRefreshTokenCutoff.After(a.LastUsed) {
+			// do not delete if this is the primary refresh token linked to offline session
+			o, err := s.GetOfflineSessions(ctx, a.Claims.UserID, a.ConnectorID)
+
+			if err != nil {
+				s.logger.Error(fmt.Sprintf("failed to fetch offline session for user_id %v, connector_id %v: %v", a.Claims.UserID, a.ConnectorID, err))
+			} else {
+				if o.Refresh[a.ClientID].ID == id {
+					s.logger.Debug(fmt.Sprintf("not deleting expired primary refresh token"))
+				} else {
+					delete(s.refreshTokens, id)
+					result.RefreshTokens++
+				}
+			}
+		}
+	}
 	return result, nil
 }
 
diff --git a/storage/sql/crud.go b/storage/sql/crud.go
index a9ca3816..216ca080 100644
--- a/storage/sql/crud.go
+++ b/storage/sql/crud.go
@@ -86,7 +86,7 @@ type scanner interface {
 
 var _ storage.Storage = (*conn)(nil)
 
-func (c *conn) GarbageCollect(ctc context.Context, now time.Time) (storage.GCResult, error) {
+func (c *conn) GarbageCollect(ctc context.Context, now time.Time, unusedRefreshTokensValidFor time.Duration) (storage.GCResult, error) {
 	result := storage.GCResult{}
 
 	r, err := c.Exec(`delete from auth_request where expiry < $1`, now)
@@ -121,6 +121,25 @@ func (c *conn) GarbageCollect(ctc context.Context, now time.Time) (storage.GCRes
 		result.DeviceTokens = n
 	}
 
+	staleRefreshTokenCutoff := now.Add(-unusedRefreshTokensValidFor)
+	staleRefreshTokens, err := c.ListStaleRefreshTokens(staleRefreshTokenCutoff)
+	if err != nil {
+		return result, fmt.Errorf("gc refresh_token: %v", err)
+	}
+	for _, t := range staleRefreshTokens {
+		// do not delete if this is the primary refresh token linked to offline session
+		o, err := c.GetOfflineSessions(ctc, t.Claims.UserID, t.ConnectorID)
+		if err != nil {
+			c.logger.Error(fmt.Sprintf("failed to fetch offline session for user_id %v, connector_id %v: %v", t.Claims.UserID, t.ConnectorID, err))
+		} else {
+			if o.Refresh[t.ClientID].ID == t.ID {
+				c.logger.Debug(fmt.Sprintf("not deleting expired primary refresh token"))
+			} else {
+				c.DeleteRefresh(ctc, t.ID)
+				result.RefreshTokens++
+			}
+		}
+	}
 	return result, err
 }
 
@@ -371,6 +390,35 @@ func getRefresh(ctx context.Context, q querier, id string) (storage.RefreshToken
 	`, id))
 }
 
+func (c *conn) ListStaleRefreshTokens(lastUsedTime time.Time) ([]storage.RefreshToken, error) {
+	rows, err := c.Query(`
+		select
+			id, client_id, scopes, nonce,
+			claims_user_id, claims_username, claims_preferred_username,
+			claims_email, claims_email_verified, claims_groups,
+			connector_id, connector_data,
+			token, obsolete_token, created_at, last_used
+		from refresh_token where last_used < $1;
+	`, lastUsedTime)
+	if err != nil {
+		return nil, fmt.Errorf("query: %v", err)
+	}
+	defer rows.Close()
+
+	var tokens []storage.RefreshToken
+	for rows.Next() {
+		r, err := scanRefresh(rows)
+		if err != nil {
+			return nil, err
+		}
+		tokens = append(tokens, r)
+	}
+	if err := rows.Err(); err != nil {
+		return nil, fmt.Errorf("scan: %v", err)
+	}
+	return tokens, nil
+}
+
 func (c *conn) ListRefreshTokens(ctx context.Context) ([]storage.RefreshToken, error) {
 	rows, err := c.Query(`
 		select
diff --git a/storage/storage.go b/storage/storage.go
index 574b0a5a..54c54b0e 100644
--- a/storage/storage.go
+++ b/storage/storage.go
@@ -60,6 +60,7 @@ type GCResult struct {
 	AuthCodes      int64
 	DeviceRequests int64
 	DeviceTokens   int64
+	RefreshTokens  int64
 }
 
 // IsEmpty returns whether the garbage collection result is empty or not.
@@ -67,7 +68,8 @@ func (g *GCResult) IsEmpty() bool {
 	return g.AuthRequests == 0 &&
 		g.AuthCodes == 0 &&
 		g.DeviceRequests == 0 &&
-		g.DeviceTokens == 0
+		g.DeviceTokens == 0 &&
+		g.RefreshTokens == 0
 }
 
 // Storage is the storage interface used by the server. Implementations are
@@ -139,7 +141,7 @@ type Storage interface {
 
 	// GarbageCollect deletes all expired AuthCodes,
 	// AuthRequests, DeviceRequests, and DeviceTokens.
-	GarbageCollect(ctx context.Context, now time.Time) (GCResult, error)
+	GarbageCollect(ctx context.Context, now time.Time, unusedRefreshTokensValidFor time.Duration) (GCResult, error)
 }
 
 // Client represents an OAuth2 client.
