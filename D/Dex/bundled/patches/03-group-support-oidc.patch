diff --git a/connector/oidc/oidc.go b/connector/oidc/oidc.go
index b752f9da..6d913321 100644
--- a/connector/oidc/oidc.go
+++ b/connector/oidc/oidc.go
@@ -44,6 +44,9 @@ type Config struct {
 	// InsecureEnableGroups enables groups claims. This is disabled by default until https://github.com/dexidp/dex/issues/1065 is resolved
 	InsecureEnableGroups bool `json:"insecureEnableGroups"`
 
+	// Allowed groups.
+	AllowedGroups []string `json:"allowedGroups"` // allowedGroups
+
 	// GetUserInfo uses the userinfo endpoint to get additional claims for
 	// the token. This is especially useful where upstreams return "thin"
 	// id tokens
@@ -149,6 +152,7 @@ func (c *Config) Open(id string, logger log.Logger) (conn connector.Connector, e
 		hostedDomains:             c.HostedDomains,
 		insecureSkipEmailVerified: c.InsecureSkipEmailVerified,
 		insecureEnableGroups:      c.InsecureEnableGroups,
+		allowedGroups:             c.AllowedGroups,
 		getUserInfo:               c.GetUserInfo,
 		promptType:                c.PromptType,
 		userIDKey:                 c.UserIDKey,
@@ -174,6 +178,7 @@ type oidcConnector struct {
 	hostedDomains             []string
 	insecureSkipEmailVerified bool
 	insecureEnableGroups      bool
+	allowedGroups             []string
 	getUserInfo               bool
 	promptType                string
 	userIDKey                 string
@@ -253,6 +258,15 @@ func (c *oidcConnector) Refresh(ctx context.Context, s connector.Scopes, identit
 	return c.createIdentity(ctx, identity, token)
 }
 
+func contains(target string, arr []string) bool {
+	for _, s := range arr {
+		if s == target {
+			return true
+		}
+	}
+	return false
+}
+
 func (c *oidcConnector) createIdentity(ctx context.Context, identity connector.Identity, token *oauth2.Token) (connector.Identity, error) {
 	rawIDToken, ok := token.Extra("id_token").(string)
 	if !ok {
@@ -267,6 +281,7 @@ func (c *oidcConnector) createIdentity(ctx context.Context, identity connector.I
 	if err := idToken.Claims(&claims); err != nil {
 		return identity, fmt.Errorf("oidc: failed to decode claims: %v", err)
 	}
+	c.logger.Debugf("Claims::: %q \n", claims)
 
 	// We immediately want to run getUserInfo if configured before we validate the claims
 	if c.getUserInfo {
@@ -277,6 +292,7 @@ func (c *oidcConnector) createIdentity(ctx context.Context, identity connector.I
 		if err := userInfo.Claims(&claims); err != nil {
 			return identity, fmt.Errorf("oidc: failed to decode userinfo claims: %v", err)
 		}
+		c.logger.Debugf("UserInfo::: %q \n", userInfo)
 	}
 
 	userNameKey := "name"
@@ -341,6 +357,28 @@ func (c *oidcConnector) createIdentity(ctx context.Context, identity connector.I
 			}
 		}
 	}
+	c.logger.Debugf("Groups::: %q \n", groups)
+
+	// Validate that the user is part of allowedGroups
+	var accessAllowed = false
+	if len(c.allowedGroups) > 0 {
+	    for _,group := range c.allowedGroups {
+	        groupPresent := contains(group, groups)
+	        if groupPresent {
+	            accessAllowed = true
+				c.logger.Debugf("Found a match - Group::: %q \n", group)
+	            break
+	        }
+	    }
+	} else {
+		// don't check for groups if allowedGroups is not configured
+		c.logger.Debugf("Group check not performed \n")
+		accessAllowed = true
+	}
+
+	if !accessAllowed {
+	   return identity, errors.New("User is not in the allowed group(s)")
+	}
 
 	hostedDomain, _ := claims["hd"].(string)
 	if len(c.hostedDomains) > 0 {
diff --git a/go.mod b/go.mod
index f360aa5f..5691198a 100644
--- a/go.mod
+++ b/go.mod
@@ -3,7 +3,7 @@ module github.com/dexidp/dex
 go 1.16
 
 require (
-	entgo.io/ent v0.8.0
+	entgo.io/ent v0.11.0
 	github.com/AppsFlyer/go-sundheit v0.4.0
 	github.com/Masterminds/semver v1.5.0
 	github.com/Masterminds/sprig/v3 v3.2.2
@@ -18,20 +18,20 @@ require (
 	github.com/gorilla/mux v1.8.0
 	github.com/grpc-ecosystem/go-grpc-prometheus v1.2.0
 	github.com/kylelemons/godebug v1.1.0
-	github.com/lib/pq v1.10.2
+	github.com/lib/pq v1.10.5
 	github.com/mattermost/xml-roundtrip-validator v0.1.0
-	github.com/mattn/go-sqlite3 v1.14.8
+	github.com/mattn/go-sqlite3 v1.14.13
 	github.com/oklog/run v1.1.0
 	github.com/pkg/errors v0.9.1
 	github.com/prometheus/client_golang v1.11.0
 	github.com/russellhaering/goxmldsig v1.1.0
 	github.com/sirupsen/logrus v1.8.1
-	github.com/spf13/cobra v1.2.1
-	github.com/stretchr/testify v1.7.0
+	github.com/spf13/cobra v1.5.0
+	github.com/stretchr/testify v1.7.1-0.20210427113832-6241f9ab9942
 	go.etcd.io/etcd/client/pkg/v3 v3.5.0
 	go.etcd.io/etcd/client/v3 v3.5.0
 	golang.org/x/crypto v0.0.0-20210322153248-0c34fe9e7dc2
-	golang.org/x/net v0.0.0-20210503060351-7fd8e65b6420
+	golang.org/x/net v0.0.0-20211015210444-4f30a5c0130f
 	golang.org/x/oauth2 v0.0.0-20210628180205-a41e5a781914
 	google.golang.org/api v0.52.0
 	google.golang.org/grpc v1.39.0
diff --git a/server/handlers.go b/server/handlers.go
index 2a4f8c71..d35cd83d 100644
--- a/server/handlers.go
+++ b/server/handlers.go
@@ -437,7 +437,7 @@ func (s *Server) handleConnectorCallback(w http.ResponseWriter, r *http.Request)

 	if err != nil {
 		s.logger.Errorf("Failed to authenticate: %v", err)
-		s.renderError(r, w, http.StatusInternalServerError, fmt.Sprintf("Failed to authenticate: %v", err))
+		s.renderError(r, w, http.StatusUnauthorized, fmt.Sprintf("Failed to authenticate: %v", err))
 		return
 	}

