--- a/CMakeLists.txt
+++ b/CMakeLists.txt
@@ -62,8 +62,8 @@
 #
 # Modify the install prefix if not specified on the command
 #
-set(CMAKE_INSTALL_PREFIX ${PROJECT_BINARY_DIR} CACHE PATH "..." FORCE) 
-message(STATUS "  Installation prefix set to ${CMAKE_INSTALL_PREFIX}")
+# set(CMAKE_INSTALL_PREFIX ${PROJECT_BINARY_DIR} CACHE PATH "..." FORCE)
+# message(STATUS "  Installation prefix set to ${CMAKE_INSTALL_PREFIX}")
 
 #
 # Use sgtelib
--- a/interfaces/CMakeLists.txt
+++ b/interfaces/CMakeLists.txt
@@ -1,3 +1,3 @@
 add_subdirectory(${CMAKE_CURRENT_SOURCE_DIR}/CInterface)
 
-add_subdirectory(${CMAKE_CURRENT_SOURCE_DIR}/PyNomad)
+# add_subdirectory(${CMAKE_CURRENT_SOURCE_DIR}/PyNomad)
--- a/src/Attribute/cacheAttributesDefinition.hpp
+++ b/src/Attribute/cacheAttributesDefinition.hpp
@@ -0,0 +1,11 @@
+//////////// THIS FILE MUST BE CREATED BY EXECUTING WriteAttributeDefinitionFile ////////////
+//////////// DO NOT MODIFY THIS FILE MANUALLY ///////////////////////////////////////////////
+
+#ifndef __NOMAD_4_0_CACHEATTRIBUTESDEFINITION__
+#define __NOMAD_4_0_CACHEATTRIBUTESDEFINITION__
+
+_definition = {
+{ "CACHE_FILE",  "std::string",  "",  " Cache file name ",  " \n  \n . Cache file. If the specified file does not exist, it will be created. \n  \n . Argument: one string. \n  \n . If the string is empty, no cache file will be created. \n  \n . Points already in the cache file will not be reevaluated. \n  \n . Example: CACHE_FILE cache.txt \n  \n . Default: Empty string.\n\n",  "  basic cache file  "  , "false" , "false" , "true" },
+{ "CACHE_SIZE_MAX",  "size_t",  "INF",  " Maximum number of evaluation points to be stored in the cache ",  " \n  \n . The cache will be purged from older points if it reaches this number \n   of evaluation points. \n  \n . Argument: one positive integer (expressed in number of evaluation points). \n  \n . Example: CACHE_SIZE_MAX 10000 \n  \n . Default: INF\n\n",  "  advanced cache  "  , "false" , "false" , "true" } };
+
+#endif
--- a/src/Attribute/deprecatedAttributesDefinition.hpp
+++ b/src/Attribute/deprecatedAttributesDefinition.hpp
@@ -0,0 +1,102 @@
+//////////// THIS FILE MUST BE CREATED BY EXECUTING WriteAttributeDefinitionFile ////////////
+//////////// DO NOT MODIFY THIS FILE MANUALLY ///////////////////////////////////////////////
+
+#ifndef __NOMAD_4_0_DEPRECATEDATTRIBUTESDEFINITION__
+#define __NOMAD_4_0_DEPRECATEDATTRIBUTESDEFINITION__
+
+_definition = {
+{ "ASYNCHRONOUS",  "bool",  "true",  " Deprecated from Nomad 3: Not implemented ",  " \n . Default: true\n\n",  "  internal  "  , "false" , "false" , "true" },
+{ "BB_INPUT_INCLUDE_SEED",  "bool",  "false",  " Deprecated from Nomad 3: Not implemented ",  " \n . Default: false\n\n",  "  internal  "  , "false" , "false" , "true" },
+{ "BB_INPUT_INCLUDE_TAG",  "bool",  "false",  " Deprecated from Nomad 3: Not implemented ",  " \n . Default: false\n\n",  "  internal  "  , "false" , "false" , "true" },
+{ "BB_REDIRECTION",  "bool",  "true",  " Deprecated from Nomad 3: Not implemented ",  " \n . Default: true\n\n",  "  internal  "  , "false" , "false" , "true" },
+{ "CACHE_SAVE_PERIOD",  "size_t",  "25",  " Deprecated from Nomad 3: Not implemented ",  " \n . Default: 25\n\n",  "  internal  "  , "false" , "false" , "true" },
+{ "CACHE_SEARCH",  "bool",  "false",  " Deprecated from Nomad 3: Not implemented ",  " \n . Default: false\n\n",  "  internal  "  , "false" , "false" , "true" },
+{ "CLOSED_BRACE",  "std::string",  "}",  " Deprecated from Nomad 3: Not implemented ",  " \n . Default: }\n\n",  "  internal  "  , "false" , "false" , "true" },
+{ "DISABLE",  "NOMAD::ArrayOfString",  "",  " Deprecated. DISABLE MODELS is replaced by QUAD_MODEL_SEARCH false and SGTELIB_MODEL_SEARCH false. DISABLE EVAL_SORT is replaced by EVAL_QUEUE_SORT LEXICOGRAPHICAL.",  " \n . Default: Empty string.\n\n",  "  internal  "  , "false" , "false" , "true" },
+{ "EXTENDED_POLL_ENABLED",  "bool",  "true",  " Deprecated from Nomad 3: Not implemented ",  " \n . Default: true\n\n",  "  internal  "  , "false" , "false" , "true" },
+{ "EXTENDED_POLL_TRIGGER",  "NOMAD::Double",  "0.1",  " Deprecated from Nomad 3: Not implemented ",  " \n . Default: 0.1\n\n",  "  internal  "  , "false" , "false" , "true" },
+{ "F_TARGET",  "NOMAD::Double",  "0.0",  " Deprecated from Nomad 3: Not implemented ",  " \n . Default: 0.0\n\n",  "  internal  "  , "false" , "false" , "true" },
+{ "HAS_SGTE",  "bool",  "false",  " Deprecated from Nomad 3: Not implemented ",  " \n . Default: false\n\n",  "  internal  "  , "false" , "false" , "true" },
+{ "H_MIN",  "NOMAD::Double",  "0.0",  " Deprecated from Nomad 3: Not implemented ",  " \n . Default: 0.0\n\n",  "  internal  "  , "false" , "false" , "true" },
+{ "H_NORM",  "std::string",  "L2",  " Deprecated from Nomad 3: Not implemented ",  " \n . Default: L2\n\n",  "  internal  "  , "false" , "false" , "true" },
+{ "INITIAL_MESH_INDEX",  "int",  "0",  " Deprecated from Nomad 3: Not implemented ",  " \n . Default: 0\n\n",  "  internal  "  , "false" , "false" , "true" },
+{ "INITIAL_POLL_SIZE",  "NOMAD::ArrayOfDouble",  "-",  " Deprecated from Nomad 3: replaced by INITIAL_FRAME_SIZE ",  " \n . No default value.\n\n",  "  internal  "  , "false" , "false" , "true" },
+{ "INTENSIFICATION_TYPE",  "std::string",  "POLL",  " Deprecated from Nomad 3: Intensification not implemented ",  " \n . Default: POLL\n\n",  "  internal  "  , "false" , "false" , "true" },
+{ "INT_POLL_DIR_TYPES",  "NOMAD::DirectionTypeList",  "ORTHO 1",  " Deprecated from Nomad 3: Intensification not implemented ",  " \n . Default: ORTHO 1\n\n",  "  internal  "  , "false" , "false" , "true" },
+{ "L_CURVE_TARGET",  "NOMAD::Double",  "-",  " Deprecated from Nomad 3: Not implemented ",  " \n . No default value.\n\n",  "  internal  "  , "false" , "false" , "true" },
+{ "MAX_CACHE_MEMORY",  "size_t",  "2000",  " Deprecated from Nomad 3: Not implemented ",  " \n . Default: 2000\n\n",  "  internal  "  , "false" , "false" , "true" },
+{ "MAX_CONSECUTIVE_FAILED_ITERATIONS",  "int",  "-1",  " Deprecated from Nomad 3: Not implemented ",  " \n . Default: -1\n\n",  "  internal  "  , "false" , "false" , "true" },
+{ "MAX_EVAL_INTENSIFICATION",  "int",  "-1",  " Deprecated from Nomad 3: Intensification not implemented ",  " \n . Default: -1\n\n",  "  internal  "  , "false" , "false" , "true" },
+{ "MAX_SGTE_EVAL",  "size_t",  "1000",  " Deprecated from Nomad 3: replaced by QUAD_MODEL_MAX_EVAL and SGTELIB_MODEL_MAX_EVAL ",  " \n . Default: 1000\n\n",  "  internal  "  , "false" , "false" , "true" },
+{ "MAX_SIM_BB_EVAL",  "int",  "-1",  " Deprecated from Nomad 3: not implemented ",  " \n . Default: -1\n\n",  "  internal  "  , "false" , "false" , "true" },
+{ "MESH_COARSENING_EXPONENT",  "size_t",  "1",  " Deprecated from Nomad 3: Only GMesh is used in Nomad 4 ",  " \n . Default: 1\n\n",  "  internal  "  , "false" , "false" , "true" },
+{ "MESH_REFINING_EXPONENT",  "int",  "-1",  " Deprecated from Nomad 3: Only GMesh is used in Nomad 4 ",  " \n . Default: -1\n\n",  "  internal  "  , "false" , "false" , "true" },
+{ "MESH_TYPE",  "std::string",  "X",  " Deprecated from Nomad 3: Only GMesh is used in Nomad 4 ",  " \n . Default: X\n\n",  "  internal  "  , "false" , "false" , "true" },
+{ "MESH_UPDATE_BASIS",  "NOMAD::Double",  "4.0",  " Deprecated from Nomad 3: Only GMesh is used in Nomad 4 ",  " \n . Default: 4.0\n\n",  "  internal  "  , "false" , "false" , "true" },
+{ "MIN_POLL_SIZE",  "NOMAD::ArrayOfDouble",  "-",  " Deprecated from Nomad 3: replaced by MIN_FRAME_SIZE ",  " \n . No default value.\n\n",  "  internal  "  , "false" , "false" , "true" },
+{ "MODEL_EVAL_SORT",  "bool",  "true",  " Deprecated from Nomad 3: Not implemented ",  " \n . Default: true\n\n",  "  internal  "  , "false" , "false" , "true" },
+{ "MODEL_EVAL_SORT_CAUTIOUS",  "bool",  "false",  " Deprecated from Nomad 3: not present in Nomad 4 ",  " \n . Default: false\n\n",  "  internal  "  , "false" , "false" , "true" },
+{ "MODEL_NP1_QUAD_EPSILON",  "NOMAD::Double",  "0.01",  " Deprecated from Nomad 3: ortho n+1 not implemented  ",  " \n . Default: 0.01\n\n",  "  internal  "  , "false" , "false" , "true" },
+{ "MODEL_QUAD_MAX_Y_SIZE",  "size_t",  "500",  " Deprecated from Nomad 3: Not implemented ",  " \n . Default: 500\n\n",  "  internal  "  , "false" , "false" , "true" },
+{ "MODEL_QUAD_MIN_Y_SIZE",  "int",  "2",  " Deprecated from Nomad 3: not present in Nomad 4 ",  " \n . Default: 2\n\n",  "  internal  "  , "false" , "false" , "true" },
+{ "MODEL_QUAD_RADIUS_FACTOR",  "NOMAD::Double",  "2.0",  " Deprecated from Nomad 3: Not implemented ",  " \n . Default: 2.0\n\n",  "  internal  "  , "false" , "false" , "true" },
+{ "MODEL_QUAD_USE_WP",  "bool",  "false",  " Deprecated from Nomad 3: not used anymore ",  " \n . Default: false\n\n",  "  internal  "  , "false" , "false" , "true" },
+{ "MODEL_RADIUS_FACTOR",  "NOMAD::Double",  "2.0",  " Deprecated from Nomad 3: replaced by QUAD_MODEL_RADIUS_FACTOR in Nomad 4 ",  " \n . Default: 2.0\n\n",  "  internal  "  , "false" , "false" , "true" },
+{ "MODEL_SEARCH",  "std::string",  "QUADRATIC",  " Deprecated from Nomad 3: replaced by QUAD_MODEL_SEARCH and \n   SGTELIB_MODEL_SEARCH in Nomad 4 ",  " \n . Default: QUADRATIC\n\n",  "  internal  "  , "false" , "false" , "true" },
+{ "MODEL_SEARCH_MAX_TRIAL_PTS",  "size_t",  "10",  " Deprecated from Nomad 3: Not implemented ",  " \n . Default: 10\n\n",  "  internal  "  , "false" , "false" , "true" },
+{ "MODEL_SEARCH_OPTIMISTIC",  "bool",  "false",  " Deprecated from Nomad 3: Not implemented ",  " \n . Default: false\n\n",  "  internal  "  , "false" , "false" , "true" },
+{ "MODEL_SEARCH_OPPORTUNISTIC",  "bool",  "false",  " Deprecated from Nomad 3: Model search is never opportunistic in Nomad 4 ",  " \n . Default: false\n\n",  "  internal  "  , "false" , "false" , "true" },
+{ "MODEL_SEARCH_PROJ_TO_MESH",  "bool",  "true",  " Deprecated from Nomad 3: Not implemented ",  " \n . Default: true\n\n",  "  internal  "  , "false" , "false" , "true" },
+{ "MULTI_F_BOUNDS",  "NOMAD::ArrayOfDouble",  "-",  " Deprecated from Nomad 3: Not implemented ",  " \n . No default value.\n\n",  "  internal  "  , "false" , "false" , "true" },
+{ "MULTI_FORMULATION",  "std::string",  "PRODUCT",  " Deprecated from Nomad 3: Not implemented ",  " \n . Default: PRODUCT\n\n",  "  internal  "  , "false" , "false" , "true" },
+{ "MULTI_NB_MADS_RUNS",  "size_t",  "INF",  " Deprecated from Nomad 3: Not implemented ",  " \n . Default: INF\n\n",  "  internal  "  , "false" , "false" , "true" },
+{ "MULTI_OVERALL_BB_EVAL",  "size_t",  "INF",  " Deprecated from Nomad 3: Not implemented ",  " \n . Default: INF\n\n",  "  internal  "  , "false" , "false" , "true" },
+{ "MULTI_USE_DELTA_CRIT",  "bool",  "false",  " Deprecated from Nomad 3: Not implemented ",  " \n . Default: false\n\n",  "  internal  "  , "false" , "false" , "true" },
+{ "NEIGHBORS_EXE",  "std::string",  "",  " Deprecated from Nomad 3: Not implemented ",  " \n . Default: Empty string.\n\n",  "  internal  "  , "false" , "false" , "true" },
+{ "NM_SEARCH_DELTA_E",  "NOMAD::Double",  "2",  " Deprecated from Nomad 3: replaced by NM_DELTA_E ",  " \n . Default: 2\n\n",  "  internal  "  , "false" , "false" , "true" },
+{ "NM_SEARCH_DELTA_IC",  "NOMAD::Double",  "-0.5",  " Deprecated from Nomad 3: replaced by NM_DELTA_IC ",  " \n . Default: -0.5\n\n",  "  internal  "  , "false" , "false" , "true" },
+{ "NM_SEARCH_DELTA_OC",  "NOMAD::Double",  "0.5",  " Deprecated from Nomad 3: replaced by NM_DELTA_OC ",  " \n . Default: 0.5\n\n",  "  internal  "  , "false" , "false" , "true" },
+{ "NM_SEARCH_GAMMA",  "NOMAD::Double",  "0.5",  " Deprecated from Nomad 3: replaced by NM_GAMMA (valid for search and opt. )",  " \n . Default: 0.5\n\n",  "  internal  "  , "false" , "false" , "true" },
+{ "NM_SEARCH_INCLUDE_FACTOR",  "NOMAD::Double",  "8",  " Deprecated from Nomad 3: Not implemented ",  " \n . Default: 8\n\n",  "  internal  "  , "false" , "false" , "true" },
+{ "NM_SEARCH_INIT_Y_BEST_VON",  "bool",  "false",  " Deprecated from Nomad 3: always true in Nomad 4 ",  " \n . Default: false\n\n",  "  internal  "  , "false" , "false" , "true" },
+{ "NM_SEARCH_INIT_Y_ITER",  "bool",  "false",  " Deprecated from Nomad 3: not used anymore ",  " \n . Default: false\n\n",  "  internal  "  , "false" , "false" , "true" },
+{ "NM_SEARCH_INTENSIVE",  "bool",  "false",  " Deprecated from Nomad 3: not used anymore ",  " \n . Default: false\n\n",  "  internal  "  , "false" , "false" , "true" },
+{ "NM_SEARCH_MAX_TRIAL_PTS",  "int",  "-1",  " Deprecated from Nomad 3: use NM_SEARCH_MAX_TRIAL_PTS_NFACTOR instead ",  " \n . Default: -1\n\n",  "  internal  "  , "false" , "false" , "true" },
+{ "NM_SEARCH_MIN_SIMPLEX_VOL",  "size_t",  "0",  " Deprecated from Nomad 3: stopping criterion not used anymore ",  " \n . Default: 0\n\n",  "  internal  "  , "false" , "false" , "true" },
+{ "NM_SEARCH_OPPORTUNISTIC",  "bool",  "false",  " Deprecated from Nomad 3: replaced by NM_SEARCH_STOP_ON_SUCCESS ",  " \n . Default: false\n\n",  "  internal  "  , "false" , "false" , "true" },
+{ "NM_SEARCH_SCALED_DZ",  "bool",  "false",  " Deprecated from Nomad 3: always true in Nomad 4 ",  " \n . Default: false\n\n",  "  internal  "  , "false" , "false" , "true" },
+{ "NM_SEARCH_USE_ONLY_Y",  "bool",  "false",  " Deprecated from Nomad 3: not used anymore ",  " \n . Default: false\n\n",  "  internal  "  , "false" , "false" , "true" },
+{ "NM_SEARCH_USE_SHORT_Y0",  "bool",  "false",  " Deprecated from Nomad 3: not used anymore ",  " \n . Default: false\n\n",  "  internal  "  , "false" , "false" , "true" },
+{ "OPEN_BRACE",  "std::string",  "{",  " Deprecated from Nomad 3: Not implemented ",  " \n . Default: {\n\n",  "  internal  "  , "false" , "false" , "true" },
+{ "OPPORTUNISTIC_CACHE_SEARCH",  "bool",  "false",  " Deprecated from Nomad 3: Not implemented ",  " \n . Default: false\n\n",  "  internal  "  , "false" , "false" , "true" },
+{ "OPPORTUNISTIC_EVAL",  "NOMAD::ArrayOfDouble",  "-",  " Deprecated from Nomad 3: replaced by EVAL_OPPORTUNISTIC ",  " \n . No default value.\n\n",  "  internal  "  , "false" , "false" , "true" },
+{ "OPPORTUNISTIC_LH",  "bool",  "false",  " Deprecated from Nomad 3: Not implemented ",  " \n . Default: false\n\n",  "  internal  "  , "false" , "false" , "true" },
+{ "OPPORTUNISTIC_LUCKY_EVAL",  "bool",  "false",  " Deprecated from Nomad 3: Not implemented ",  " \n . Default: false\n\n",  "  internal  "  , "false" , "false" , "true" },
+{ "OPPORTUNISTIC_MIN_EVAL",  "size_t",  "INF",  " Deprecated from Nomad 3: Not implemented ",  " \n . Default: INF\n\n",  "  internal  "  , "false" , "false" , "true" },
+{ "OPPORTUNISTIC_MIN_F_IMPRVMT",  "NOMAD::Double",  "-",  " Deprecated from Nomad 3: Not implemented ",  " \n . No default value.\n\n",  "  internal  "  , "false" , "false" , "true" },
+{ "OPPORTUNISTIC_MIN_NB_SUCCESS",  "size_t",  "INF",  " Deprecated from Nomad 3: Not implemented ",  " \n . Default: INF\n\n",  "  internal  "  , "false" , "false" , "true" },
+{ "OPT_ONLY_SGTE",  "bool",  "false",  " Deprecated from Nomad 3: replaced by EVAL_SURROGATE_OPTIMIZATION ",  " \n . Default: false\n\n",  "  internal  "  , "false" , "false" , "true" },
+{ "PERIODIC_VARIABLE",  "NOMAD::ArrayOfDouble",  "-",  " Deprecated from Nomad 3: Not implemented ",  " \n . No default value.\n\n",  "  internal  "  , "false" , "false" , "true" },
+{ "POINT_DISPLAY_LIMIT",  "size_t",  "20",  " Deprecated from Nomad 3: Not implemented ",  " \n . Default: 20\n\n",  "  internal  "  , "false" , "false" , "true" },
+{ "POLL_UPDATE_BASIS",  "NOMAD::Double",  "2.0",  " Deprecated from Nomad 3: Only GMesh is used in Nomad 4 ",  " \n . Default: 2.0\n\n",  "  internal  "  , "false" , "false" , "true" },
+{ "RANDOM_EVAL_SORT",  "bool",  "false",  " Deprecated from Nomad 3: replaced by EVAL_QUEUE_SORT RANDOM ",  " \n . Default: false\n\n",  "  internal  "  , "false" , "false" , "true" },
+{ "ROBUST_MADS",  "bool",  "false",  " Deprecated from Nomad 3: Not implemented ",  " \n . Default: false\n\n",  "  internal  "  , "false" , "false" , "true" },
+{ "ROBUST_MADS_STANDARD_DEV_FACTOR",  "NOMAD::Double",  "2",  " Deprecated from Nomad 3: Not implemented ",  " \n . Default: 2\n\n",  "  internal  "  , "false" , "false" , "true" },
+{ "SCALING",  "NOMAD::ArrayOfDouble",  "-",  " Deprecated from Nomad 3: Not implemented ",  " \n . No default value.\n\n",  "  internal  "  , "false" , "false" , "true" },
+{ "SEC_POLL_DIR_TYPE",  "NOMAD::DirectionTypeList",  "DOUBLE",  " Deprecated from Nomad 3: replaced by DIRECTION_TYPE_SECONDARY_POLL ",  " \n . Default: DOUBLE\n\n",  "  internal  "  , "false" , "false" , "true" },
+{ "SGTE_CACHE_FILE",  "std::string",  "",  " Deprecated from Nomad 3: Cache for static surrogate not implemented ",  " \n . Default: Empty string.\n\n",  "  internal  "  , "false" , "false" , "true" },
+{ "SGTE_COST",  "size_t",  "INF",  " Deprecated from Nomad 3: replaced by EVAL_SURROGATE_COST ",  " \n . Default: INF\n\n",  "  internal  "  , "false" , "false" , "true" },
+{ "SGTE_EVAL_SORT",  "bool",  "true",  " Deprecated from Nomad 3: replaced by EVAL_QUEUE_SORT SURROGATE ",  " \n . Default: true\n\n",  "  internal  "  , "false" , "false" , "true" },
+{ "SGTE_EXE",  "std::string",  "sgte.exe",  " Deprecated from Nomad 3: replaced by SURROGATE_EXE ",  " \n . Default: sgte.exe\n\n",  "  internal  "  , "false" , "false" , "true" },
+{ "SGTELIB_MODEL_CANDIDATES_NB",  "int",  "-1",  " Deprecated from Nomad 3: replaced by SGTELIB_MODEL_SEARCH_CANDIDATES_NB in Nomad 4 ",  " \n . Default: -1\n\n",  "  internal  "  , "false" , "false" , "true" },
+{ "SGTELIB_MODEL_EVAL_NB",  "size_t",  "10000",  " Deprecated from Nomad 3: replaced by SGTELIB_MODEL_MAX_EVAL ",  " \n . Default: 10000\n\n",  "  internal  "  , "false" , "false" , "true" },
+{ "SGTELIB_MODEL_EXCLUSION_AREA",  "NOMAD::Double",  "0.0",  " Deprecated from Nomad 3: replaced by SGTELIB_MODEL_SEARCH_EXCLUSION_AREA in Nomad 4 ",  " \n . Default: 0.0\n\n",  "  internal  "  , "false" , "false" , "true" },
+{ "SGTELIB_MODEL_FILTER",  "std::string",  "2345",  " Deprecated from Nomad 3: replaced by SGTELIB_MODEL_SEARCH_FILTER in Nomad 4 ",  " \n . Default: 2345\n\n",  "  internal  "  , "false" , "false" , "true" },
+{ "SGTELIB_MODEL_TRIALS",  "int",  "1",  " Deprecated from Nomad 3: replaced by SGTELIB_MODEL_SEARCH_TRIALS in Nomad 4 ",  " \n . Default: 1\n\n",  "  internal  "  , "false" , "false" , "true" },
+{ "SNAP_TO_BOUNDS",  "bool",  "true",  " Deprecated from Nomad 3: Not implemented ",  " \n . Default: true\n\n",  "  internal  "  , "false" , "false" , "true" },
+{ "TREND_MATRIX",  "NOMAD::ArrayOfDouble",  "-",  " Deprecated from Nomad 3: Trend matrix not implemented  ",  " \n . No default value.\n\n",  "  internal  "  , "false" , "false" , "true" },
+{ "TREND_MATRIX_BASIC_LINE_SEARCH",  "bool",  "false",  " Deprecated from Nomad 3: Trend matrix not implemented  ",  " \n . Default: false\n\n",  "  internal  "  , "false" , "false" , "true" },
+{ "TREND_MATRIX_EVAL_SORT",  "bool",  "false",  " Deprecated from Nomad 3: Trend matrix not implemented  ",  " \n . Default: false\n\n",  "  internal  "  , "false" , "false" , "true" },
+{ "VNS_SEARCH",  "bool",  "false",  " Replaced by VNS_MADS_SEARCH ",  " \n . Default: false\n\n",  "  internal  "  , "false" , "false" , "true" } };
+
+#endif
--- a/src/Attribute/displayAttributesDefinition.hpp
+++ b/src/Attribute/displayAttributesDefinition.hpp
@@ -0,0 +1,22 @@
+//////////// THIS FILE MUST BE CREATED BY EXECUTING WriteAttributeDefinitionFile ////////////
+//////////// DO NOT MODIFY THIS FILE MANUALLY ///////////////////////////////////////////////
+
+#ifndef __NOMAD_4_0_DISPLAYATTRIBUTESDEFINITION__
+#define __NOMAD_4_0_DISPLAYATTRIBUTESDEFINITION__
+
+_definition = {
+{ "DISPLAY_ALL_EVAL",  "bool",  "false",  " Flag to display all evaluations ",  " \n  \n . If true, more points are displayed with parameters DISPLAY_STATS and \n   STATS_FILE \n  \n . If false, only the successful evaluations are displayed. \n  \n . Overrides parameters DISPLAY_INFEASIBLE and DISPLAY_UNSUCCESSFUL \n  \n . Points of the phase one with EB constraint are not displayed \n  \n . Argument: one boolean \n  \n . Example: DISPLAY_ALL_EVAL yes \n  \n . Default: false\n\n",  "  basic display displays stat stats eval evals evaluation evaluations   "  , "false" , "true" , "true" },
+{ "DISPLAY_DEGREE",  "int",  "2",  " Level of verbose during execution ",  " \n  \n . Argument: one integer in {0, 1, 2, 3} (basic) or one string in: \n     . 'NO', 'NO_DISPLAY', \n     . 'MIN', 'MINIMAL', 'MINIMAL_DISPLAY', \n     . 'NORMAL', 'NORMAL_DISPLAY', \n     . 'FULL', 'FULL_DISPLAY' \n  \n . Example: \n     DISPLAY_DEGREE 2    # basic: normal display \n  \n . Default: 2\n\n",  "  basic display verbose output outputs info infos  "  , "false" , "true" , "true" },
+{ "DISPLAY_HEADER",  "size_t",  "40",  " Frequency at which the stats header is displayed ",  " \n  \n . Every time this number of stats lines is displayed, the stats header is \n   displayed again. This parameter is for clarity of the display. \n  \n . Value of INF means to never display the header. \n  \n . Default: 40\n\n",  "  advanced  "  , "false" , "true" , "true" },
+{ "DISPLAY_INFEASIBLE",  "bool",  "false",  " Flag to display infeasible ",  " \n  \n . When true, do display iterations for which constraints are violated. \n  \n . When false, only display iterations where the point is feasible. \n  \n . Argument: one boolean \n  \n . Example: DISPLAY_INFEASIBLE true \n  \n . Default: false\n\n",  "  advanced display displays infeasible  "  , "false" , "true" , "true" },
+{ "DISPLAY_MAX_STEP_LEVEL",  "size_t",  "20",  " Depth of the step after which info is not printed ",  " \n . If a step has more than this number of parent steps, it will not be printed. \n  \n . Only has effect when DISPLAY_DEGREE = FULL. \n  \n . Default: 20\n\n",  "  advanced  "  , "false" , "true" , "true" },
+{ "DISPLAY_STATS",  "NOMAD::ArrayOfString",  "BBE OBJ",  " Format for displaying the evaluation points ",  " \n  \n . Format of the outputs displayed at each success (single-objective) \n  \n . Format of the final Pareto front (multi-objective) \n  \n . Displays more points with DISPLAY_ALL_EVAL true \n  \n . Arguments: list of strings possibly including the following keywords: \n     BBE        : blackbox evaluations \n     BBO        : blackbox output \n     BLK_EVA    : block evaluation calls \n     BLK_SIZE   : number of points in the block \n     CACHE_HITS : cache hits \n     CACHE_SIZE : cache size \n     CONS_H     : infeasibility (h) value \n     DIRECTION  : direction that generated this point \n     EVAL       : evaluations (includes cache hits) \n     FEAS_BBE   : feasible blackbox evaluations \n     FRAME_CENTER : point that was used as center when generating this point \n     FRAME_SIZE / DELTA_F : frame size delta_k^f \n     GEN_STEP   : name of the step that generated this point \n     H_MAX      : max infeasibility (h) acceptable \n     INF_BBE    : infeasible blackbox evaluations \n     ITER_NUM   : iteration number in which this evaluation was done \n     LAP        : number of lap evaluations since last reset \n     MESH_INDEX : mesh index \n     MESH_SIZE / DELTA_M : mesh size delta_k^m \n     MODEL_EVAL : number of quad or sgtelib model evaluations since last reset \n     OBJ        : objective function value \n     PHASE_ONE_SUCC: success evaluations during phase one phase \n     REL_SUCC   : relative success feasible evaluations (relative to the previous \n                  evaluation, or relative to the mesh center if there was no \n                  previous evaluation in the same pass) \n     SOL        : current feasible iterate \n     SUCCESS_TYPE: success type for this evaluation, compared with the frame center \n     SURROGATE_EVAL: number of static surrogate evaluations \n     THREAD_ALGO: thread number for the algorithm \n     THREAD_NUM : thread number in which this evaluation was done \n     TIME       : real time in seconds \n     TOTAL_MODEL_EVAL: total number of quad or sgtelib model evaluations \n     USER       : user-defined string \n  \n . Example: \n     DISPLAY_STATS BBE EVAL ( SOL ) OBJ CONS_H \n  \n . Default: BBE OBJ\n\n",  "  basic display displays output outputs stat stats success successes  "  , "false" , "true" , "true" },
+{ "DISPLAY_UNSUCCESSFUL",  "bool",  "true",  " Flag to display unsuccessful ",  " \n  \n . When true, display iterations even when no better solution is found. \n  \n . When false, only display iterations when a better objective value is found. \n  \n . Argument: one boolean ('yes' or 'no') \n  \n . Example: DISPLAY_UNSUCCESSFUL yes \n  \n  \n . Default: true\n\n",  "  advanced display displays success successes failed failure failures fail fails  "  , "false" , "true" , "true" },
+{ "STATS_FILE",  "NOMAD::ArrayOfString",  "",  " The name of the stats file ",  " \n  \n . File containing all successes in a formatted way (similar as DISPLAY_STATS in a file) \n  \n . Displays more points when DISPLAY_ALL_EVAL is true \n  \n . Arguments: one string (file name) and one list of strings (for the format of stats) \n  \n . The seed is added to the file name if \n   ADD_SEED_TO_FILE_NAMES=\'yes\' (default) \n  \n . Example: STATS_FILE log.txt BBE SOL f=%.2EOBJ \n  \n . Default: Empty string.\n\n",  "  basic stat stats file files name display displays output outputs  "  , "false" , "false" , "true" },
+{ "EVAL_STATS_FILE",  "string",  "-",  " The name of the file for stats about evaluations and successes ",  " \n  \n . File containing overall stats information about number of evaluations and successes \n  \n . Arguments: one string for the file name \n  \n . The seed is added to the file name if \n   ADD_SEED_TO_FILE_NAMES=\'yes\' (default) \n  \n . Example: EVAL_STATS_FILE detailedStats.txt \n  \n . No default value.\n\n",  "  basic stat stats file files evaluation evaluations  "  , "false" , "false" , "true" },
+{ "SOL_FORMAT",  "NOMAD::ArrayOfDouble",  "-",  " Internal parameter for format of the solution ",  " \n  \n . SOL_FORMAT is computed from BB_OUTPUT_TYPE and GRANULARITY \n   parameters. \n  \n . Gives the format precision for display of SOL. May also be used for \n   other ArrayOfDouble of the same DIMENSION (ex. bounds, deltas). \n  \n . CANNOT BE MODIFIED BY USER. Internal parameter. \n  \n . No default value.\n\n",  "  internal  "  , "false" , "true" , "true" },
+{ "OBJ_WIDTH",  "size_t",  "0",  " Internal parameter for character width of the objective ",  " \n  \n . Computed to display the objective correctly when NOMAD is run. \n  \n . CANNOT BE MODIFIED BY USER. Internal parameter. \n  \n . Default: 0\n\n",  "  internal  "  , "false" , "false" , "true" },
+{ "HISTORY_FILE",  "std::string",  "",  " The name of the history file ",  " \n  \n . The history file contains all evaluations in a simple format (SOL BBO) \n  \n . Arguments: one string (file name) \n  \n . The seed is added to the file name if \n   ADD_SEED_TO_FILE_NAMES=\'yes\' (default) \n  \n . Example: HISTORY_FILE history.txt \n  \n  \n . Default: Empty string.\n\n",  "  basic history file name display displays output outputs  "  , "false" , "false" , "true" },
+{ "SOLUTION_FILE",  "std::string",  "",  " The name of the file containing the best feasible solution ",  " \n  \n . The solution file contains the best feasible incumbent point in a simple \n   format (SOL BBO) \n  \n . Arguments: one string (file name) \n  \n . The seed is added to the file name if \n   ADD_SEED_TO_FILE_NAMES=\'yes\' (default) \n  \n . Example: SOLUTION_FILE sol.txt \n  \n  \n . Default: Empty string.\n\n",  "  basic solution best incumbent file name display displays output outputs  "  , "false" , "false" , "true" } };
+
+#endif
--- a/src/Attribute/evalAttributesDefinition.hpp
+++ b/src/Attribute/evalAttributesDefinition.hpp
@@ -0,0 +1,13 @@
+//////////// THIS FILE MUST BE CREATED BY EXECUTING WriteAttributeDefinitionFile ////////////
+//////////// DO NOT MODIFY THIS FILE MANUALLY ///////////////////////////////////////////////
+
+#ifndef __NOMAD_4_0_EVALATTRIBUTESDEFINITION__
+#define __NOMAD_4_0_EVALATTRIBUTESDEFINITION__
+
+_definition = {
+{ "BB_EVAL_FORMAT",  "NOMAD::ArrayOfDouble",  "-",  " Format of the doubles sent to the blackbox evaluator ",  " \n  \n . BB_EVAL_FORMAT is computed from the BB_INPUT_TYPE parameter. \n  \n . Gives the format precision for doubles sent to blackbox evaluator. \n  \n . CANNOT BE MODIFIED BY USER. Internal parameter. \n  \n . No default value.\n\n",  "  internal  "  , "false" , "false" , "true" },
+{ "BB_EXE",  "std::string",  "",  " Blackbox executable ",  " \n  \n . Blackbox executable name \n  \n . List of strings \n  \n . Required for batch mode \n  \n . Unused in library mode \n  \n . One executable can give several outputs \n  \n . Use \' or \", and \'$\', to specify names or commands with spaces \n  \n . When the \'$\' character is put in first position of a string, it is \n   considered as global and no path will be added \n  \n . Examples \n     . BB_EXE bb.exe \n     . BB_EXE \'$nice bb.exe\' \n     . BB_EXE \'$python bb.py\' \n  \n . Default: Empty string.\n\n",  "  basic blackbox blackboxes bb exe executable executables binary output outputs batch  "  , "false" , "false" , "true" },
+{ "BB_OUTPUT_TYPE",  "NOMAD::BBOutputTypeList",  "OBJ",  " Type of outputs provided by the blackboxes ",  " \n  \n . Blackbox output types \n  \n . List of types for each blackbox output \n  \n . Available types \n     . OBJ       : objective value to minimize (define twice for bi-objective) \n     . PB        : constraint <= 0 treated with Progressive Barrier (PB) \n     . CSTR      : same as 'PB' \n     . EB        : constraint <= 0 treated with Extreme Barrier (EB) \n     . F         : constraint <= 0 treated with Filter \n     . NOTHING   : this output is ignored \n     . EXTRA_O   : same as 'NOTHING' \n     .  -        : same as 'NOTHING' \n  \n . Equality constraints are not natively supported \n  \n . See parameters LOWER_BOUND and UPPER_BOUND for bound constraints \n  \n . Examples \n     . BB_EXE bb.exe                   # these two lines define \n     . BB_OUTPUT_TYPE OBJ EB EB        # that bb.exe outputs three values \n  \n . Default: OBJ\n\n",  "  basic bb exe blackbox blackboxs output outputs constraint constraints type types  "  , "false" , "false" , "true" },
+{ "SURROGATE_EXE",  "std::string",  "",  " Static surrogate executable ",  " \n . To indicate a static surrogate executable \n  \n . List of strings \n  \n . Surrogate executable must have the same number of outputs as blackbox  \n     executable, defined by BB_OUTPUT_TYPE. \n  \n . Example \n     SURROGATE_EXE surrogate.exe     # surrogate.exe is a static surrogate executable \n                                     # for BB_EXE \n . Default: Empty string.\n\n",  "  advanced static surrogate executable  "  , "true" , "false" , "true" } };
+
+#endif
--- a/src/Attribute/evaluatorControlAttributesDefinition.hpp
+++ b/src/Attribute/evaluatorControlAttributesDefinition.hpp
@@ -0,0 +1,15 @@
+//////////// THIS FILE MUST BE CREATED BY EXECUTING WriteAttributeDefinitionFile ////////////
+//////////// DO NOT MODIFY THIS FILE MANUALLY ///////////////////////////////////////////////
+
+#ifndef __NOMAD_4_0_EVALUATORCONTROLATTRIBUTESDEFINITION__
+#define __NOMAD_4_0_EVALUATORCONTROLATTRIBUTESDEFINITION__
+
+_definition = {
+{ "EVAL_OPPORTUNISTIC",  "bool",  "true",  " Opportunistic strategy: Terminate evaluations as soon as a success is found ",  " \n  \n . Opportunistic strategy: Terminate evaluations as soon as a success is found \n  \n . This parameter is the default value for other OPPORTUNISTIC parameters, \n    including Search steps \n  \n . This parameter is the value used for Poll step \n  \n . Argument: one boolean (yes or no) \n  \n . Type 'nomad -h opportunistic' to see advanced options \n  \n . Example: EVAL_OPPORTUNISTIC no  # complete evaluations \n  \n . Default: true\n\n",  "  advanced opportunistic oppor eval evals evaluation evaluations terminate list success successes  "  , "true" , "true" , "true" },
+{ "EVAL_SURROGATE_OPTIMIZATION",  "bool",  "false",  " Use static surrogate as blackbox for optimization ",  " \n  . Use solely static surrogate instead of the blackbox for optimization. \n  \n  . In batch mode, SURROGATE_EXE needs to be defined. \n  \n  . In library mode, an Evaluator for SURROGATE eval type needs to be defined. \n  \n  . Argument: bool \n  \n  . Example: EVAL_SURROGATE_OPTIMIZATION true \n  \n  . See also: SURROGATE_EXE, MAX_SURROGATE_EVAL_OPTIMIZATION \n  \n . Default: false\n\n",  "  advanced static surrogate  "  , "true" , "false" , "true" },
+{ "EVAL_USE_CACHE",  "bool",  "true",  " Use cache in algorithms ",  " \n . When this parameter is false, the Cache is not used at all. Points may be \n   re-evaluated. \n  \n . Recommended when DIMENSION is large and evaluations are not costly. \n  \n . Cache may be used for top algorithm, and disabled for a sub-algorithm. \n  \n . If CACHE_FILE is non-empty, cache file will still be read and written. \n  \n . Default: true\n\n",  "  advanced  "  , "true" , "false" , "true" },
+{ "PSD_MADS_SUBPROBLEM_MAX_BB_EVAL",  "size_t",  "INF",  " Max number of evaluations for each subproblem ",  " \n  \n . Used in the context of Parallel Space Decomposition (PSD) MADS algorithm. \n  \n . Select the max number of evaluations in each Mads subproblem. \n  \n . Argument: size_t \n  \n . Example: PSD_MADS_SUBPROBLEM_MAX_BB_EVAL 10 \n  \n . Default: INF\n\n",  "  advanced psd mads parallel decomposition subproblem  "  , "true" , "false" , "true" },
+{ "SSD_MADS_SUBPROBLEM_MAX_BB_EVAL",  "size_t",  "INF",  " Max number of evaluations for each subproblem ",  " \n . Used in the context of Sequential Space Decomposition (SSD) MADS algorithm. \n  \n . Select the max number of evaluations in each Mads subproblem. \n  \n . Argument: size_t \n  \n . Example: SSD_MADS_SUBPROBLEM_MAX_BB_EVAL 10 \n  \n . Default: INF\n\n",  "  advanced ssd mads sequential decomposition subproblem  "  , "true" , "false" , "true" },
+{ "SUBPROBLEM_MAX_BB_EVAL",  "size_t",  "INF",  " Internal parameter for PSD_MADS_SUBPROBLEM_MAX_BB_EVAL and SSD_MADS_SUBPROBLEM_MAX_BB_EVAL ",  " \n  \n . CANNOT BE MODIFIED BY USER. Internal parameter. \n  \n . Default: INF\n\n",  "  internal  "  , "false" , "false" , "true" } };
+
+#endif
--- a/src/Attribute/evaluatorControlGlobalAttributesDefinition.hpp
+++ b/src/Attribute/evaluatorControlGlobalAttributesDefinition.hpp
@@ -0,0 +1,24 @@
+//////////// THIS FILE MUST BE CREATED BY EXECUTING WriteAttributeDefinitionFile ////////////
+//////////// DO NOT MODIFY THIS FILE MANUALLY ///////////////////////////////////////////////
+
+#ifndef __NOMAD_4_0_EVALUATORCONTROLGLOBALATTRIBUTESDEFINITION__
+#define __NOMAD_4_0_EVALUATORCONTROLGLOBALATTRIBUTESDEFINITION__
+
+_definition = {
+{ "BB_MAX_BLOCK_SIZE",  "size_t",  "1",  " Size of blocks of points, to be used for parallel evaluations ",  " \n . Maximum size of a block of evaluations send to the blackbox \n   executable at once. Blackbox executable can manage parallel \n   evaluations on its own. Opportunistic strategies may apply after \n   each block of evaluations. \n  \n . Depending on the algorithm phase, the blackbox executable will \n   receive at most BB_MAX_BLOCK_SIZE points to evaluate. \n  \n . When this parameter is greater than one, the number of evaluations \n   may exceed the MAX_BB_EVAL stopping criterion. \n  \n . Argument: integer > 0 \n  \n . Example: BB_MAX_BLOCK_SIZE 3 \n            The blackbox executable receives blocks of \n            at most 3 points for evaluation. \n  \n . Default: 1\n\n",  "  advanced block parallel  "  , "true" , "true" , "true" },
+{ "EVAL_QUEUE_CLEAR",  "bool",  "true",  " Opportunistic strategy: Flag to clear EvaluatorControl queue between each run ",  " \n  \n . Opportunistic strategy: If a success is found, clear evaluation queue of \n   other points. \n  \n . If this flag is false, the points in the evaluation queue that are not yet \n   evaluated might be evaluated later. \n  \n . If this flag is true, the points in the evaluation queue that are not yet \n   evaluated will be flushed. \n  \n . Outside of opportunistic strategy, this flag has no effect. \n  \n . Default: true\n\n",  "  advanced opportunistic oppor eval evals evaluation evaluations clear flush  "  , "true" , "true" , "true" },
+{ "EVAL_QUEUE_SORT",  "NOMAD::EvalSortType",  "DIR_LAST_SUCCESS",  " How to sort points before evaluation ",  " \n . Argument: One of DIR_LAST_SUCCESS, LEXICOGRAPHICAL, RANDOM, SURROGATE \n  \n . DIR_LAST_SUCCESS: Points that are generated in a direction similar to the \n   last direction that provided a successful point are evaluated first. \n  \n . LEXICOGRAPHICAL: Points are sorted in lexicographical order before evaluation. \n  \n . RANDOM: Mix points randomly before evaluation, instead of sorting them. \n  \n . SURROGATE: Sort points using values given by static surrogate. See parameter SURROGATE_EXE. \n  \n . Example: EVAL_QUEUE_SORT LEXICOGRAPHICAL \n  \n . Default: DIR_LAST_SUCCESS\n\n",  "  advanced  "  , "true" , "true" , "true" },
+{ "EVAL_SURROGATE_COST",  "size_t",  "INF",  " Cost of the surrogate function versus the true function ",  " \n   . Cost of the surrogate function relative to the true function \n  \n   . Argument: one nonnegative integer. \n  \n   . INF means there is no cost \n  \n   . Examples: \n         EVAL_SURROGATE_COST 3    # three surrogate evaluations count as one blackbox \n                                  # evaluation: the surrogate is three times faster \n         EVAL_SURROGATE_COST INF  # set to infinity: A surrogate evaluation does \n                                  # not count at all \n  \n   . See also: SURROGATE_EXE, EVAL_SURROGATE_OPTIMIZATION \n . Default: INF\n\n",  "  advanced static surrogate  "  , "true" , "false" , "true" },
+{ "MAX_BB_EVAL",  "size_t",  "INF",  " Stopping criterion on the number of blackbox evaluations ",  " \n  \n . Maximum number of blackbox evaluations \n  \n . Argument: one positive integer \n  \n . An INF value serves to disable the stopping criterion. \n  \n . Does not consider evaluations taken in the cache (cache hits) \n  \n . Example: MAX_BB_EVAL 1000 \n  \n . Default: INF\n\n",  "  basic stop stops stopping max maximum criterion criterions blackbox blackboxes bb  "  , "false" , "true" , "true" },
+{ "MAX_BLOCK_EVAL",  "size_t",  "INF",  " Stopping criterion on the number of blocks evaluations ",  " \n  \n . Maximum number of blocks evaluations \n  \n . Argument: one positive integer \n  \n . An INF value serves to disable the stopping criterion. \n  \n . Example: MAX_BLOCK_EVAL 100 \n  \n . Default: INF\n\n",  "  advances block stop parallel  "  , "true" , "true" , "true" },
+{ "MAX_EVAL",  "size_t",  "INF",  " Stopping criterion on the number of evaluations (blackbox and cache) ",  " \n  \n . Maximum number of evaluations, including evaluations taken in the cache \n   (cache hits) \n  \n . Argument: one positive integer \n  \n . An INF value serves to disable the stopping criterion. \n  \n . Example: MAX_EVAL 1000 \n  \n . Default: INF\n\n",  "  advanced stop stops stopping max maximum criterion criterions blackbox blackboxes bb eval evals evaluation evaluations cache  "  , "false" , "true" , "true" },
+{ "MAX_SURROGATE_EVAL_OPTIMIZATION",  "size_t",  "INF",  " Stopping criterion on the number of static surrogate evaluations ",  " \n  \n . Maximum number of static surrogate evaluations \n  \n . Argument: one positive integer \n  \n . An INF value serves to disable the stopping criterion. \n  \n . Does not consider evaluations taken in the cache (cache hits) \n  \n . Only used when EVAL_SURROGATE_OPTIMIZATION is true. \n  \n . Example: MAX_SURROGATE_EVAL_OPTIMIZATION 1000 \n  \n . Default: INF\n\n",  "  basic stop max maximum surrogate  "  , "false" , "false" , "true" },
+{ "MODEL_MAX_BLOCK_SIZE",  "size_t",  "INF",  " Internal parameter for QUAD_MODEL_MAX_BLOCK_SIZE and SGTELIB_MODEL_MAX_BLOCK_SIZE ",  " \n . CANNOT BE MODIFIED BY USER. Internal parameter. \n . Default: INF\n\n",  "  internal  "  , "true" , "true" , "true" },
+{ "MODEL_MAX_EVAL",  "size_t",  "1000",  " Internal parameter for QUAD_MODEL_MAX_EVAL and SGTELIB_MODEL_MAX_EVAL ",  " \n . CANNOT BE MODIFIED BY USER. Internal parameter. \n . Default: 1000\n\n",  "  internal  "  , "false" , "false" , "true" },
+{ "QUAD_MODEL_MAX_BLOCK_SIZE",  "size_t",  "INF",  " Size of blocks of points, to be used for parallel evaluations ",  " \n . Maximum size of a block of evaluations send to the quad model evaluator \n   at once. Opportunistic strategies may apply after each block of evaluations. \n  \n . Depending on the algorithm phase, the quad model will \n   receive at most QUAD_MODEL_MAX_BLOCK_SIZE points to evaluate. \n  \n . When this parameter is greater than one, the number of evaluations \n   may exceed the QUAD_MODEL_MAX_EVAL stopping criterion. \n  \n . Argument: integer > 0 \n  \n . Example: QUAD_MODEL_MAX_BLOCK_SIZE 100 \n            The blackbox executable receives blocks of \n            at most 100 points for evaluation. \n  \n . Default: INF\n\n",  "  advanced block parallel  "  , "true" , "true" , "true" },
+{ "QUAD_MODEL_MAX_EVAL",  "size_t",  "1000",  " Max number of model evaluations for each optimization of the quad model problem ",  " \n . Max number of model evaluations for each optimization of the quad model problem. \n  \n . Argument: one integer > 0 \n  \n . The number of evaluations may exceed this parameter when parameter QUAD_MODEL_MAX_BLOCK_SIZE \n   is greater than one. \n  \n . Example: QUAD_MODEL_MAX_EVAL 5000 \n . Default: 1000\n\n",  "  advanced quad search model model_search  "  , "true" , "true" , "true" },
+{ "SGTELIB_MODEL_MAX_BLOCK_SIZE",  "size_t",  "INF",  " Size of blocks of points, to be used for parallel evaluations ",  " \n . Maximum size of a block of evaluations send to the sgtelib model evaluator \n   at once. Opportunistic strategies may apply after each block of evaluations. \n  \n . Depending on the algorithm phase, the sgtelib will \n   receive at most SGTELIB_MODEL_MAX_BLOCK_SIZE points to evaluate. \n  \n . When this parameter is greater than one, the number of evaluations \n   may exceed the SGTELIB_MODEL_MAX_EVAL stopping criterion. \n  \n . Argument: integer > 0 \n  \n . Example: SGTELIB_MODEL_MAX_BLOCK_SIZE 100 \n            The blackbox executable receives blocks of \n            at most 100 points for evaluation. \n  \n . Default: INF\n\n",  "  advanced block parallel  "  , "true" , "true" , "true" },
+{ "SGTELIB_MODEL_MAX_EVAL",  "size_t",  "1000",  " Max number of model evaluations for each optimization of the sgtelib model problem ",  " \n . Max number of model evaluations for each optimization of the sgtelib model problem. \n  \n . Argument: one integer > 0 \n  \n . The number of evaluations may exceed this parameter when parameter SGTELIB_MODEL_MAX_BLOCK_SIZE \n   is greater than one. \n  \n . Example: SGTELIB_MODEL_MAX_EVAL 5000 \n . Default: 1000\n\n",  "  advanced sgtelib search model model_search  "  , "true" , "true" , "true" },
+{ "TMP_DIR",  "std::string",  "",  " Directory where to put temporary files ",  " \n  \n . Temporary directory for blackbox input/output files \n  \n . Argument: one string indicating a directory \n  \n . Improved performance with a local temporary directory \n  \n . Example: TMP_DIR /tmp \n  \n . Default: Empty string.\n\n",  "  advanced  "  , "false" , "false" , "true" } };
+
+#endif
--- a/src/Attribute/pbAttributesDefinition.hpp
+++ b/src/Attribute/pbAttributesDefinition.hpp
@@ -0,0 +1,22 @@
+//////////// THIS FILE MUST BE CREATED BY EXECUTING WriteAttributeDefinitionFile ////////////
+//////////// DO NOT MODIFY THIS FILE MANUALLY ///////////////////////////////////////////////
+
+#ifndef __NOMAD_4_0_PBATTRIBUTESDEFINITION__
+#define __NOMAD_4_0_PBATTRIBUTESDEFINITION__
+
+_definition = {
+{ "BB_INPUT_TYPE",  "NOMAD::BBInputTypeList",  "* R",  " The variable blackbox input types ",  " \n  \n . Blackbox input types \n  \n . List of types for each variable \n  \n . Available types: \n     . B: binary \n     . I: integer \n     . R: continuous \n  \n . Examples: \n     . BB_INPUT_TYPE * I       # all variables are integers \n     . BB_INPUT_TYPE ( R I B ) # for all 3 variables \n     . BB_INPUT_TYPE 1-3 B     # NOT YET SUPPORTED ( variables 1 to 3 are binary ) \n     . BB_INPUT_TYPE 0 I       # NOT YET SUPPORTED ( first variable is integer ) \n  \n . Default: * R\n\n",  "  basic blackbox blackboxes input inputs type types int integer integers binary bin continuous \n categorical  "  , "false" , "false" , "true" },
+{ "DIMENSION",  "size_t",  "0",  " Dimension of the optimization problem (required) ",  " \n  \n . Number of variables \n  \n . Argument: one positive integer \n  \n . Example: DIMENSION 3 \n  \n . Default: 0\n\n",  "  basic dimension dimensions dim dims problem problems prob pb pbs optimization size  "  , "false" , "false" , "true" },
+{ "FIXED_VARIABLE",  "NOMAD::Point",  "-",  " Fix some variables to some specific values ",  " \n  \n . Fix some variables to some specific values \n  \n . Arguments: variable indexes and values \n  \n . Values for fixed variables are optional. Values of X0 will be used. \n  \n . Examples: \n     . FIXED_VARIABLE ( 0.0 - 0.0 )  # Variables 0 and 2 are fixed to value 0.0. \n                                     # Variable 1 is not fixed. \n  \n     . FIXED_VARIABLE 0              # Variable 0 is fixed to its X0 value. \n     . FIXED_VARIABLE 2-4            # Variables 2, 3 and 4 are fixed \n                                     # to their X0 values. \n . No default value.\n\n",  "  advanced fixed variable variables  "  , "false" , "false" , "true" },
+{ "GRANULARITY",  "NOMAD::ArrayOfDouble",  "-",  " The granularity of the variables ",  " \n  \n . Set the granularity of variables to some specific values \n  \n . Arguments: granularity indexes and values (positive) \n  \n . Examples: \n     . GRANULARITY ( 0.01 0.0 0.01 ) # granularity of variables 0 and 2 are \n                                     # set to 0.01. \n       Variable 1 is real. \n     . GRANULARITY 0-1 0.01          # 2 first variables set granularity to 0.01 \n     . GRANULARITY * 0.01            # all variables set to granularity 0.01 \n  \n . No default value.\n\n",  "  advanced granular integer integers variable variables step  "  , "false" , "false" , "true" },
+{ "INITIAL_FRAME_SIZE",  "NOMAD::ArrayOfDouble",  "-",  " The initial frame size of MADS ",  " \n  \n . Initial frame size \n  \n . Arguments: one or DIMENSION positive real(s) \n  \n . Reinterpreted empty default: \n     10% of the range if bounds are defined, |x0|/10 otherwise \n  \n . NOMAD uses one frame size per variable to achieve scaling \n  \n . The initial mesh size is determined from initial frame size when provided, but \n providing both is not allowed. \n  \n . Examples \n . INITIAL_FRAME_SIZE 1.0          # for all variables \n . INITIAL_FRAME_SIZE 1 0.5        # for variable 1 only \n . INITIAL_FRAME_SIZE 2-4 0.25     # for variable 2 to 4 \n  \n . No default value.\n\n",  "  advanced intial poll frame mesh size mads gmesh  "  , "false" , "false" , "true" },
+{ "INITIAL_MESH_SIZE",  "NOMAD::ArrayOfDouble",  "-",  " The initial mesh size of MADS ",  " \n  \n . Initial mesh size \n  \n . Arguments: one or DIMENSION positive real(s) \n  \n . NOMAD uses one mesh size per variable. \n  \n . Initial frame size is determined from initial mesh size when provided \n  \n . Examples: \n     . INITIAL_MESH_SIZE 1.0          # for all variables \n     . INITIAL_MESH_SIZE 1 0.5        # for variable 1 only \n     . INITIAL_MESH_SIZE 2-4 0.25     # for variables 2 to 4 \n  \n . No default value.\n\n",  "  advanced initial mesh size mads gmesh  "  , "false" , "false" , "true" },
+{ "LOWER_BOUND",  "NOMAD::ArrayOfDouble",  "-",  " The optimization problem lower bounds for each variable ",  " \n  \n . Lower bounds for each variable \n  \n . Arguments: DIMENSION reals \n  \n . Examples: \n     LOWER_BOUND * 0.0   # all variables are nonnegative \n     LOWER_BOUND 0-2 0.0 # the 3 first variables are nonnegative \n     LOWER_BOUND 0 0.0   # the first variable is nonnegative \n  \n . No default value.\n\n",  "  basic bound bounds lower variable variables constraint constraints  "  , "false" , "false" , "true" },
+{ "MIN_FRAME_SIZE",  "NOMAD::ArrayOfDouble",  "-",  " Termination criterion on minimal frame size of MADS ",  " \n  \n . Minimum frame size. Can be set explicitely or automatically to 1 for \n   integer or binary variables (during check). \n  \n . Arguments: same logic as INITIAL_FRAME_SIZE ('r' can be used) \n  \n . Example: MIN_FRAME_SIZE r1E-5 \n  \n . No default value.\n\n",  "  advanced min minimum poll frame size stop stopping terminate terminates \n termination terminations mads  "  , "false" , "false" , "true" },
+{ "MIN_MESH_SIZE",  "NOMAD::ArrayOfDouble",  "-",  " Termination criterion on minimal mesh size of MADS ",  " \n  \n . Minimum mesh size \n  \n . Arguments: same logic as INITIAL_MESH_SIZE ('r' can be used) \n  \n . Example: MIN_MESH_SIZE r1E-5 \n  \n . No default value.\n\n",  "  advanced min minimum frame mesh size stop stopping terminate terminates termination terminations \n mads  "  , "false" , "false" , "true" },
+{ "UPPER_BOUND",  "NOMAD::ArrayOfDouble",  "-",  " The optimization problem upper bounds for each variable ",  " \n  \n . Upper bounds for each variable \n  \n . Arguments: DIMENSION reals \n  \n . Examples: \n     UPPER_BOUND * 10.0   # all variables are less than or equal to 10.0 \n     UPPER_BOUND 0-2 10.0 # the 3 first variables are less than or equal to 10.0 \n     UPPER_BOUND 0 10.0   # the first variable is less than or equal to 10.0 \n  \n . No default value.\n\n",  "  basic bound bounds upper variable variables constraint constraints  "  , "false" , "false" , "true" },
+{ "VARIABLE_GROUP",  "NOMAD::ListOfVariableGroup",  "-",  " The groups of variables) ",  " \n  \n . When defined, Mads poll generates trial points in a separate subspace for \n   each group of variables. \n  \n . Arguments: a list of variable indices or a range of indices \n  \n . More than one group of variables can be defined. Providing a single group of \n   variables puts the remaining indices into another variable group. \n  \n . The indices in the groups of variables must be unique. \n  \n . Examples: \n     . VARIABLE_GROUP 0 1 2 6 \n     . VARIABLE_GROUP 2-6 \n  \n . No default value.\n\n",  "  advanced group groups variable variables var vars poll  "  , "true" , "false" , "false" },
+{ "X0",  "NOMAD::ArrayOfPoint",  "-",  " The initial point(s) ",  " \n  \n . Vector of starting point(s) \n  \n . Arguments: text file name or DIMENSION reals \n  \n . More than one starting point can be defined. All points are evaluated: \n   X0 evaluations are not opportunistic. \n  \n . May be infeasible \n  \n . Cannot be outside bounds \n  \n . Must respect fixed variables (parameter FIXED_VARIABLE) \n  \n . Examples: \n     . X0 x0.txt \n  \n     . X0   * 0.0    # First starting point \n       X0 1 * 1.0    # Second starting point \n  \n     . X0 ( 0 1 2 )  # if DIMENSION = 3 \n  \n . No default value.\n\n",  "  basic initial variable variables var vars init point points bound bounds lower upper cache start starting  "  , "false" , "false" , "false" },
+{ "POINT_FORMAT",  "NOMAD::ArrayOfDouble",  "-",  " Format of the doubles for trial points",  " \n  \n . POINT_FORMAT and BB_EVAL_FORMAT have the same values \n  \n . POINT_FORMAT and BB_EVAL_FORMAT are computed from the BB_INPUT_TYPE parameter. \n  \n . Gives the format precision for doubles of trial points. \n  \n . CANNOT BE MODIFIED BY USER. Internal parameter. \n  \n . No default value.\n\n",  "  internal  "  , "false" , "false" , "true" } };
+
+#endif
--- a/src/Attribute/runAttributesDefinition.hpp
+++ b/src/Attribute/runAttributesDefinition.hpp
@@ -0,0 +1,34 @@
+//////////// THIS FILE MUST BE CREATED BY EXECUTING WriteAttributeDefinitionFile ////////////
+//////////// DO NOT MODIFY THIS FILE MANUALLY ///////////////////////////////////////////////
+
+#ifndef __NOMAD_4_0_RUNATTRIBUTESDEFINITION__
+#define __NOMAD_4_0_RUNATTRIBUTESDEFINITION__
+
+_definition = {
+{ "ADD_SEED_TO_FILE_NAMES",  "bool",  "true",  " The flag to add seed to the file names ",  " \n  \n . If \'yes\', the seed is added to the name of output file provided by STATS_FILE \n  \n . Argument: one boolean (\'yes\' or \'no\') \n  \n . Example: ADD_SEED_TO_FILE_NAMES no \n  \n . Default: true\n\n",  "  advanced seed seeds random number run stat stats file history solution solutions  "  , "false" , "false" , "true" },
+{ "ANISOTROPIC_MESH",  "bool",  "true",  " MADS uses anisotropic mesh for generating directions ",  " \n  \n . MADS uses anisotropic mesh for generating directions \n  \n . Argument: one boolean ('yes' or 'no') \n  \n . Example: ANISOTROPIC_MESH no \n  \n . Default: true\n\n",  "  advanced mads direction directions anisotropic anisotropy aniso  "  , "true" , "true" , "true" },
+{ "ANISOTROPY_FACTOR",  "NOMAD::Double",  "0.1",  " MADS anisotropy factor for mesh size change ",  " \n  \n . Set anisotropy_factor for mesh relative coarsening/refining if the anisotropic \n   mesh is enabled. \n  \n . Argument: one positive real \n  \n . Example: ANISOTROPY_FACTOR 0.05 \n  \n . Default: 0.1\n\n",  "  advanced mads direction directions anisotropic anisotropy aniso  "  , "true" , "true" , "true" },
+{ "DIRECTION_TYPE",  "NOMAD::DirectionTypeList",  "ORTHO 2N",  " Direction types for Mads Poll step ",  " \n . Direction types used by Mads Poll step to generate trial points. \n  \n . Several direction types can be defined (one direction type per line). \n  \n . Arguments: direction type in: \n     ORTHO 2N      : OrthoMADS, 2n \n     ORTHO N+1 NEG : OrthoMADS, n+1, with ((n+1)th dir = negative sum of the first n dirs) \n     N+1 UNI       : MADS with n+1, uniform distribution of dirs \n     SINGLE        : Single direction \n     DOUBLE        : Two opposite directions \n  \n . Examples: \n     . DIRECTION_TYPE N+1 UNI \n     . DIRECTION_TYPE ORTHO 2N \n     . DIRECTION_TYPE DOUBLE \n  \n . Default: ORTHO 2N\n\n",  "  advanced poll direction ortho  "  , "true" , "false" , "false" },
+{ "DIRECTION_TYPE_SECONDARY_POLL",  "NOMAD::DirectionTypeList",  "DOUBLE",  " Direction types for Mads secondary poll ",  " \n . Direction types for the secondary poll \n  \n . Several direction types can be defined (one direction type per line). \n  \n . Arguments: same as DIRECTION_TYPE \n  \n . If DIRECTION_TYPE is ORTHO 2N or ORTHO N+1 NEG is defined, then the default \n   value for DIRECTION_TYPE_SECONDARY_POLL is DOUBLE. Otherwise, it is SINGLE. \n  \n . Examples: \n     . DIRECTION_TYPE_SECONDARY_POLL ORTHO 2N \n     . DIRECTION_TYPE_SECONDARY_POLL SINGLE \n  \n . See also: DIRECTION_TYPE RHO \n  \n . Default: DOUBLE\n\n",  "  advanced poll direction primary secondary  "  , "true" , "false" , "false" },
+{ "FRAME_CENTER_USE_CACHE",  "bool",  "false",  " Find best points in the cache and use them as frame centers ",  " \n . When this parameter is true, when the Update step occurs, the points with \n   the best values are found in the Cache. Multiple points may have the same \n   value. These points are all used as frame centers for the next Search and \n   Poll steps. \n  \n . When this parameter is false, the frame centers (one feasible and one \n   infeasible) are kept from previous iterations. This is the classical \n   MADS algorithm. \n  \n . Default: false\n\n",  "  advanced  "  , "true" , "true" , "true" },
+{ "H_MAX_0",  "NOMAD::Double",  "NOMAD::INF",  " Initial value of hMax. ",  " \n . Initial value of hMax. Used for progressive barrier (PB) constraints. \n  \n . Argument: one positive real. \n  \n . Points x such that h(x) > hMax are rejected. h measures the feasibility, or \n   how much the constraints are violated. \n  \n . Example: H_MAX_0 100.0 \n  \n . Default: NOMAD::INF\n\n",  "  advanced hmax h_max constraint constraints pb feasibility progressive barrier  "  , "true" , "false" , "true" },
+{ "HOT_RESTART_FILE",  "std::string",  "hotrestart.txt",  " The name of the hot restart file ",  " \n  \n . Name of the file where the information about hot restart is kept. \n  \n  \n . Default: hotrestart.txt\n\n",  "  advanced hot restart file files file interrupt  "  , "false" , "false" , "true" },
+{ "HOT_RESTART_ON_USER_INTERRUPT",  "bool",  "false",  " Flag to perform a hot restart on user interrupt ",  " \n  \n . If true, when NOMAD runs and the user does an interruption (CTRL+C), \n   then the parameters can be modified. Upon pressing CTRL+D, the resolution \n   continues where it was stopped, using the modified parameters. \n  \n . If false, when NOMAD runs and the user does an interruption (CTRL+C), \n   the resolution ends. \n  \n . Default: false\n\n",  "  advanced hot restart file files interrupt  "  , "false" , "false" , "true" },
+{ "HOT_RESTART_READ_FILES",  "bool",  "false",  " Flag to read hot restart files ",  " \n  \n . If true, the hot restart files (hotRestart.txt and CACHE_FILE) are read \n   when NOMAD is started. If NOMAD is ran twice, the second run starts from \n   where the first run ended. \n  \n . If false, the hot restart files are ignored when NOMAD is started. Two runs \n   in a row will start from the same configuration. \n  \n . See also: HOT_RESTART_WRITE_FILES, CACHE_FILE \n  \n . Default: false\n\n",  "  advanced hot restart file files interrupt  "  , "false" , "false" , "true" },
+{ "HOT_RESTART_WRITE_FILES",  "bool",  "false",  " Flag to write hot restart files ",  " \n  \n . If true, when NOMAD ends, write the hot restart files (hotRestart.txt and \n   CACHE_FILE). \n  \n . See also: HOT_RESTART_READ_FILES, CACHE_FILE \n  \n . Default: false\n\n",  "  advanced hot restart file files interrupt  "  , "false" , "false" , "true" },
+{ "MAX_ITERATIONS",  "size_t",  "INF",  " The maximum number of iterations of the MADS algorithm ",  " \n  \n . Maximum number of iterations \n  \n . Argument: one positive integer. INF means there is no maximum. \n  \n . Example: MAX_ITERATIONS 1000 \n  \n . Default: INF\n\n",  "  advanced max maximum iteration iterations stop stops stopping criterion criterions  "  , "true" , "true" , "true" },
+{ "MAX_ITERATION_PER_MEGAITERATION",  "size_t",  "INF",  " Maximum number of Iterations to generate for each MegaIteration. ",  " \n . Maximum number of Iterations to generate for each MegaIteration. \n  \n . Argument: one positive integer. INF means there is no maximum. \n  \n . If there are few points in the barrier, this parameter has no effect. \n  \n . If FRAME_CENTER_USE_CACHE is false, this parameter has no effect. \n  \n . If there are many points in the barrier, this parameter limits \n   the number of iterations generated. \n   A mixture of feasible and infeasible points of the barrier is used to \n   generate iterations. \n   Each iteration uses a point of the barrier as frame center. \n  \n . Default: INF\n\n",  "  advanced  "  , "true" , "true" , "true" },
+{ "MAX_TIME",  "size_t",  "INF",  " Maximum wall-clock time in seconds ",  " \n . Argument: one positive integer. INF means there is no maximum. \n  \n . Example: MAX_TIME 3600 # one hour max \n  \n . Default: INF\n\n",  "  basic clock stop time  "  , "false" , "true" , "true" },
+{ "MEGA_SEARCH_POLL",  "bool",  "false",  " Evaluate points generated from Search and Poll steps all at once ",  " \n . If true, generate all points from Search and Poll steps, and then \n   start evaluation. This method is preferred when multiple processes \n   are available in parallel to evaluate points. This way, more processes \n   will work on evaluating points simultaneously. \n  \n . If false, generate points from Search, evaluate them, and then continue \n   to Poll, or to next Search. This is the classic way of evaluation. \n   If multiple processes are available for evaluation, and the Search step \n   generated a single point, only that point is evaluated while the other \n   processes do nothing. \n  \n . Default: false\n\n",  "  advanced  "  , "true" , "true" , "true" },
+{ "NB_THREADS_OPENMP",  "int",  "-1",  " The number of threads when OpenMP parallel evaluations \n are enabled ",  " \n  \n . Set the number of threads to be used by OpenMP. \n  \n . Argument: One positive integer, or -1. A value of -1 means OpenMP decides \n   by itself. \n  \n . Example: NB_THREADS_OPENMP 8 \n  \n . Default: -1\n\n",  "  advanced thread threads openmp parallel eval evals evaluation evaluations  "  , "true" , "false" , "true" },
+{ "REJECT_UNKNOWN_PARAMETERS",  "bool",  "false",  " Flag to reject unknown parameters when checking validity of parameters ",  " \n  \n . If true, when reading a parameters file, NOMAD will ignore unknown parameters. \n  \n . If false, when reading a parameters file, NOMAD will exit if unknown \n   parameters are present. \n  \n . Default: false\n\n",  "  advanced valid param params parameter parameters ignore  "  , "false" , "false" , "true" },
+{ "RHO",  "NOMAD::Double",  "0.1",  " Rho parameter of the progressive barrier ",  " \n . Used to choose if the primary frame center is the feasible or infeasible \n   incumbent. \n  \n . Argument: real \n  \n . If the value is negative, both feasible and infeasible incumbents are \n   treated as primary poll centers. \n  \n . Example: RHO 0.5 \n . Default: 0.1\n\n",  "  advanced primary secondary  "  , "true" , "false" , "true" },
+{ "SEED",  "int",  "0",  " The seed for the pseudo-random number generator ",  " \n  \n . Random seed \n  \n . Argument: one nonnegative integer (max UINT32_MAX) \n  \n . The default value is used for each run if the parameter is not provided. \n  \n . The seed is used in the output file names \n  \n . Example: SEED 123456 \n  \n . Default: 0\n\n",  "  advanced seed seeds random number run  "  , "true" , "true" , "true" },
+{ "SPECULATIVE_SEARCH",  "bool",  "true",  " MADS speculative search method ",  " \n  \n . MADS speculative search (optimistic strategy) \n  \n . Argument: one boolean ('yes' or 'no') \n  \n . Example: SPECULATIVE_SEARCH no \n  \n . Default: true\n\n",  "  basic mads search speculative  "  , "true" , "true" , "true" },
+{ "SPECULATIVE_SEARCH_BASE_FACTOR",  "NOMAD::Double",  "4.0",  " Distance of the MADS speculative search method ",  " \n  \n . The MADS speculative search creates a point in a direction of success from the \n   best incumbent(s). The distance depends on the frame size, the number of search \n   points to be generated and a base factor (>1). \n  \n . Argument: one NOMAD::Double strictly greater than 1. \n  \n . Example: SPECULATIVE_SEARCH_BASE_FACTOR 3.0 \n  \n . Default: 4.0\n\n",  "  advanced mads search speculative  "  , "true" , "true" , "true" },
+{ "SPECULATIVE_SEARCH_MAX",  "size_t",  "1",  " MADS speculative search method ",  " \n  \n . Number of points to generate using the MADS speculative search (optimistic \n   strategy) \n  \n . Argument: one positive integer \n  \n . Example: SPECULATIVE_SEARCH_MAX 2 \n  \n . Default: 1\n\n",  "  advanced mads search speculative  "  , "true" , "true" , "true" },
+{ "STOP_IF_FEASIBLE",  "bool",  "false",  " Stop algorithm once a feasible point is obtained ",  " \n  \n . Stopping criterion on feasibility. \n  \n . Argument: boolean. \n  \n . Example: \n     . STOP_IF_FEASIBLE true. \n  \n . Default: false\n\n",  "  advanced stopping terminate terminates termination terminations  "  , "false" , "false" , "true" },
+{ "STOP_IF_PHASE_ONE_SOLUTION",  "bool",  "false",  " Stop algorithm once a phase one solution is obtained ",  " \n  \n . Stopping criterion on feasibility. Used by the Phase One algorithm \n   to obtain a feasible point when EB (Extreme Barrier) constraints \n   are set and the starting point is infeasible. \n  \n . A Phase One solution is a point for which the EB constraints are \n   satisfied. Any PB (Progressive Barrier) constraints are ignored. \n  \n . Argument: boolean. \n  \n . Example: \n     . STOP_IF_PHASE_ONE_SOLUTION true. \n  \n . Default: false\n\n",  "  advanced stopping terminate terminates termination terminations phase one   "  , "false" , "false" , "true" },
+{ "USER_CALLS_ENABLED",  "bool",  "true",  " Controls the automatic calls to user function ",  " \n . If true the user functions are called (update_iteration, ...) \n  \n . Default: true\n\n",  "  advanced user users callback function functions  "  , "false" , "true" , "true" } };
+
+#endif
--- a/src/Attribute/runAttributesDefinitionLH.hpp
+++ b/src/Attribute/runAttributesDefinitionLH.hpp
@@ -0,0 +1,11 @@
+//////////// THIS FILE MUST BE CREATED BY EXECUTING WriteAttributeDefinitionFile ////////////
+//////////// DO NOT MODIFY THIS FILE MANUALLY ///////////////////////////////////////////////
+
+#ifndef __NOMAD_4_0_RUNATTRIBUTESDEFINITIONLH__
+#define __NOMAD_4_0_RUNATTRIBUTESDEFINITIONLH__
+
+_definition = {
+{ "LH_EVAL",  "size_t",  "0",  " Latin Hypercube Sampling of points (no optimization) ",  " \n  \n . Latin-Hypercube sampling (evaluations) \n  \n . Argument: A positive integer p < INF \n  \n . p: number of LH points \n  \n . All points will be evaluated (no opportunism). This options will deactivate \n   any optimization strategy. \n  \n . The LH sampling requires to have both lower and upper bounds defined. \n  \n . Example: LH_EVAL 100 \n  \n . Default: 0\n\n",  "  basic latin hypercube sampling  "  , "true" , "true" , "true" },
+{ "LH_SEARCH",  "NOMAD::LHSearchType",  "-",  " Latin Hypercube Sampling Search method ",  " \n  \n . Latin-Hypercube sampling (search) \n  \n . Arguments: two size_t p0 and pi \n  \n . p0: number of initial LH search points \n  \n . pi: LH search points at each iteration \n  \n . The search can be opportunistic or not \n   (parameter EVAL_OPPORTUNISTIC) \n  \n . Example: LH_SEARCH 100 0 \n  \n . No default value.\n\n",  "  basic search latin hypercube sampling  "  , "true" , "true" , "true" } };
+
+#endif
--- a/src/Attribute/runAttributesDefinitionNM.hpp
+++ b/src/Attribute/runAttributesDefinitionNM.hpp
@@ -0,0 +1,20 @@
+//////////// THIS FILE MUST BE CREATED BY EXECUTING WriteAttributeDefinitionFile ////////////
+//////////// DO NOT MODIFY THIS FILE MANUALLY ///////////////////////////////////////////////
+
+#ifndef __NOMAD_4_0_RUNATTRIBUTESDEFINITIONNM__
+#define __NOMAD_4_0_RUNATTRIBUTESDEFINITIONNM__
+
+_definition = {
+{ "NM_OPTIMIZATION",  "bool",  "false",  " Nelder Mead stand alone optimization for constrained and unconstrained pbs ",  " \n  \n . Nelder Mead optimization for constrained and unconstrained optimization \n  \n . Argument: bool \n  \n . Stand alone Nelder Mead optimization will deactivate any optimization strategy. \n  \n . Example: NM_OPTIMIZATION true \n  \n . Default: false\n\n",  "  advanced nelder mead simplex  "  , "true" , "false" , "true" },
+{ "NM_SEARCH",  "bool",  "true",  " Nelder Mead optimization used as a search step for Mads ",  " \n  \n . Nelder Mead optimization as a search step for Mads \n  \n . Argument: bool \n  \n . Example: NM_SEARCH false \n  \n . Default: true\n\n",  "  advanced nelder mead simplex mads search "  , "true" , "true" , "true" },
+{ "NM_SIMPLEX_INCLUDE_LENGTH",  "NOMAD::Double",  "INF",  " Construct NM simplex using points in cache.",  " \n  \n . Construct NM simplex using points in cache within a given distance of poll \n   center in absolute value. See also NM_SIMPLEX_INCLUDE_FACTOR. \n  \n . Argument: Positive double. INF means all points are considered. \n  \n . Example: NM_SIMPLEX_INCLUDE_LENGTH 0.2 \n  \n . Default: INF\n\n",  "  advanced nelder mead simplex length "  , "true" , "true" , "true" },
+{ "NM_SIMPLEX_INCLUDE_FACTOR",  "size_t",  "8",  " Construct NM simplex using points in cache.",  " \n  \n . Construct NM simplex using points in cache within a given length of frame center \n   relative. The length equals the include factor multiplied by the frame size. \n   Used only if the mesh is defined. See also NM_SIMPLEX_INCLUDE_LENGTH. \n  \n . Argument: Positive integer. INF means all points are considered. \n  \n . Example: NM_SIMPLEX_INCLUDE_FACTOR 10 \n  \n . Default: 8\n\n",  "  advanced nelder mead simplex include factor length poll  "  , "true" , "true" , "true" },
+{ "NM_DELTA_E",  "NOMAD::Double",  "2",  " NM expansion parameter delta_e.",  " \n  \n . Nelder Mead expansion parameter \n  \n . Argument: Positive NOMAD::Double > 1 \n  \n . Example: NM_DELTA_E 2.5 \n  \n . Default: 2\n\n",  "  advanced nelder mead simplex expansion  "  , "true" , "true" , "true" },
+{ "NM_DELTA_IC",  "NOMAD::Double",  "-0.5",  " NM inside contraction parameter delta_ic.",  " \n  \n . Nelder Mead inside contraction parameter \n  \n . Argument: Negative NOMAD::Double \n  \n . Example: NM_DELTA_IC -1 \n  \n . Default: -0.5\n\n",  "  advanced nelder mead simplex inside contraction  "  , "true" , "true" , "true" },
+{ "NM_DELTA_OC",  "NOMAD::Double",  "0.5",  " NM outside contraction parameter delta_oc.",  " \n  \n . Nelder Mead outside contraction parameter \n  \n . Argument: Positive NOMAD::Double <= 1 \n  \n . Example: NM_DELTA_OC 0.8 \n  \n . Default: 0.5\n\n",  "  advanced nelder mead simplex outside contraction  "  , "true" , "true" , "true" },
+{ "NM_GAMMA",  "NOMAD::Double",  "0.5",  " NM shrink parameter gamma.",  " \n  \n . Nelder Mead shrink parameter \n  \n . Argument: Positive NOMAD::Double <= 1 \n  \n . Example: NM_GAMMA 0.8 \n  \n . Default: 0.5\n\n",  "  advanced nelder mead simplex shrink  "  , "true" , "true" , "true" },
+{ "NM_SEARCH_MAX_TRIAL_PTS_NFACTOR",  "size_t",  "80",  " NM-Mads search stopping criterion.",  " \n  \n . NM-Mads stopping criterion. Max number of trial pts < dimension * NFactor \n  \n . Argument: Positive integer. INF disables this criterion. \n  \n . Example: NM_SEARCH_MAX_TRIAL_PTS_NFACTOR 100 \n  \n . Default: 80\n\n",  "  advanced nelder mead mads search stop trial  "  , "true" , "true" , "true" },
+{ "NM_SEARCH_RANK_EPS",  "NOMAD::Double",  "0.01",  " NM-Mads epsilon for the rank of DZ.",  " \n  \n . Precision to detect when a vector increases the rank or not. \n  \n . Argument: Positive double. \n  \n . Example: NM_SEARCH_RANK_EPS 1E-4 \n  \n . Default: 0.01\n\n",  "  advanced nelder mead mads search rank DZ  "  , "true" , "true" , "true" },
+{ "NM_SEARCH_STOP_ON_SUCCESS",  "bool",  "false",  " NM-Mads search stops on success.",  " \n  \n . NM-Mads search opportunistically stops on success. \n  \n . Argument: boolean. \n  \n . Example: NM_SEARCH_STOP_ON_SUCCESS false \n  \n . Default: false\n\n",  "  advanced nelder mead mads search opportunistic success  "  , "true" , "true" , "true" } };
+
+#endif
--- a/src/Attribute/runAttributesDefinitionPSDSSD.hpp
+++ b/src/Attribute/runAttributesDefinitionPSDSSD.hpp
@@ -0,0 +1,20 @@
+//////////// THIS FILE MUST BE CREATED BY EXECUTING WriteAttributeDefinitionFile ////////////
+//////////// DO NOT MODIFY THIS FILE MANUALLY ///////////////////////////////////////////////
+
+#ifndef __NOMAD_4_0_RUNATTRIBUTESDEFINITIONPSDSSD__
+#define __NOMAD_4_0_RUNATTRIBUTESDEFINITIONPSDSSD__
+
+_definition = {
+{ "PSD_MADS_OPTIMIZATION",  "bool",  "0",  " PSD-MADS optimization algorithm ",  " \n  \n . Use PSD-MADS algorithm. \n  \n . Argument: bool \n  \n . Description: Parallel Space Decomposition with Mads (no parallelism) \n  \n . This option deactivates any other optimization strategy. \n  \n . Example: PSD_MADS_OPTIMIZATION true \n  \n . Default: 0\n\n",  "  advanced psd mads parallel decomposition  "  , "true" , "false" , "true" },
+{ "PSD_MADS_NB_VAR_IN_SUBPROBLEM",  "size_t",  "2",  " Number of variables in PSD-MADS subproblems ",  " \n  \n . When using Parallel Space Decomposition (PSD) MADS algorithm, select the \n   number of variables in Mads subproblems. \n  \n . Argument: size_t \n  \n . Description: Size of subproblems in PSD-Mads. \n  \n . This attribute is used only when PSD-Mads optimization is active. \n  \n . Example: PSD_MADS_NB_VAR_IN_SUBPROBLEM 3 \n  \n . Default: 2\n\n",  "  advanced psd mads parallel decomposition subproblem  "  , "true" , "false" , "true" },
+{ "PSD_MADS_NB_SUBPROBLEM",  "size_t",  "INF",  " Number of PSD-MADS subproblems ",  " \n  \n . When using Parallel Space Decomposition (PSD) MADS algorithm, select the number of \n   Mads subproblems. By default (INF), the number of subproblems is adjusted to \n   cover all variables. \n  \n . Argument: size_t \n  \n . This attribute is used only when PSD-Mads optimization is active. \n  \n . Example: PSD_MADS_NB_SUBPROBLEM 2 \n  \n . Default: INF\n\n",  "  advanced psd mads parallel decomposition subproblem  "  , "true" , "false" , "true" },
+{ "PSD_MADS_ITER_OPPORTUNISTIC",  "bool",  "true",  " Opportunistic strategy between the Mads subproblems in PSD-MADS ",  " \n  \n . When using Parallel Space Decomposition (PSD) MADS algorithm, the launch \n   of Mads subproblems during an iteration can be opportunistically stopped when \n   a success is obtained by a Mads subproblem. \n  \n . Argument: bool \n  \n . This attribute is used only when PSD-Mads optimization is active. \n  \n . Example: PSD_MADS_OPPORTUNISTIC false \n  \n . Default: true\n\n",  "  advanced parallel space mads parallel decomposition subproblem opportunistic  "  , "true" , "false" , "true" },
+{ "PSD_MADS_ORIGINAL",  "bool",  "false",  " Use NOMAD 3 strategy for mesh update in PSD-MADS ",  " \n  \n . When using Parallel Space Decomposition (PSD) MADS algorithm, \n   NOMAD 3 strategy is to always update the mesh whenever a new pollster is launched. \n   NOMAD 4 strategy is more defined as for which conditions must be met for \n   the mesh to be updated. \n  \n . Argument: bool \n  \n . This attribute is used only when PSD-Mads optimization is active. \n  \n . Example: PSD_MADS_ORIGINAL false \n  \n . Default: false\n\n",  "  advanced parallel space mads parallel decomposition subproblem original  "  , "true" , "false" , "true" },
+{ "PSD_MADS_SUBPROBLEM_PERCENT_COVERAGE",  "NOMAD::Double",  "70",  " Percentage of variables that must be covered in subproblems before updating mesh ",  " \n  \n . When using Parallel Space Decomposition (PSD) MADS algorithm, \n   update (enlarge or refine) the mesh when this percentage of variables is \n   covered by subproblems. \n  \n . A lower value makes for more frequent updates. A larger value makes \n   mesh updates less frequent. \n  \n . Argument: Double between 0 and 100 \n  \n . This attribute is used only when PSD-Mads optimization is active. \n  \n . Example: PSD_MADS_SUBPROBLEM_PERCENT_COVERAGE 80 \n  \n . Default: 70\n\n",  "  advanced parallel space mads parallel subproblem  "  , "true" , "false" , "true" },
+{ "SSD_MADS_OPTIMIZATION",  "bool",  "0",  " SSD-MADS optimization algorithm ",  " \n  \n . Use SSD-MADS algorithm. \n  \n . Argument: bool \n  \n . Description: Sequential Space Decomposition with Mads (no parallelism) \n  \n . This option deactivates any other optimization strategy. \n  \n . Example: SSD_MADS_OPTIMIZATION true \n  \n . Default: 0\n\n",  "  advanced ssd mads sequential decomposition  "  , "true" , "false" , "true" },
+{ "SSD_MADS_NB_VAR_IN_SUBPROBLEM",  "size_t",  "2",  " Number of variables in SSD-MADS subproblems ",  " \n  \n . When using Sequential Space Decomposition (SSD) MADS algorithm, select the \n   number of variables in Mads subproblems. \n  \n . Argument: size_t \n  \n . Description: Size of subproblems in SSD-Mads. \n  \n . This attribute is used only when SSD-Mads optimization is active. \n  \n . Example: SSD_MADS_NB_VAR_IN_SUBPROBLEM 3 \n  \n . Default: 2\n\n",  "  advanced ssd mads sequential decomposition subproblem  "  , "true" , "false" , "true" },
+{ "SSD_MADS_NB_SUBPROBLEM",  "size_t",  "INF",  " Number of SSD-MADS subproblems ",  " \n  \n . When using Sequential Space Decomposition (SSD) MADS algorithm, select the number of \n   Mads subproblems. By default (INF), the number of subproblems is adjusted to \n   cover all variables. \n  \n . Argument: size_t \n  \n . This attribute is used only when SSD-Mads optimization is active. \n  \n . Example: SSD_MADS_NB_SUBPROBLEM 2 \n  \n . Default: INF\n\n",  "  advanced ssd mads sequential decomposition subproblem  "  , "true" , "false" , "true" },
+{ "SSD_MADS_RESET_VAR_PICKUP_SUBPROBLEM",  "bool",  "false",  " Reset random variable pick-up for each subproblem ",  " \n  \n . Argument: bool \n  \n . This attribute is used only when SSD-Mads optimization is active. \n  \n . Example: SSD_MADS_RESET_VAR_PICKUP_SUBPROBLEM true \n  \n . Default: false\n\n",  "  advanced ssd mads sequential decomposition subproblem  "  , "true" , "false" , "true" },
+{ "SSD_MADS_ITER_OPPORTUNISTIC",  "bool",  "true",  " Opportunistic strategy between the Mads subproblems in SSD-MADS ",  " \n  \n . When using Sequential Space Decomposition (SSD) MADS algorithm, the sequence \n   of Mads subproblems during an iteration can be opportunistically stopped when \n   a success is obtained by a Mads subproblem. \n  \n . Argument: bool \n  \n . This attribute is used only when SSD-Mads optimization is active. \n  \n . Example: SSD_MADS_OPPORTUNISTIC false \n  \n . Default: true\n\n",  "  advanced sequential space ssd mads decomposition subproblem opportunistic  "  , "true" , "false" , "true" } };
+
+#endif
--- a/src/Attribute/runAttributesDefinitionQuadModel.hpp
+++ b/src/Attribute/runAttributesDefinitionQuadModel.hpp
@@ -0,0 +1,14 @@
+//////////// THIS FILE MUST BE CREATED BY EXECUTING WriteAttributeDefinitionFile ////////////
+//////////// DO NOT MODIFY THIS FILE MANUALLY ///////////////////////////////////////////////
+
+#ifndef __NOMAD_4_0_RUNATTRIBUTESDEFINITIONQUADMODEL__
+#define __NOMAD_4_0_RUNATTRIBUTESDEFINITIONQUADMODEL__
+
+_definition = {
+{ "QUAD_MODEL_SEARCH",  "bool",  "true",  " Quad model search ",  " \n  \n . MADS model search, using Bastien Talgorn's Sgtelib with quad models \n  \n . Argument: one boolean ('yes' or 'no') \n  \n . Disabled for more than 50 variables \n  \n . Example: QUAD_MODEL_SEARCH yes \n  \n . Default: true\n\n",  "  basic mads quad model search model_search  "  , "true" , "true" , "true" },
+{ "QUAD_MODEL_SEARCH_BOUND_REDUCTION_FACTOR",  "NOMAD::Double",  "1",  " Scale the bounds for the quad model search  ",  " \n  \n . The quad model is built on evaluation points around a frame center. This \n defines min and max bounds, from which we define a model center. The model \n search is limited to tighter (can be wider with the parameter set to less than 1) \n bounds by reducing the distance of the optimization bounds to the model center. \n We use a reduction factor for that. If the reduction factor equals one, the min \n and max bounds are used as optimization bounds for the search. The greater the \n reduction factor, the tighter the bounds. \n  \n . Argument: one Double greater than 0 \n  \n . Example: QUAD_MODEL_SEARCH_BOUND_REDUCTION_FACTOR 3.0 \n  \n . Default: 1\n\n",  "  develop mads quad model search sgtelib model_search bounds  "  , "true" , "true" , "true" },
+{ "QUAD_MODEL_DISPLAY",  "std::string",  "",  " Display of a model ",  " \n . Control the display of the quad model search and quad model optimization. \n   These details are only shown if DISPLAY_DEGREE is FULL (3) or more. \n  \n . Arguments: a string containing one or several of the following letters \n  \n . \"S\": General information on the model search or optimization \n  \n . \"F\": Details of the filter step \n  \n . \"O\": Details of the models optimization \n  \n . \"P\": Details of the projection \n  \n . \"U\": Details of the model update \n  \n . \"I\": Advancement of the model optimization \n  \n . \"X\": Display of all of the model evaluations \n  \n . Example: QUAD_MODEL_DISPLAY SPF # display the general information on the search \n                                        and on the filter and projection steps \n . Default: Empty string.\n\n",  "  developer advanced model quad sgtelib  "  , "false" , "false" , "true" },
+{ "QUAD_MODEL_OPTIMIZATION",  "bool",  "false",  " Quad model stand alone optimization for constrained and unconstrained pbs ",  " \n  \n . Quadratic model optimization for constrained and unconstrained \n   optimization \n  \n . Argument: bool \n  \n . Stand alone quadratic model optimization will deactivate any optimization \n   strategy. \n  \n . Example: QUAD_MODEL_OPTIMIZATION true \n  \n . Default: false\n\n",  "  advanced sgtelib quadratic quad optimization simplex  "  , "true" , "false" , "true" },
+{ "QUAD_MODEL_RADIUS_FACTOR",  "NOMAD::Double",  "2.0",  " Quadratic model radius factor ",  " \n . Quadratic model radius factor \n  \n . This parameter is used to select points to build the quadratic model \n  \n . Frame size is multiplied by this factor to get the search radius \n  \n . Points inside a circle centered on the poll center, within this radius, \n   are selected to build the quadratic model \n  \n . Arguments: one strictly positive real \n  \n . Example: QUAD_MODEL_RADIUS_FACTOR 1.0 \n . Default: 2.0\n\n",  "  developer quadratic model radius  "  , "true" , "true" , "true" } };
+
+#endif
--- a/src/Attribute/runAttributesDefinitionSgtelibModel.hpp
+++ b/src/Attribute/runAttributesDefinitionSgtelibModel.hpp
@@ -0,0 +1,23 @@
+//////////// THIS FILE MUST BE CREATED BY EXECUTING WriteAttributeDefinitionFile ////////////
+//////////// DO NOT MODIFY THIS FILE MANUALLY ///////////////////////////////////////////////
+
+#ifndef __NOMAD_4_0_RUNATTRIBUTESDEFINITIONSGTELIBMODEL__
+#define __NOMAD_4_0_RUNATTRIBUTESDEFINITIONSGTELIBMODEL__
+
+_definition = {
+{ "SGTELIB_MODEL_EVAL",  "bool",  "0",  " Sgtelib Model Sampling of points ",  " \n  \n . Sgtelib Model sampling \n  \n . Argument: bool \n  \n . Best points are taken from the cache \n  \n . A model is computed \n  \n . The most promising points according to that model are evaluated \n  \n . No opportunism \n  \n . This option deactivates other optimization strategies. \n  \n . Example: SGTELIB_MODEL_EVAL true \n  \n . Default: 0\n\n",  "  advanced sgtelib model sampling  "  , "true" , "false" , "true" },
+{ "SGTELIB_MODEL_SEARCH",  "bool",  "false",  " Model search using Sgtelib ",  " \n  \n . MADS model search, using Bastien Talgorn's Sgtelib using a model definition \n  \n . Argument: one boolean ('yes' or 'no') \n  \n . Disabled for more than 50 variables \n  \n . See SGTELIB_MODEL_DEFINITION for the definition of the model \n  \n . Example: SGTELIB_MODEL_SEARCH yes \n  \n . Default: false\n\n",  "  basic mads model search sgtelib  "  , "true" , "true" , "true" },
+{ "SGTELIB_MODEL_DISPLAY",  "std::string",  "",  " Display of a model ",  " \n . Control the display of the sgtelib model search and sgtelib model optimization. \n   These details are only shown if DISPLAY_DEGREE is FULL (3) or more. \n  \n . Arguments: a string containing one or several of the following letters \n  \n . \"S\": General information on the model search or optimization \n  \n . \"F\": Details of the filter step \n  \n . \"O\": Details of the models optimization \n  \n . \"P\": Details of the projection \n  \n . \"U\": Details of the model update \n  \n . \"I\": Advancement of the model optimization \n  \n . \"X\": Display of all of the model evaluations \n  \n . Example: SGTELIB_MODEL_DISPLAY SPF # display the general information on the search \n                                        and on the filter and projection steps \n . Default: Empty string.\n\n",  "  developer advanced model quad sgtelib  "  , "false" , "false" , "true" },
+{ "SGTELIB_MODEL_DEFINITION",  "NOMAD::ArrayOfString",  "",  " Definition of the Sgtelib model ",  " \n . Argument: Array of string that represent the Sgtelib model definition. See sgtelib manual. \n  \n . See SGTELIB_MODEL_SEARCH or SGTELIB_MODEL_EVAL to enable model use. \n  \n . Example: TYPE PRS DEGREE 1 # builds a linear model \n .          TYPE PRS DEGREE 2 # builds a quadratic model \n .          TYPE RBF          # builds an RBF model \n .          TYPE ENSEMBLE     # builds an ensemble of models \n            # builds a lowess model with local linear regression \n            # and optimized kernel shape: \n .          TYPE LOWESS DEGREE 1 KERNEL_COEF OPTIM \n .          # Variation that gives good results: \n            TYPE LOWESS DEGREE 1 KERNEL_SHAPE OPTIM KERNEL_COEF OPTIM RIDGE 0 METRIC AOECV \n . Default: Empty string.\n\n",  "  advanced sgtelib search model model_search interpolation regression  "  , "true" , "true" , "true" },
+{ "SGTELIB_MODEL_SEARCH_TRIALS",  "size_t",  "1",  " Max number of sgtelib model search failures before going to the poll step ",  " \n . Max number of sgtelib model search failures before going to the poll step. \n  \n . Argument: one positive integer \n  \n . Note: The minimum between this parameter and MAX_ITERATION_PER_MEGAITERATION \n   will be used. \n  \n . Example: SGTELIB_MODEL_SEARCH_TRIALS 5 \n . Default: 1\n\n",  "  developer trials sgtelib model search  "  , "true" , "true" , "true" },
+{ "SGTELIB_MODEL_FORMULATION",  "NOMAD::SgtelibModelFormulationType",  "FS",  " Formulation of the sgtelib model problem ",  " \n . Formulation of the sgtelib model problem. \n  \n . Argument: one string in {'FS', 'EIS', 'FSP', \n                            'EFI', 'EFIS','EFIM','EFIC', \n                            'PFI', \n                            'D', \n                            'EXTERN'} \n  \n . Description of the sgtelib problem formulations : \n     (FS)   min f    -d.sigma_f \n            st  c_j  -d.sigma_j <= 0 \n  \n     (EIS)  min -EI  -d.sigma_f \n            st  c_j  -d.sigma_j <= 0 \n  \n     (FSP)  min f    -d.sigma_f \n            st  P >= 1/2 \n  \n     (EFI)  min -EFI \n  \n     (EFIS) min -EFI -d.sigma_f \n  \n     (EFIM) min -EFI -d.sigma_f.mu \n  \n     (EFIM) min -EFI -d.(EI.mu+P.sigma_f) \n  \n     (PFI)  min -PFI \n  \n     (D)    min -distance_to_closest \n  \n . Example: SGTELIB_MODEL_FORMULATION EFI \n . Default: FS\n\n",  "  developer advanced problem expected improvement diversification model sgtelib  "  , "true" , "true" , "true" },
+{ "SGTELIB_MODEL_FEASIBILITY",  "NOMAD::SgtelibModelFeasibilityType",  "C",  " Method used to model the feasibility of a point ",  " \n . Method used to model the feasibility of a point. \n  \n . Arguments: one character in {'C', 'H', 'M', 'P'} \n  \n . Example: SGTELIB_MODEL_FEASIBILITY C  # 1 model per constraint \n            SGTELIB_MODEL_FEASIBILITY H  # 1 model of the aggregate constraint \n            SGTELIB_MODEL_FEASIBILITY M  # 1 model of the max of the constraints \n            SGTELIB_MODEL_FEASIBILITY B  # 1 binary model of the feasibility \n . Default: C\n\n",  "  developer advanced feasibility constraints interpolation regression model sgtelib  "  , "true" , "true" , "true" },
+{ "SGTELIB_MODEL_DIVERSIFICATION",  "NOMAD::Double",  "0.01",  " Coefficient of the exploration term in the sgtelib model problem ",  " \n . Coefficient of the exploration term in the sgtelib model problem. \n  \n . Argument: one positive real \n  \n . Example: SGTELIB_MODEL_DIVERSIFICATION 0    # no exploration \n            SGTELIB_MODEL_DIVERSIFICATION 0.01 # light exploration \n            SGTELIB_MODEL_DIVERSIFICATION 0.1  # medium exploration \n            SGTELIB_MODEL_DIVERSIFICATION 1    # strong exploration \n . Default: 0.01\n\n",  "  developer advanced model sgtelib  "  , "true" , "true" , "true" },
+{ "SGTELIB_MODEL_SEARCH_EXCLUSION_AREA",  "NOMAD::Double",  "0.0",  " Exclusion area for the sgtelib model search around points of the cache ",  " \n . Defines an exclusion area for the sgtelib model search around points of the cache \n  \n . Arguments: one real number in [0, 0.5] \n  \n . Example: SGTELIB_MODEL_SEARCH_EXCLUSION_AREA 0 # no exclusion area \n            SGTELIB_MODEL_SEARCH_EXCLUSION_AREA 0.1 # small exclusion area \n            SGTELIB_MODEL_SEARCH_EXCLUSION_AREA 0.5 # large exclusion area \n  \n . Default: 0.0\n\n",  "  developer advanced model sgtelib search exclusion  "  , "true" , "true" , "true" },
+{ "SGTELIB_MODEL_SEARCH_CANDIDATES_NB",  "int",  "-1",  " Number of candidates returned by the sgtelib model search ",  " \n . Number of candidates returned by the sgtelib model search. \n  \n . Argument: one integer \n  \n . If smaller or equal to 0, then the number of candidates \n   will be the largest value between BB_MAX_BLOCK_SIZE and \n   2 * DIMENSION \n  \n . Example: SGTELIB_MODEL_SEARCH_CANDIDATES_NB 8 \n . Default: -1\n\n",  "  developer advanced model sgtelib  "  , "true" , "true" , "true" },
+{ "SGTELIB_MIN_POINTS_FOR_MODEL",  "size_t",  "1",  " Minimum number of valid points necessary to build a model ",  " \n . Defines the minimum number of valid points beyond which no model will \n   be build \n  \n . Arguments: one positive integer \n  \n . Example: SGTELIB_MIN_POINTS_FOR_MODEL 5 \n  \n . Default: 1\n\n",  "  developer advanced model sgtelib  "  , "true" , "true" , "true" },
+{ "SGTELIB_MAX_POINTS_FOR_MODEL",  "size_t",  "100",  " Maximum number of valid points used to build a model ",  " \n . Defines the maximum number of valid points kept to build a model. \n   Extra points are ignored. \n  \n . Arguments: one positive integer \n  \n . Example: SGTELIB_MAX_POINTS_FOR_MODEL 96 \n  \n . Default: 100\n\n",  "  developer advanced model sgtelib  "  , "true" , "true" , "true" },
+{ "SGTELIB_MODEL_SEARCH_FILTER",  "std::string",  "2345",  " Methods used in the sgtelib search filter to return several search candidates ",  " \n . Methods used in the sgtelib search filter to return several search candidates \n  \n . Arguments: a string containing several integers from 0 to 5 \n  \n . Method 0: Select the best candidate \n  \n . Method 1: Select the most remote candidate \n  \n . Method 2: Select the best candidate, with minimal distance to the cache \n  \n . Method 3: Select the best candidate, with minimal margin in feasibility \n  \n . Method 4: Select the candidate with the best isolation number \n  \n . Method 5: Select the candidate with the best density number \n  \n . Examples: SGTELIB_MODEL_SEARCH_FILTER 0    # Only method 0 will be used \n             SGTELIB_MODEL_SEARCH_FILTER 01   # Alternate between method 0 and 1 \n             SGTELIB_MODEL_SEARCH_FILTER 2345 # Cycle through methods 2, 3, 4 and 5 \n . Default: 2345\n\n",  "  developer advanced model search sgtelib  "  , "true" , "true" , "true" },
+{ "SGTELIB_MODEL_RADIUS_FACTOR",  "NOMAD::Double",  "2.0",  " Sgtelib model radius factor ",  " \n . Sgtelib model radius factor \n  \n . This parameter is used to select points to build the sgtelib model \n  \n . Frame size is multiplied by this factor to get the search radius \n  \n . Points inside a circle centered on the poll center, within this radius, \n   are selected to build the sgtelib model \n  \n . Arguments: one strictly positive real \n  \n . Example: SGTELIB_MODEL_RADIUS_FACTOR 1.0 \n . Default: 2.0\n\n",  "  developer sgtelib model radius  "  , "true" , "true" , "true" } };
+
+#endif
--- a/src/Attribute/runAttributesDefinitionVNS.hpp
+++ b/src/Attribute/runAttributesDefinitionVNS.hpp
@@ -0,0 +1,13 @@
+//////////// THIS FILE MUST BE CREATED BY EXECUTING WriteAttributeDefinitionFile ////////////
+//////////// DO NOT MODIFY THIS FILE MANUALLY ///////////////////////////////////////////////
+
+#ifndef __NOMAD_4_0_RUNATTRIBUTESDEFINITIONVNS__
+#define __NOMAD_4_0_RUNATTRIBUTESDEFINITIONVNS__
+
+_definition = {
+{ "VNS_MADS_OPTIMIZATION",  "bool",  "false",  " VNS MADS stand alone optimization for constrained and unconstrained pbs ",  " \n  \n . Shaking + optimization for constrained and unconstrained optimization \n  \n . Argument: bool \n  \n . Stand alone VNS Mads optimization will deactivate any optimization strategy. \n  \n . Example: VNS_MADS_OPTIMIZATION true \n  \n . Default: false\n\n",  "  advanced global optimization vns neighborhood  "  , "true" , "false" , "true" },
+{ "VNS_MADS_SEARCH",  "bool",  "false",  " VNS Mads optimization used as a search step for Mads ",  " \n  \n . Variable Neighborhood Search + Mads optimization as a search step for Mads \n  \n . Argument: bool \n  \n . Example: VNS_MADS_SEARCH false \n  \n . Default: false\n\n",  "  advanced global mads search vns neighborhood "  , "true" , "true" , "true" },
+{ "VNS_MADS_SEARCH_TRIGGER",  "NOMAD::Double",  "0.75",  " VNS Mads search trigger",  " \n  \n . The VNS trigger is the maximum desired ratio of VNS blackbox evaluations \n   over the total number of blackbox evaluations. \n    \n . The VNS search is never executed with a null trigger while a value of 1 \n   allows the search at every iteration \n    \n . If \"VNS_MADS_SEARCH yes\", the default value of 0.75 is taken for the trigger \n  \n . Argument: Double \n  \n . Example: VNS_MADS_SEARCH_TRIGGER 0.9 \n  \n . Default: 0.75\n\n",  "  advanced global mads search vns neighborhood ratio  "  , "true" , "true" , "true" },
+{ "VNS_MADS_SEARCH_MAX_TRIAL_PTS_NFACTOR",  "size_t",  "100",  " VNS-Mads search stopping criterion.",  " \n  \n . VNS Mads stopping criterion. Max number of trial pts < dimension * NFactor \n  \n . Argument: Positive integer. INF disables this criterion. \n  \n . Example: VNS_MADS_SEARCH_MAX_TRIAL_PTS_NFACTOR 10 \n  \n . Default: 100\n\n",  "  advanced global vns neighborhood mads search stop trial  "  , "true" , "true" , "true" } };
+
+#endif
--- a/src/CMakeLists.txt
+++ b/src/CMakeLists.txt
@@ -485,15 +485,15 @@
 #
 
 # Build attribute executable
-add_executable(WriteAttributeDefinitionFile ${ATTRIBUTE_HEADERS_GENERATOR})
+# add_executable(WriteAttributeDefinitionFile ${ATTRIBUTE_HEADERS_GENERATOR})
 
 # Command to create the attribute headers
-add_custom_command(
-  OUTPUT ${ATTRIBUTE_HEADERS}
-  COMMAND WriteAttributeDefinitionFile
-  WORKING_DIRECTORY ${CMAKE_CURRENT_SOURCE_DIR}/Attribute
-  DEPENDS ${ATTRIBUTE_TEXT}
-)
+# add_custom_command(
+#   OUTPUT ${ATTRIBUTE_HEADERS}
+#   COMMAND WriteAttributeDefinitionFile
+#   WORKING_DIRECTORY ${CMAKE_CURRENT_SOURCE_DIR}/Attribute
+#   DEPENDS ${ATTRIBUTE_TEXT}
+# )
 
 #
 # Build libraries
