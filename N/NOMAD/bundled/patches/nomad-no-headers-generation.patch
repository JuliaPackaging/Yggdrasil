--- /dev/null
+++ b/src/Attribute/cacheAttributesDefinition.hpp
@@ -0,0 +1,11 @@
+//////////// THIS FILE MUST BE CREATED BY EXECUTING WriteAttributeDefinitionFile ////////////
+//////////// DO NOT MODIFY THIS FILE MANUALLY ///////////////////////////////////////////////
+
+#ifndef __NOMAD400_CACHEATTRIBUTESDEFINITION__
+#define __NOMAD400_CACHEATTRIBUTESDEFINITION__
+
+_definition = {
+{ "MAX_CACHE_SIZE",  "size_t",  "INF",  " Termination criterion on the number of evaluation points stored in the cache ",  " \n  \n . The program terminates as soon as the cache reaches this size. \n  \n . Argument: one positive integer (expressed in number of evaluation points). \n  \n . Example: MAX_CACHE_SIZE 10000 \n  \n . Default: INF\n\n",  "  advanced termination cache  "  , "false" , "false" , "true" },
+{ "CACHE_FILE",  "std::string",  "",  " Cache file name ",  " \n  \n . Cache file. If the specified file does not exist, it will be created. \n  \n . Argument: one string. \n  \n . If the string is empty, no cache file will be created. \n  \n . Points already in the cache file will not be reevaluated. \n  \n . Example: CACHE_FILE cache.txt \n  \n . Default: Empty string.\n\n",  "  basic cache file  "  , "false" , "false" , "true" } };
+
+#endif
--- /dev/null
+++ b/src/Attribute/displayAttributesDefinition.hpp
@@ -0,0 +1,19 @@
+//////////// THIS FILE MUST BE CREATED BY EXECUTING WriteAttributeDefinitionFile ////////////
+//////////// DO NOT MODIFY THIS FILE MANUALLY ///////////////////////////////////////////////
+
+#ifndef __NOMAD400_DISPLAYATTRIBUTESDEFINITION__
+#define __NOMAD400_DISPLAYATTRIBUTESDEFINITION__
+
+_definition = {
+{ "DISPLAY_STATS",  "NOMAD::ArrayOfString",  "BBE OBJ",  " Format for displaying the evaluation points ",  " \n  \n . Format of the outputs displayed at each success (single-objective) \n  \n . Format of the final Pareto front (multi-objective) \n  \n . Displays more points with DISPLAY_ALL_EVAL true \n  \n . Arguments: list of strings possibly including the following keywords: \n     BBE        : blackbox evaluations \n     BBO        : blackbox outputs \n     BLK_EVA    : block evaluation calls \n     BLK_SIZE   : number of points in the block \n     CACHE_HITS : cache hits \n     CACHE_SIZE : cache size \n     CONS_H     : infeasibility (h) value \n     EVAL       : evaluations (includes cache hits) \n     GEN_STEP   : name of the step that generated this point to evaluate \n     H_MAX      : max infeasibility (h) acceptable \n     ITER_NUM   : iteration number in which this evaluation was done \n     LAP        : number of lap evaluations since last reset \n     MESH_INDEX : mesh index \n     MESH_SIZE / DELTA_M : mesh size delta_k^m \n     FRAME_SIZE / DELTA_F : frame size delta_k^f \n     OBJ        : objective function value \n     SGTE       : number of surrogate evaluations since last reset \n     SOL        : current feasible iterate \n     THREAD_NUM : thread number in which this evaluation was done \n     TOTAL_SGTE : total number of surrogate evaluations \n     TIME       : real time in seconds \n     USER       : user-defined string \n  \n . Example: \n     DISPLAY_STATS BBE EVAL ( SOL ) OBJ CONS_H \n  \n . Default: BBE OBJ\n\n",  "  basic display displays output outputs stat stats success successes  "  , "false" , "true" , "true" },
+{ "DISPLAY_DEGREE",  "int",  "2",  " Level of verbose during execution ",  " \n  \n . Argument: one integer in {0, 1, 2, 3} (basic) or one string in: \n     . 'NO', 'NO_DISPLAY', \n     . 'MIN', 'MINIMAL', 'MINIMAL_DISPLAY', \n     . 'NORMAL', 'NORMAL_DISPLAY', \n     . 'FULL', 'FULL_DISPLAY' \n      \n . Example: \n     DISPLAY_DEGREE 2    # basic: normal display \n  \n . Default: 2\n\n",  "  basic display verbose output outputs info infos  "  , "false" , "true" , "true" },
+{ "DISPLAY_ALL_EVAL",  "bool",  "false",  " Flag to display all evaluations ",  " \n  \n . If true, more points are displayed with parameters DISPLAY_STATS and \n   STATS_FILE \n  \n . If false, only the successful evaluations are displayed. \n  \n . Overrides parameters DISPLAY_INFEASIBLE and DISPLAY_UNSUCCESSFUL \n  \n . Points of the phase one with EB constraint are not displayed \n  \n . Argument: one boolean \n  \n . Example: DISPLAY_ALL_EVAL yes \n  \n . Default: false\n\n",  "  basic display displays stat stats eval evals evaluation evaluations   "  , "false" , "true" , "true" },
+{ "DISPLAY_INFEASIBLE",  "bool",  "false",  " Flag to display infeasible ",  " \n  \n . When true, do display iterations for which constraints are violated. \n  \n . When false, only display iterations where the point is feasible. \n  \n . Argument: one boolean \n  \n . Example: DISPLAY_INFEASIBLE true \n  \n . Default: false\n\n",  "  advanced display displays infeasible  "  , "false" , "true" , "true" },
+{ "DISPLAY_UNSUCCESSFUL",  "bool",  "true",  " Flag to display unsuccessful ",  " \n  \n . When true, display iterations even when no better solution is found. \n  \n . When false, only display iterations when a better objective value is found. \n  \n . Argument: one boolean ('yes' or 'no') \n  \n . Example: DISPLAY_UNSUCCESSFUL yes \n  \n  \n . Default: true\n\n",  "  advanced display displays success successes failed failure failures fail fails  "  , "false" , "true" , "true" },
+{ "STATS_FILE",  "NOMAD::ArrayOfString",  "",  " The name of the stats file ",  " \n  \n . File containing all successes in a formatted way (similar as DISPLAY_STATS in a file) \n  \n . Displays more points when DISPLAY_ALL_EVAL is true \n  \n . Arguments: one string (file name) and one list of strings (for the format of stats) \n  \n . The seed is added to the file name if \n   ADD_SEED_TO_FILE_NAMES=\'yes\' \n  \n . Example: STATS_FILE log.txt BBE SOL f=%.2EOBJ \n  \n  \n . Default: Empty string.\n\n",  "  basic stat stats file files name display displays output outputs  "  , "false" , "false" , "true" },
+{ "SOL_FORMAT",  "NOMAD::ArrayOfDouble",  "-",  " Format of the solution ",  " \n  \n . SOL_FORMAT is computed from BB_OUTPUT_TYPE and GRANULARITY \n   parameters. \n   \n . Gives the format precision for display of SOL. May also be used for \n   other ArrayOfDouble of the same DIMENSION (ex. bounds, deltas). \n  \n . Cannot be modified by user. Internal parameter. \n  \n . No default value.\n\n",  "  advanced internal  "  , "false" , "true" , "true" },
+{ "DISPLAY_HEADER",  "size_t",  "40",  " Frequency at which the stats header is displayed ",  " \n  \n . Every time this number of stats lines is displayed, the stats header is \n   displayed again. This parameter is for clarity of the display. \n  \n . Value of INF means to never display the header. \n  \n . Default: 40\n\n",  "  advanced  "  , "false" , "true" , "true" },
+{ "OBJ_WIDTH",  "size_t",  "0",  " Character width of the objective ",  " \n  \n . OBJ_WIDTH is computed to display the objective correctly when NOMAD is run. \n  \n . Internal parameter. \n  \n . Default: 0\n\n",  "  advanced internal  "  , "false" , "false" , "true" },
+{ "MAX_DISPLAY_STEP_LEVEL",  "size_t",  "20",  " Depth of the step after which info is not printed ",  " \n . If a step has more than this number of parent steps, it will not be printed. \n  \n . Only has effect when DISPLAY_DEGREE = FULL. \n  \n . Default: 20\n\n",  "  advanced  "  , "false" , "true" , "true" } };
+
+#endif
--- /dev/null
+++ b/src/Attribute/evalAttributesDefinition.hpp
@@ -0,0 +1,12 @@
+//////////// THIS FILE MUST BE CREATED BY EXECUTING WriteAttributeDefinitionFile ////////////
+//////////// DO NOT MODIFY THIS FILE MANUALLY ///////////////////////////////////////////////
+
+#ifndef __NOMAD400_EVALATTRIBUTESDEFINITION__
+#define __NOMAD400_EVALATTRIBUTESDEFINITION__
+
+_definition = {
+{ "BB_EXE",  "std::string",  "",  " Blackbox executable ",  " \n  \n . Blackbox executable name \n  \n . List of strings \n  \n . Required for batch mode \n  \n . Unused in library mode \n  \n . One executable can give several outputs \n  \n . Use \' or \", and \'$\', to specify names or commands with spaces \n  \n . When the \'$\' character is put in first position of a string, it is \n   considered as global and no path will be added \n  \n . Examples \n     . BB_EXE bb.exe \n     . BB_EXE \'$nice bb.exe\' \n     . BB_EXE \'$python bb.py\' \n  \n . Default: Empty string.\n\n",  "  basic blackbox blackboxes bb exe executable executables binary output outputs batch  "  , "false" , "false" , "true" },
+{ "TMP_DIR",  "std::string",  "/tmp/",  " Directory where to put temporary files ",  " \n  \n . Temporary directory for blackbox input/output files \n  \n . Argument: one string indicating a directory \n  \n . Improved performance with a local temporary directory \n  \n . Example: TMP_DIR /tmp \n  \n . Default: /tmp/\n\n",  "  advanced  "  , "false" , "false" , "true" },
+{ "BB_OUTPUT_TYPE",  "NOMAD::BBOutputTypeList",  "OBJ",  " Type of outputs provided by the blackboxes ",  " \n  \n . Blackbox output types \n  \n . List of types for each blackbox output \n  \n . Available types \n     . OBJ       : objective value to minimize (define twice for bi-objective) \n     . PB        : constraint <= 0 treated with Progressive Barrier (PB) \n     . EB        : constraint <= 0 treated with Extreme Barrier (EB) \n     . F         : constraint <= 0 treated with Filter \n     . NOTHING   : this output is ignored \n     . EXTRA_O   : same as 'NOTHING' \n     .  -        : same as 'NOTHING' \n  \n . Equality constraints are not natively supported \n  \n . See parameters LOWER_BOUND and UPPER_BOUND for bound constraints \n  \n . Examples \n     . BB_EXE bb.exe                   # these two lines define \n     . BB_OUTPUT_TYPE OBJ EB EB        # that bb.exe outputs three values \n  \n . Default: OBJ\n\n",  "  basic bb exe blackbox blackboxs output outputs constraint constraints type types  "  , "false" , "false" , "true" } };
+
+#endif
--- /dev/null
+++ b/src/Attribute/evaluatorControlAttributesDefinition.hpp
@@ -0,0 +1,17 @@
+//////////// THIS FILE MUST BE CREATED BY EXECUTING WriteAttributeDefinitionFile ////////////
+//////////// DO NOT MODIFY THIS FILE MANUALLY ///////////////////////////////////////////////
+
+#ifndef __NOMAD400_EVALUATORCONTROLATTRIBUTESDEFINITION__
+#define __NOMAD400_EVALUATORCONTROLATTRIBUTESDEFINITION__
+
+_definition = {
+{ "MAX_BB_EVAL",  "size_t",  "INF",  " Stopping criterion on the number of blackbox evaluations ",  " \n  \n . Maximum number of blackbox evaluations \n  \n . Argument: one positive integer \n  \n . An INF value serves to disable the stopping criterion. \n  \n . Does not consider evaluations taken in the cache (cache hits) \n  \n . In bi-objective mode: max number of blackbox evaluations for each MADS run \n  \n . Example: MAX_BB_EVAL 1000 \n  \n . Default: INF\n\n",  "  basic stop stops stopping max maximum criterion criterions blackbox blackboxes bb  "  , "false" , "true" , "true" },
+{ "MAX_EVAL",  "size_t",  "INF",  " Stopping criterion on the number of evaluations (blackbox and cache) ",  " \n  \n . Maximum number of evaluations, including evaluations taken in the cache \n   (cache hits) \n  \n . Argument: one positive integer \n  \n . An INF value serves to disable the stopping criterion. \n  \n . Example: MAX_EVAL 1000 \n  \n . Default: INF\n\n",  "  advanced stop stops stopping max maximum criterion criterions blackbox blackboxes bb eval evals evaluation evaluations cache  "  , "false" , "true" , "true" },
+{ "OPPORTUNISTIC_EVAL",  "bool",  "true",  " Opportunistic strategy - general flag (terminate evaluations as soon as a success is found) ",  " \n  \n . Opportunistic strategy: Terminate evaluations as soon as a success is found \n  \n . This parameter is the default value for other OPPORTUNISTIC parameters, \n    including Search steps \n  \n . This parameter is the value used for Poll step \n  \n . Argument: one boolean (yes or no) \n  \n . Type 'nomad -h opportunistic' to see advanced options \n  \n . Example: OPPORTUNISTIC_EVAL no  # complete evaluations \n  \n . Default: true\n\n",  "  advanced opportunistic oppor eval evals evaluation evaluations terminate list success successes  "  , "true" , "true" , "true" },
+{ "USE_CACHE",  "bool",  "true",  " Use cache in algorithms ",  " \n . When this parameter is false, the Cache is not used at all. Points may be \n   re-evaluated. \n  \n . Recommended when DIMENSION is large and evaluations are not costly. \n  \n . Cache may be used for top algorithm, and disabled for a sub-algorithm. \n  \n . If CACHE_FILE is non-empty, cache file will still be read and written. \n  \n . Default: true\n\n",  "  advanced  "  , "true" , "false" , "true" },
+{ "CLEAR_EVAL_QUEUE",  "bool",  "true",  " Opportunistic strategy: Flag to clear EvaluatorControl queue between each run ",  " \n  \n . Opportunistic strategy: If a success is found, clear evaluation queue of  \n   other points. \n  \n . If this flag is false, the points in the evaluation queue that are not yet  \n   evaluated might be evaluated later. \n  \n . If this flag is true, the points in the evaluation queue that are not yet \n   evaluated will be flushed. \n  \n . Outside of opportunistic strategy, this flag has no effect. \n  \n . Default: true\n\n",  "  advanced opportunistic oppor eval evals evaluation evaluations clear flush  "  , "true" , "true" , "true" },
+{ "BB_MAX_BLOCK_SIZE",  "size_t",  "1",  " Size of blocks of points, to be used for parallel evaluations ",  " \n . Maximum size of a block of evaluations send to the blackbox \n   executable at once. Blackbox executable can manage parallel \n   evaluations on its own. Opportunistic strategies may apply after \n   each block of evaluations. \n     \n . Depending on the algorithm phase, the blackbox executable will \n   receive at most BB_MAX_BLOCK_SIZE points to evaluate. \n     \n . When this parameter is greater than one, the number of evaluations \n   may exceed the MAX_BB_EVAL stopping criterion. \n     \n . Argument: integer > 0 \n   \n . Example: BB_MAX_BLOCK_SIZE 3 \n            The blackbox executable receives blocks of \n            at most 3 points for evaluation. \n  \n . Default: 1\n\n",  "  advanced block parallel  "  , "true" , "true" , "true" },
+{ "MAX_BLOCK_EVAL",  "size_t",  "INF",  " Stopping criterion on the number of blocks evaluations ",  " \n  \n . Maximum number of blocks evaluations \n  \n . Argument: one positive integer \n  \n . An INF value serves to disable the stopping criterion. \n  \n . Example: MAX_BLOCK_EVAL 100 \n  \n . Default: INF\n\n",  "  advances block stop parallel  "  , "true" , "true" , "true" },
+{ "MAX_SGTE_EVAL",  "size_t",  "1000",  " Max number of sgtelib model evaluations for each optimization of the surrogate problem ",  " \n . Max number of sgtelib model evaluations for each optimization of the surrogate \n   problem. \n  \n . Argument: one integer > 0 \n  \n . Note: In NOMAD 3, the default is 10000. Early tests in NOMAD 4 show extremely \n   long resolution times for this value. The default value is set to 1000 until \n   more investigation is done. \n  \n . Example: MAX_SGTE_EVAL 5000 \n . Default: 1000\n\n",  "  advanced sgtelib search model model_search  "  , "true" , "true" , "true" } };
+
+#endif
--- /dev/null
+++ b/src/Attribute/pbAttributesDefinition.hpp
@@ -0,0 +1,24 @@
+//////////// THIS FILE MUST BE CREATED BY EXECUTING WriteAttributeDefinitionFile ////////////
+//////////// DO NOT MODIFY THIS FILE MANUALLY ///////////////////////////////////////////////
+
+#ifndef __NOMAD400_PBATTRIBUTESDEFINITION__
+#define __NOMAD400_PBATTRIBUTESDEFINITION__
+
+_definition = {
+{ "DIMENSION",  "size_t",  "0",  " Dimension of the optimization problem (required) ",  " \n  \n . Number of variables \n  \n . Argument: one positive integer \n  \n . Example: DIMENSION 3 \n  \n . Default: 0\n\n",  "  basic dimension dimensions dim dims problem problems prob pb pbs optimization size  "  , "false" , "false" , "true" },
+{ "X0",  "NOMAD::ArrayOfPoint",  "-",  " The initial point(s) ",  " \n  \n . Vector of starting point(s) \n  \n . Arguments: text file name or DIMENSION reals \n  \n . More than one starting point can be defined. All points are evaluated: \n   X0 evaluations are not opportunistic. \n  \n . May be infeasible \n  \n . Cannot be outside bounds \n  \n . Must respect fixed variables (parameter FIXED_VARIABLE) \n  \n . Examples: \n     . X0 x0.txt \n  \n     . X0   * 0.0    # First starting point \n       X0 1 * 1.0    # Second starting point \n  \n     . X0 ( 0 1 2 )  # if DIMENSION = 3 \n  \n . No default value.\n\n",  "  basic initial variable variables var vars init point points bound bounds lower upper cache start starting  "  , "false" , "false" , "false" },
+{ "LOWER_BOUND",  "NOMAD::ArrayOfDouble",  "-",  " The optimization problem lower bounds for each variable ",  " \n  \n . Lower bounds for each variable \n  \n . Arguments: DIMENSION reals \n  \n . Examples: \n     LOWER_BOUND * 0.0   # all variables are nonnegative \n     LOWER_BOUND 0-2 0.0 # the 3 first variables are nonnegative \n     LOWER_BOUND 0 0.0   # the first variable is nonnegative \n  \n . No default value.\n\n",  "  basic bound bounds lower variable variables constraint constraints  "  , "false" , "false" , "true" },
+{ "UPPER_BOUND",  "NOMAD::ArrayOfDouble",  "-",  " The optimization problem upper bounds for each variable ",  " \n  \n . Upper bounds for each variable \n  \n . Arguments: DIMENSION reals \n  \n . Examples: \n     UPPER_BOUND * 10.0   # all variables are less than or equal to 10.0 \n     UPPER_BOUND 0-2 10.0 # the 3 first variables are less than or equal to 10.0 \n     UPPER_BOUND 0 10.0   # the first variable is less than or equal to 10.0 \n  \n . No default value.\n\n",  "  basic bound bounds upper variable variables constraint constraints  "  , "false" , "false" , "true" },
+{ "BB_INPUT_TYPE",  "NOMAD::BBInputTypeList",  "* R",  " The variable blackbox input types ",  " \n  \n . Blackbox input types \n  \n . List of types for each variable \n  \n . Available types: \n     . B: binary \n     . I: integer \n     . R: continuous \n  \n . Examples: \n     . BB_INPUT_TYPE * I       # all variables are integers \n     . BB_INPUT_TYPE ( R I B ) # for all 3 variables \n     . BB_INPUT_TYPE 1-3 B     # NOT YET SUPPORTED ( variables 1 to 3 are binary ) \n     . BB_INPUT_TYPE 0 I       # NOT YET SUPPORTED ( first variable is integer ) \n  \n . Default: * R\n\n",  "  basic blackbox blackboxes input inputs type types int integer integers binary bin continuous \n categorical  "  , "false" , "false" , "true" },
+{ "INITIAL_MESH_SIZE",  "NOMAD::ArrayOfDouble",  "-",  " The initial mesh size of MADS ",  " \n  \n . Initial mesh size \n  \n . Arguments: one or DIMENSION positive real(s) \n  \n . NOMAD uses one mesh size per variable. \n  \n . Initial frame size is determined from initial mesh size when provided \n  \n . Examples: \n     . INITIAL_MESH_SIZE 1.0          # for all variables \n     . INITIAL_MESH_SIZE 1 0.5        # for variable 1 only \n     . INITIAL_MESH_SIZE 2-4 0.25     # for variables 2 to 4 \n  \n . No default value.\n\n",  "  advanced initial mesh size mads gmesh  "  , "false" , "false" , "true" },
+{ "INITIAL_POLL_SIZE",  "NOMAD::ArrayOfDouble",  "-",  " Deprecated, see INITIAL_FRAME_SIZE ",  " \n  \n . This is a deprecated parameter from Nomad 3. Renamed INITIAL_FRAME_SIZE. \n  \n . No default value.\n\n",  "  advanced  "  , "false" , "false" , "true" },
+{ "INITIAL_FRAME_SIZE",  "NOMAD::ArrayOfDouble",  "-",  " The initial frame size of MADS ",  " \n  \n . Initial frame size \n  \n . Arguments: one or DIMENSION positive real(s) \n  \n . Reinterpreted empty default: \n     10% of the range if bounds are defined, |x0|/10 otherwise \n  \n . NOMAD uses one frame size per variable to achieve scaling \n  \n . The initial mesh size is determined from initial frame size when provided, but \n providing both is not allowed. \n  \n . Examples \n . INITIAL_FRAME_SIZE 1.0          # for all variables \n . INITIAL_FRAME_SIZE 1 0.5        # for variable 1 only \n . INITIAL_FRAME_SIZE 2-4 0.25     # for variable 2 to 4 \n  \n . No default value.\n\n",  "  advanced intial poll frame mesh size mads gmesh  "  , "false" , "false" , "true" },
+{ "MIN_POLL_SIZE",  "NOMAD::ArrayOfDouble",  "-",  " Deprecated, see MIN_FRAME_SIZE ",  " \n  \n . This is a deprecated parameter from Nomad 3. Renamed MIN_FRAME_SIZE. \n  \n . No default value.\n\n",  "  advanced  "  , "false" , "false" , "true" },
+{ "MIN_FRAME_SIZE",  "NOMAD::ArrayOfDouble",  "-",  " Termination criterion on minimal frame size of MADS ",  " \n  \n . Minimum frame size. Can be set explicitely or automatically to 1 for \n   integer or binary variables (during check). \n  \n . Arguments: same logic as INITIAL_FRAME_SIZE ('r' can be used) \n  \n . Example: MIN_FRAME_SIZE r1E-5 \n  \n . No default value.\n\n",  "  advanced min minimum poll frame size stop stopping terminate terminates \n termination terminations mads  "  , "false" , "false" , "true" },
+{ "MIN_MESH_SIZE",  "NOMAD::ArrayOfDouble",  "-",  " Termination criterion on minimal mesh size of MADS ",  " \n  \n . Minimum mesh size \n  \n . Arguments: same logic as INITIAL_MESH_SIZE ('r' can be used) \n  \n . Example: MIN_MESH_SIZE r1E-5 \n  \n . No default value.\n\n",  "  advanced min minimum frame mesh size stop stopping terminate terminates termination terminations \n mads  "  , "false" , "false" , "true" },
+{ "GRANULARITY",  "NOMAD::ArrayOfDouble",  "-",  " The granularity of the variables ",  " \n  \n . Set the granularity of variables to some specific values \n  \n . Arguments: granularity indexes and values (positive) \n  \n . Examples: \n     . GRANULARITY ( 0.01 0.0 0.01 ) # granularity of variables 0 and 2 are \n                                     # set to 0.01. \n       Variable 1 is real. \n     . GRANULARITY 0-1 0.01          # 2 first variables set granularity to 0.01 \n     . GRANULARITY * 0.01            # all variables set to granularity 0.01 \n  \n . No default value.\n\n",  "  advanced granular integer integers variable variables step  "  , "false" , "false" , "true" },
+{ "FIXED_VARIABLE",  "NOMAD::Point",  "-",  " Fix some variables to some specific values ",  " \n  \n . Fix some variables to some specific values \n  \n . Arguments: variable indexes and values \n  \n . Values for fixed variables are optional. Values of X0 will be used. \n  \n . Examples: \n     . FIXED_VARIABLE ( 0.0 - 0.0 )  # Variables 0 and 2 are fixed to value 0.0. \n                                     # Variable 1 is not fixed. \n  \n     . FIXED_VARIABLE 0              # Variable 0 is fixed to its X0 value. \n     . FIXED_VARIABLE 2-4            # Variables 2, 3 and 4 are fixed \n                                     # to their X0 values. \n . No default value.\n\n",  "  advanced fixed variable variables  "  , "false" , "false" , "true" },
+{ "STOP_IF_FEASIBLE",  "bool",  "false",  " Stop algorithm once a feasible point is obtained ",  " \n  \n . Stopping criterion on feasibility. Can be use directly. Used by \n   the PhaseOneSearch strategy to obtain a feasible point when EB constraints are \n   set and the starting point is infeasible. \n  \n . Argument: boolean. \n  \n . Example: \n     . STOP_IF_FEASIBLE true. \n      \n . Default: false\n\n",  "  advanced stopping terminate terminates termination terminations phase one   "  , "false" , "false" , "true" },
+{ "EVAL_TYPE",  "NOMAD::EvalType",  "BB",  " Type of evaluation ",  " \n . Type of evaluation currently being processed \n  \n . Arguments: BB for blackbox evaluation or SGTE for surrogate evaluation. \n  \n . Internal parameter. Should not be modified by the user. \n  \n . Default: BB\n\n",  "  advanced internal  "  , "false" , "false" , "true" } };
+
+#endif
--- /dev/null
+++ b/src/Attribute/runAttributesDefinition.hpp
@@ -0,0 +1,59 @@
+//////////// THIS FILE MUST BE CREATED BY EXECUTING WriteAttributeDefinitionFile ////////////
+//////////// DO NOT MODIFY THIS FILE MANUALLY ///////////////////////////////////////////////
+
+#ifndef __NOMAD400_RUNATTRIBUTESDEFINITION__
+#define __NOMAD400_RUNATTRIBUTESDEFINITION__
+
+_definition = {
+{ "SEED",  "int",  "0",  " The seed for the pseudo-random number generator ",  " \n  \n . Random seed \n  \n . Argument: one nonnegative integer (max UINT32_MAX), or -1, or the string 'DIFF' \n  \n . The default value is used for each run if the parameter is not provided. \n  \n . If '-1' or 'DIFF' is entered the seed is different for each run (PID is used). \n  \n . The seed is used in the output file names \n  \n . Example: SEED 123456 \n  \n . Default: 0\n\n",  "  advanced seed seeds random number run  "  , "true" , "true" , "true" },
+{ "ADD_SEED_TO_FILE_NAMES",  "bool",  "true",  " The flag to add seed to the file names ",  " \n  \n . If \'yes\', the seed is added to the name of output file provided by STATS_FILE \n  \n . Argument: one boolean (\'yes\' or \'no\') \n  \n . Example: ADD_SEED_TO_FILE_NAMES no \n  \n . Default: true\n\n",  "  advanced seed seeds random number run stat stats file history solution solutions  "  , "false" , "false" , "true" },
+{ "NB_THREADS_OPENMP",  "int",  "-1",  " The number of threads when OpenMP parallel evaluations \n are enabled ",  " \n  \n . Set the number of threads to be used by OpenMP. \n  \n . Argument: One positive integer, or -1. A value of -1 means OpenMP decides \n   by itself. \n  \n . Example: NB_THREADS_OPENMP 8 \n  \n . Default: -1\n\n",  "  advanced thread threads openmp parallel eval evals evaluation evaluations  "  , "true" , "false" , "true" },
+{ "HOT_RESTART_READ_FILES",  "bool",  "false",  " Flag to read hot restart files ",  " \n  \n . If true, the hot restart files (hotRestart.txt and CACHE_FILE) are read \n   when NOMAD is started. If NOMAD is ran twice, the second run starts from \n   where the first run ended. \n  \n . If false, the hot restart files are ignored when NOMAD is started. Two runs \n   in a row will start from the same configuration. \n  \n . See also: HOT_RESTART_WRITE_FILES, CACHE_FILE \n  \n . Default: false\n\n",  "  advanced hot restart file files interrupt  "  , "false" , "false" , "true" },
+{ "HOT_RESTART_WRITE_FILES",  "bool",  "false",  " Flag to write hot restart files ",  " \n  \n . If true, when NOMAD ends, write the hot restart files (hotRestart.txt and \n   CACHE_FILE). \n  \n . See also: HOT_RESTART_READ_FILES, CACHE_FILE \n  \n . Default: false\n\n",  "  advanced hot restart file files interrupt  "  , "false" , "false" , "true" },
+{ "HOT_RESTART_ON_USER_INTERRUPT",  "bool",  "false",  " Flag to perform a hot restart on user interrupt ",  " \n  \n . If true, when NOMAD runs and the user does an interruption (CTRL+C), \n   then the parameters can be modified. Upon pressing CTRL+D, the resolution \n   continues where it was stopped, using the modified parameters. \n  \n . If false, when NOMAD runs and the user does an interruption (CTRL+C), \n   the resolution ends. \n  \n . Default: false\n\n",  "  advanced hot restart file files interrupt  "  , "false" , "false" , "true" },
+{ "HOT_RESTART_FILE",  "std::string",  "hotrestart.txt",  " The name of the hot restart file ",  " \n  \n . Name of the file where the information about hot restart is kept. \n  \n  \n . Default: hotrestart.txt\n\n",  "  advanced hot restart file files file interrupt  "  , "false" , "false" , "true" },
+{ "REJECT_UNKNOWN_PARAMETERS",  "bool",  "false",  " Flag to reject unknown parameters when checking validity of parameters ",  " \n  \n . If true, when reading a parameters file, NOMAD will ignore unknown parameters. \n  \n . If false, when reading a parameters file, NOMAD will exit if unknown \n   parameters are present. \n  \n . Default: false\n\n",  "  advanced valid param params parameter parameters ignore  "  , "false" , "false" , "true" },
+{ "LH_SEARCH",  "NOMAD::LHSearchType",  "-",  " Latin Hypercube Sampling Search method ",  " \n  \n . Latin-Hypercube sampling (search) \n  \n . Arguments: two size_t p0 and pi \n  \n . p0: number of initial LH search points \n  \n . pi: LH search points at each iteration \n  \n . The search can be opportunistic or not \n   (parameter OPPORTUNISTIC_EVAL) \n  \n . Example: LH_SEARCH 100 0 \n  \n . No default value.\n\n",  "  basic search latin hypercube sampling opportunistic_lh  "  , "true" , "true" , "true" },
+{ "LH_EVAL",  "size_t",  "0",  " Latin Hypercube Sampling of points (no optimization) ",  " \n  \n . Latin-Hypercube sampling (evaluations) \n  \n . Argument: A positive integer p < INF \n  \n . p: number of LH points \n  \n . All points will be evaluated (no opportunism). This options will deactivate \n   any optimization strategy. \n  \n . The LH sampling requires to have both lower and upper bounds defined. \n  \n . Example: LH_EVAL 100 \n  \n . Default: 0\n\n",  "  basic latin hypercube sampling  "  , "true" , "true" , "true" },
+{ "SGTELIB_MODEL_EVAL",  "bool",  "0",  " Sgtelib Model Sampling of points (no optimization) ",  " \n  \n . Sgtelib Model sampling \n  \n . Argument: bool \n  \n . Default: not used \n  \n . Best points are taken from the cache \n  \n . A model is computed \n  \n . The most promising points according to that model are evaluated \n  \n . No opportunism \n  \n . This option deactivates any optimization strategy. \n  \n . Example: SGTELIB_MODEL_EVAL 100 \n  \n . Default: 0\n\n",  "  advanced sgtelib model sampling  "  , "true" , "false" , "true" },
+{ "H_MAX_0",  "NOMAD::Double",  "NOMAD::INF",  " Initial value of hMax. ",  " \n . Initial value of hMax. Used for progressive barrier (PB) constraints. \n  \n . Argument: one positive real. \n  \n . Points x such that h(x) > hMax are rejected. h measures the feasibility, or \n   how much the constraints are violated. \n  \n . Example: H_MAX_0 100.0 \n  \n . Default: NOMAD::INF\n\n",  "  advanced hmax h_max constraint constraints pb feasibility progressive barrier  "  , "true" , "false" , "true" },
+{ "SGTELIB_SEARCH",  "bool",  "false",  " Model search using Sgtelib ",  " \n  \n . MADS model search, using Bastien Talgorn's Sgtelib \n  \n . This replaces the MODEL_SEARCH parameter from NOMAD 3 \n  \n . Argument: one boolean ('yes' or 'no') \n  \n . Disabled for more than 50 variables \n  \n . Example: SGTELIB_SEARCH yes \n  \n . See also: DISABLE \n . Default: false\n\n",  "  basic mads model search sgtelib model_search  "  , "true" , "true" , "true" },
+{ "QUAD_MODEL_SEARCH",  "bool",  "false",  " Quad model search using Sgtelib ",  " \n  \n . MADS model search, using Bastien Talgorn's Sgtelib with quad models \n  \n . Argument: one boolean ('yes' or 'no') \n  \n . Disabled for more than 50 variables \n  \n . Example: QUAD_MODEL_SEARCH yes \n  \n . See also: DISABLE \n . Default: false\n\n",  "  basic mads quad model search sgtelib model_search  "  , "true" , "true" , "true" },
+{ "MODEL_DISPLAY",  "std::string",  "",  " Display of a model ",  " \n . Control the display of the quad model search and quad model optimization. \n   These details are only shown if DISPLAY_DEGREE is FULL (3) or more. \n  \n . Arguments: a string containing one or several of the following letters \n  \n . \"S\": General information on the model (sgtelib or quad) search or optimization \n  \n . \"F\": Details of the filter step \n  \n . \"O\": Details of the models optimization \n  \n . \"P\": Details of the projection \n  \n . \"U\": Details of the model update \n  \n . \"I\": Advancement of the model optimization \n  \n . \"X\": Display of all of the model evaluations \n  \n . Example: MODEL_DISPLAY SPF # display the general information on the search \n                                        and on the filter and projection steps \n . Default: Empty string.\n\n",  "  developer advanced model quad sgtelib  "  , "false" , "false" , "true" },
+{ "QUAD_MODEL_OPTIMIZATION",  "bool",  "false",  " Quad model stand alone optimization for constrained and unconstrained pbs ",  " \n  \n . Quadratic model optimization for constrained and unconstrained \n   optimization \n  \n . Argument: bool \n  \n . Stand alone quadratic model optimization will deactivate any optimization \n   strategy. \n  \n . Example: QUAD_MODEL_OPTIMIZATION true \n  \n . Default: false\n\n",  "  advanced sgtelib quadratic quad optimization simplex  "  , "true" , "false" , "true" },
+{ "SGTELIB_MODEL_DEFINITION",  "NOMAD::ArrayOfString",  "",  " Definition of the surrogate model ",  " \n  \n . Argument: Array of string that represent the Sgtelib model definition. See sgtelib manual. \n  \n . Default: TYPE PRS DEGREE 2 \n  \n . Example: TYPE PRS DEGREE 1 # builds a linear model \n .          TYPE PRS DEGREE 2 # builds a quadratic model \n .          TYPE RBF          # builds an RBF model \n .          TYPE ENSEMBLE     # builds an ensemble of models \n            # builds a lowess model with local linear regression \n            # and optimized kernel shape: \n .          TYPE LOWESS DEGREE 1 KERNEL_COEF OPTIM \n .          # Variation that gives good results: \n            TYPE LOWESS DEGREE 1 KERNEL_SHAPE OPTIM KERNEL_COEF OPTIM RIDGE 0 METRIC AOECV \n . Default: Empty string.\n\n",  "  advanced sgtelib search model model_search interpolation regression  "  , "true" , "true" , "true" },
+{ "SGTELIB_MODEL_TRIALS",  "size_t",  "1",  " Max number of sgtelib model search failures before going to the poll step ",  " \n . Max number of sgtelib model search failures before going to the poll step. \n  \n . Argument: one positive integer \n  \n . Note: The minimum between this parameter and MAX_ITERATION_PER_MEGAITERATION \n   will be used. \n  \n . Example: SGTELIB_MODEL_TRIALS 5 \n . Default: 1\n\n",  "  developer trials sgtelib model search  "  , "true" , "true" , "true" },
+{ "SGTELIB_MODEL_FORMULATION",  "NOMAD::SgtelibModelFormulationType",  "FS",  " Formulation of the surrogate problem ",  " \n . Formulation of the surrogate problem. \n  \n . Argument: one string in {'FS', 'EIS', 'FSP', \n                            'EFI', 'EFIS','EFIM','EFIC', \n                            'PFI', \n                            'D', \n                            'EXTERN'} \n  \n . Description of the surrogate problem formulations : \n     (FS)   min f    -d.sigma_f \n            st  c_j  -d.sigma_j <= 0 \n  \n     (EIS)  min -EI  -d.sigma_f \n            st  c_j  -d.sigma_j <= 0 \n  \n     (FSP)  min f    -d.sigma_f \n            st  P >= 1/2 \n  \n     (EFI)  min -EFI \n  \n     (EFIS) min -EFI -d.sigma_f \n  \n     (EFIM) min -EFI -d.sigma_f.mu \n  \n     (EFIM) min -EFI -d.(EI.mu+P.sigma_f) \n  \n     (PFI)  min -PFI \n  \n     (D)    min -distance_to_closest \n  \n . Example: SGTELIB_MODEL_FORMULATION EFI \n . Default: FS\n\n",  "  developer advanced surrogate problem expected improvement diversification model sgtelib  "  , "true" , "true" , "true" },
+{ "SGTELIB_MODEL_FEASIBILITY",  "NOMAD::SgtelibModelFeasibilityType",  "C",  " Method used to model the feasibility of a point ",  " \n . Method used to model the feasibility of a point. \n  \n . Arguments: one character in {'C', 'H', 'M', 'P'} \n  \n . Example: SGTELIB_MODEL_FEASIBILITY C  # 1 model per constraint \n            SGTELIB_MODEL_FEASIBILITY H  # 1 model of the aggregate constraint \n            SGTELIB_MODEL_FEASIBILITY M  # 1 model of the max of the constraints \n            SGTELIB_MODEL_FEASIBILITY B  # 1 binary model of the feasibility \n . Default: C\n\n",  "  developer advanced feasibility constraints interpolation regression model sgtelib  "  , "true" , "true" , "true" },
+{ "SGTELIB_MODEL_DIVERSIFICATION",  "NOMAD::Double",  "0.01",  " Coefficient of the exploration term in the surrogate problem ",  " \n . Coefficient of the exploration term in the surrogate problem. \n  \n . Argument: one positive real \n  \n . Example: SGTELIB_MODEL_DIVERSIFICATION 0    # no exploration \n            SGTELIB_MODEL_DIVERSIFICATION 0.01 # light exploration \n            SGTELIB_MODEL_DIVERSIFICATION 0.1  # medium exploration \n            SGTELIB_MODEL_DIVERSIFICATION 1    # strong exploration \n . Default: 0.01\n\n",  "  developer advanced model sgtelib  "  , "true" , "true" , "true" },
+{ "SGTELIB_MODEL_EXCLUSION_AREA",  "NOMAD::Double",  "0.0",  " Exclusion area for the sgtelib model search around points of the cache ",  " \n . Defines an exclusion area for the sgtelib model search around points of the cache \n  \n . Arguments: one real number in [0, 0.5] \n  \n . Example: SGTELIB_MODEL_EXCLUSION_AREA 0 # no exclusion area \n            SGTELIB_MODEL_EXCLUSION_AREA 0.1 # small exclusion area \n            SGTELIB_MODEL_EXCLUSION_AREA 0.5 # large exclusion area \n  \n . Default: 0.0\n\n",  "  developer advanced model sgtelib  "  , "true" , "true" , "true" },
+{ "SGTELIB_MODEL_CANDIDATES_NB",  "int",  "-1",  " Number of candidates returned by the sgtelib model search ",  " \n . Number of candidates returned by the sgtelib model search. \n  \n . Argument: one integer \n  \n . If smaller or equal to 0, then the number of candidates \n   will be the largest value between BB_MAX_BLOCK_SIZE and \n   2 * DIMENSION \n  \n . Example: SGTELIB_MODEL_CANDIDATES_NB 8 \n . Default: -1\n\n",  "  developer advanced model sgtelib  "  , "true" , "true" , "true" },
+{ "SGTELIB_MIN_POINTS_FOR_MODEL",  "size_t",  "1",  " Minimum number of valid points necessary to build a model ",  " \n . Defines the minimum number of valid points beyond which no model will \n   be build \n  \n . Arguments: one positive integer \n  \n . Example: SGTELIB_MIN_POINTS_FOR_MODEL 5 \n  \n . Default: 1\n\n",  "  developer advanced model sgtelib  "  , "true" , "true" , "true" },
+{ "SGTELIB_MAX_POINTS_FOR_MODEL",  "size_t",  "100",  " Maximum number of valid points used to build a model ",  " \n . Defines the maximum number of valid points kept to build a model. \n   Extra points are ignored. \n  \n . Arguments: one positive integer \n  \n . Example: SGTELIB_MAX_POINTS_FOR_MODEL 96 \n  \n . Default: 100\n\n",  "  developer advanced model sgtelib  "  , "true" , "true" , "true" },
+{ "SGTELIB_MODEL_FILTER",  "std::string",  "2345",  " Methods used in the sgtelib search filter to return several search candidates ",  " \n . Methods used in the sgtelib search filter to return several search candidates \n  \n . Arguments: a string containing several integers from 0 to 5 \n  \n . Method 0: Select the best candidate \n  \n . Method 1: Select the most remote candidate \n  \n . Method 2: Select the best candidate, with minimal distance to the cache \n  \n . Method 3: Select the best candidate, with minimal margin in feasibility \n  \n . Method 4: Select the candidate with the best isolation number \n  \n . Method 5: Select the candidate with the best density number \n  \n . Examples: SGTELIB_MODEL_FILTER 0    # Only method 0 will be used \n             SGTELIB_MODEL_FILTER 01   # Alternate between method 0 and 1 \n             SGTELIB_MODEL_FILTER 2345 # Cycle through methods 2, 3, 4 and 5 \n . Default: 2345\n\n",  "  developer advanced model sgtelib  "  , "true" , "true" , "true" },
+{ "MODEL_SEARCH_PROJ_TO_MESH",  "bool",  "true",  " Model search trial points are projected to the mesh ",  " \n . True if model search trial points are projected to the mesh \n  \n . Argument: one boolean ('yes' or 'no') \n  \n . Example: MODEL_SEARCH_PROJ_TO_MESH no \n . Default: true\n\n",  "  developer models sgtelib  "  , "true" , "true" , "true" },
+{ "SPECULATIVE_SEARCH",  "bool",  "true",  " MADS speculative search method ",  " \n  \n . MADS speculative search (optimistic strategy) \n  \n . Argument: one boolean ('yes' or 'no') \n  \n . Example: SPECULATIVE_SEARCH no \n  \n . Default: true\n\n",  "  basic mads search speculative  "  , "true" , "true" , "true" },
+{ "SPECULATIVE_SEARCH_MAX",  "size_t",  "1",  " MADS speculative search method ",  " \n  \n . Number of points to generate using the MADS speculative search (optimistic \n   strategy) \n  \n . Argument: one positive integer \n  \n . Example: SPECULATIVE_SEARCH_MAX 2 \n  \n . Default: 1\n\n",  "  advanced mads search speculative  "  , "true" , "true" , "true" },
+{ "ANISOTROPIC_MESH",  "bool",  "true",  " MADS uses anisotropic mesh for generating directions ",  " \n  \n . MADS uses anisotropic mesh for generating directions \n  \n . Argument: one boolean ('yes' or 'no') \n  \n . Example: ANISOTROPIC_MESH no \n  \n . Default: true\n\n",  "  advanced mads direction directions anisotropic anisotropy aniso  "  , "true" , "true" , "true" },
+{ "ANISOTROPY_FACTOR",  "NOMAD::Double",  "0.1",  " MADS anisotropy factor for mesh size change ",  " \n  \n . Set anisotropy_factor for mesh relative coarsening/refining if the anisotropic \n   mesh is enabled. \n  \n . Argument: one positive real \n  \n . Example: ANISOTROPY_FACTOR 0.05 \n  \n . Default: 0.1\n\n",  "  advanced mads direction directions anisotropic anisotropy aniso  "  , "true" , "true" , "true" },
+{ "GENERATE_ALL_POINTS_BEFORE_EVAL",  "bool",  "false",  " Evaluate points generated from Search and Poll steps all at once ",  " \n . If true, generate all points from Search and Poll steps, and then \n   start evaluation. This method is preferred when multiple processes \n   are available in parallel to evaluate points. This way, more processes \n   will work on evaluating points simultaneously. \n  \n . If false, generate points from Search, evaluate them, and then continue \n   to Poll, or to next Search. This is the classic way of evaluation. \n   If multiple processes are available for evaluation, and the Search step \n   generated a single point, only that point is evaluated while the other \n   processes do nothing. \n  \n . Default: false\n\n",  "  advanced  "  , "true" , "true" , "true" },
+{ "USER_CALLS_ENABLED",  "bool",  "true",  " Controls the automatic calls to user function ",  " \n . If true the user functions are called (update_iteration, ...) \n  \n . Default: true\n\n",  "  advanced user users callback function functions  "  , "false" , "true" , "true" },
+{ "FRAME_CENTER_USE_CACHE",  "bool",  "false",  " Find best points in the cache and use them as frame centers ",  " \n . When this parameter is true, when the Update step occurs, the points with \n   the best values are found in the Cache. Multiple points may have the same \n   value. These points are all used as frame centers for the next Search and \n   Poll steps. \n  \n . When this parameter is false, the frame centers (one feasible and one \n   infeasible) are kept from previous iterations. This is the classical \n   MADS algorithm. \n  \n . Default: false\n\n",  "  advanced  "  , "true" , "true" , "true" },
+{ "MAX_TIME",  "size_t",  "INF",  " Maximum wall-clock time in seconds ",  " \n . Argument: one positive integer. INF means there is no maximum. \n  \n . Example: MAX_TIME 3600 # one hour max \n  \n . Default: INF\n\n",  "  basic clock stop time  "  , "false" , "true" , "true" },
+{ "NM_OPTIMIZATION",  "bool",  "false",  " Nelder Mead stand alone optimization for constrained and unconstrained pbs ",  " \n  \n . Nelder Mead optimization for constrained and unconstrained optimization \n  \n . Argument: bool \n  \n . Stand alone Nelder Mead optimization will deactivate any optimization strategy. \n  \n . Example: NM_OPTIMIZATION true \n  \n . Default: false\n\n",  "  advanced nelder mead simplex  "  , "true" , "false" , "true" },
+{ "NM_SEARCH",  "bool",  "true",  " Nelder Mead optimization used as a search step for Mads ",  " \n  \n . Nelder Mead optimization as a search step for Mads \n  \n . Argument: bool \n  \n . If NM_OPTIMIZATION is true, no optimization algorithm will be performed. \n  \n . Example: NM_SEARCH fase \n  \n . Default: true\n\n",  "  advanced nelder mead simplex mads search "  , "true" , "true" , "true" },
+{ "NM_SIMPLEX_INCLUDE_LENGTH",  "NOMAD::Double",  "INF",  " Construct NM simplex using points in cache.",  " \n  \n . Construct NM simplex using points in cache within a given distance of poll \n   center in absolute value. \n  \n . Argument: Positive double. INF means all points are considered. \n  \n . Example: NM_SIMPLEX_INCLUDE_LENGTH 0.2 \n  \n . Default: INF\n\n",  "  advanced nelder mead simplex length "  , "true" , "true" , "true" },
+{ "NM_SIMPLEX_INCLUDE_FACTOR",  "size_t",  "8",  " Construct NM simplex using points in cache.",  " \n  \n . Construct NM simplex using points in cache within a given length of frame center \n   relative. The length equals the include factor multiplied by the frame size. \n   Used only if the mesh is defined. \n  \n . Argument: Positive integer. INF means all points are considered. \n  \n . Example: NM_SIMPLEX_INCLUDE_FACTOR 10 \n  \n . Default: 8\n\n",  "  advanced nelder mead simplex include factor length poll  "  , "true" , "true" , "true" },
+{ "NM_DELTA_E",  "NOMAD::Double",  "2",  " NM expansion parameter delta_e.",  " \n  \n . Nelder Mead expansion parameter \n  \n . Argument: Positive NOMAD::Double > 1 \n  \n . Example: NM_DELTA_E 2.5 \n  \n . Default: 2\n\n",  "  advanced nelder mead simplex expansion  "  , "true" , "true" , "true" },
+{ "NM_DELTA_IC",  "NOMAD::Double",  "-0.5",  " NM inside contraction parameter delta_ic.",  " \n  \n . Nelder Mead inside contraction parameter \n  \n . Argument: Negative NOMAD::Double \n  \n . Example: NM_DELTA_IC -1 \n  \n . Default: -0.5\n\n",  "  advanced nelder mead simplex inside contraction  "  , "true" , "true" , "true" },
+{ "NM_DELTA_OC",  "NOMAD::Double",  "0.5",  " NM outside contraction parameter delta_oc.",  " \n  \n . Nelder Mead outside contraction parameter \n  \n . Argument: Positive NOMAD::Double <= 1 \n  \n . Example: NM_DELTA_OC 0.8 \n  \n . Default: 0.5\n\n",  "  advanced nelder mead simplex outside contraction  "  , "true" , "true" , "true" },
+{ "NM_GAMMA",  "NOMAD::Double",  "0.5",  " NM shrink parameter gamma.",  " \n  \n . Nelder Mead shrink parameter \n  \n . Argument: Positive NOMAD::Double <= 1 \n  \n . Example: NM_GAMMA 0.8 \n  \n . Default: 0.5\n\n",  "  advanced nelder mead simplex shrink  "  , "true" , "true" , "true" },
+{ "NM_SEARCH_MAX_TRIAL_PTS_NFACTOR",  "size_t",  "80",  " NM-Mads search stopping criterion.",  " \n  \n . NM-Mads stopping criterion. Max number of trial pts < dimension * NFactor \n  \n . Argument: Positive integer. INF disables this criterion. \n  \n . Example: NM_SEARCH_MAX_TRIAL_PTS_NFACTOR 100 \n  \n . Default: 80\n\n",  "  advanced nelder mead mads search stop trial  "  , "true" , "true" , "true" },
+{ "NM_SEARCH_RANK_EPS",  "NOMAD::Double",  "0.01",  " NM-Mads epsilon for the rank of DZ.",  " \n  \n . Precision to detect when a vector increases the rank or not. \n  \n . Argument: Positive double. \n  \n . Example: NM_SEARCH_RANK_EPS 1E-4 \n  \n . Default: 0.01\n\n",  "  advanced nelder mead mads search rank DZ  "  , "true" , "true" , "true" },
+{ "NM_SEARCH_STOP_ON_SUCCESS",  "bool",  "false",  " NM-Mads search stops on success.",  " \n  \n . NM-Mads search opportunistically stops on success. \n  \n . Argument: boolean. \n  \n . Example: NM_SEARCH_STOP_ON_SUCCESS false \n  \n . Default: false\n\n",  "  advanced nelder mead mads search opportunistic success  "  , "true" , "true" , "true" },
+{ "DISABLE",  "NOMAD::ArrayOfString",  "",  "Forcefully disable a feature",  " \n . This parameter is used to forcefully disable a feature. \n  \n . Argument: MODELS or EVAL_SORT \n  \n . DISABLE MODELS disables all uses of models. It is equivalent to set: \n       QUAD_MODEL_SEARCH and SGTELIB_SEARCH no \n  \n . WARNING: Settings of SGTELIB_SEARCH will be ignored \n  \n . DISABLE EVAL_SORT enforces that points remain in lexicographical order \n   before being send to evaluation. \n  \n . Default: Empty string.\n\n",  "  advanced model  "  , "true" , "true" , "false" },
+{ "MODEL_RADIUS_FACTOR",  "NOMAD::Double",  "2.0",  " Model radius factor ",  " \n . Model radius factor \n  \n . This parameter is used to select points to build the model \n  \n . Frame size is multiplied by this factor to get the search radius \n  \n . Points inside a circle centered on the poll center, within this radius, \n   are selected to build the model \n  \n . Arguments: one strictly positive real \n  \n . Example: MODEL_RADIUS_FACTOR 1.0 \n . Default: 2.0\n\n",  "  developer model  "  , "true" , "true" , "true" },
+{ "MAX_ITERATIONS",  "size_t",  "INF",  " The maximum number of iterations of the MADS algorithm ",  " \n  \n . Maximum number of iterations \n  \n . Argument: one positive integer. INF means there is no maximum. \n  \n . Default INF \n  \n . Example: MAX_ITERATIONS 1000 \n  \n . Default: INF\n\n",  "  advanced max maximum iteration iterations stop stops stopping criterion criterions  "  , "true" , "true" , "true" },
+{ "MAX_ITERATION_PER_MEGAITERATION",  "size_t",  "10",  " Maximum number of Iterations to generate for each MegaIteration. ",  " \n . Maximum number of Iterations to generate for each MegaIteration. \n  \n . Argument: one positive integer. INF means there is no maximum. \n  \n . If there are few points in the barrier, this parameter has no effect. \n  \n . If FRAME_CENTER_USE_CACHE is false, this parameter has no effect. \n  \n . If there are many points in the barrier, this parameter limits \n   the number of iterations generated. \n   A mixture of feasible and infeasible points of the barrier is used to \n   generate iterations. \n   Each iteration uses a point of the barrier as frame center.  \n  \n . Default: 10\n\n",  "  advanced  "  , "true" , "true" , "true" } };
+
+#endif
--- a/src/CMakeLists.txt
+++ b/src/CMakeLists.txt
@@ -333,28 +333,6 @@ endif()
 
 # build libraries
 
-# Some headers are dynamically generated and have to be taken into account before
-add_custom_command(
-    PRE_BUILD
-    OUTPUT cacheAttributesDefinition.hpp displayAttributesDefinition.hpp evalAttributesDefinition.hpp evaluatorControlAttributesDefinition.hpp pbAttributesDefinition.hpp runAttributesDefinition.hpp
-    COMMAND ${CMAKE_COMMAND} -E copy ${CMAKE_CURRENT_SOURCE_DIR}/Attribute/cacheAttributesDefinition.txt ${CMAKE_CURRENT_BINARY_DIR}/cacheAttributesDefinition.txt
-    COMMAND ${CMAKE_COMMAND} -E copy ${CMAKE_CURRENT_SOURCE_DIR}/Attribute/displayAttributesDefinition.txt ${CMAKE_CURRENT_BINARY_DIR}/displayAttributesDefinition.txt
-    COMMAND ${CMAKE_COMMAND} -E copy ${CMAKE_CURRENT_SOURCE_DIR}/Attribute/evalAttributesDefinition.txt ${CMAKE_CURRENT_BINARY_DIR}/evalAttributesDefinition.txt
-    COMMAND ${CMAKE_COMMAND} -E copy ${CMAKE_CURRENT_SOURCE_DIR}/Attribute/evaluatorControlAttributesDefinition.txt ${CMAKE_CURRENT_BINARY_DIR}/evaluatorControlAttributesDefinition.txt
-    COMMAND ${CMAKE_COMMAND} -E copy ${CMAKE_CURRENT_SOURCE_DIR}/Attribute/pbAttributesDefinition.txt ${CMAKE_CURRENT_BINARY_DIR}/pbAttributesDefinition.txt
-    COMMAND ${CMAKE_COMMAND} -E copy ${CMAKE_CURRENT_SOURCE_DIR}/Attribute/runAttributesDefinition.txt ${CMAKE_CURRENT_BINARY_DIR}/runAttributesDefinition.txt
-    COMMAND WriteAttributeDefinitionFile
-    COMMAND ${CMAKE_COMMAND} -E copy ${CMAKE_CURRENT_BINARY_DIR}/cacheAttributesDefinition.hpp ${CMAKE_CURRENT_SOURCE_DIR}/Attribute/cacheAttributesDefinition.hpp
-    COMMAND ${CMAKE_COMMAND} -E copy ${CMAKE_CURRENT_BINARY_DIR}/displayAttributesDefinition.hpp ${CMAKE_CURRENT_SOURCE_DIR}/Attribute/displayAttributesDefinition.hpp
-    COMMAND ${CMAKE_COMMAND} -E copy ${CMAKE_CURRENT_BINARY_DIR}/evalAttributesDefinition.hpp ${CMAKE_CURRENT_SOURCE_DIR}/Attribute/evalAttributesDefinition.hpp
-    COMMAND ${CMAKE_COMMAND} -E copy ${CMAKE_CURRENT_BINARY_DIR}/evaluatorControlAttributesDefinition.hpp ${CMAKE_CURRENT_SOURCE_DIR}/Attribute/evaluatorControlAttributesDefinition.hpp
-    COMMAND ${CMAKE_COMMAND} -E copy ${CMAKE_CURRENT_BINARY_DIR}/pbAttributesDefinition.hpp ${CMAKE_CURRENT_SOURCE_DIR}/Attribute/pbAttributesDefinition.hpp
-    COMMAND ${CMAKE_COMMAND} -E copy ${CMAKE_CURRENT_BINARY_DIR}/runAttributesDefinition.hpp ${CMAKE_CURRENT_SOURCE_DIR}/Attribute/runAttributesDefinition.hpp
-    DEPENDS WriteAttributeDefinitionFile)
-
-add_custom_target(write_attributes
-    DEPENDS cacheAttributesDefinition.hpp displayAttributesDefinition.hpp evalAttributesDefinition.hpp evaluatorControlAttributesDefinition.hpp pbAttributesDefinition.hpp runAttributesDefinition.hpp)
-
 # Utils
 add_library (nomadUtils SHARED ${MATH_SOURCES} ${OUTPUT_SOURCES} ${PARAM_SOURCES} ${TYPE_SOURCES} ${UTIL_SOURCES})
 target_include_directories(nomadUtils PUBLIC
@@ -364,7 +342,6 @@ target_include_directories(nomadUtils PUBLIC
     ${CMAKE_CURRENT_SOURCE_DIR}/Type
     ${CMAKE_CURRENT_SOURCE_DIR}/Util>
     $<INSTALL_INTERFACE:include/nomad>)
-add_dependencies(nomadUtils write_attributes)
 if(OpenMP_CXX_FOUND)
     target_link_libraries(nomadUtils PUBLIC OpenMP::OpenMP_CXX)
 endif()
@@ -400,12 +377,6 @@ endif()
 
 # build executables
 
-# build attribute executable
-add_executable(WriteAttributeDefinitionFile ${ATTRIBUTE_SOURCES})
-target_include_directories(WriteAttributeDefinitionFile PUBLIC
-    $<BUILD_INTERFACE:${CMAKE_CURRENT_SOURCE_DIR}/Attribute>
-    $<INSTALL_INTERFACE:include/nomad>)
-
 add_executable (nomad ${NOMAD_SOURCES}) 
 target_include_directories(nomad PUBLIC
     $<BUILD_INTERFACE:${CMAKE_CURRENT_SOURCE_DIR}/ 
@@ -430,7 +401,7 @@ else()
 endif()
 
 # installing executables and libraries
-install(TARGETS nomad WriteAttributeDefinitionFile nomadUtils nomadEval nomadAlgos nomadInterface
+install(TARGETS nomad nomadUtils nomadEval nomadAlgos nomadInterface
     RUNTIME DESTINATION ${CMAKE_INSTALL_BINDIR}
     LIBRARY DESTINATION ${CMAKE_INSTALL_LIBDIR}
     PUBLIC_HEADER DESTINATION ${CMAKE_INSTALL_INCLUDEDIR}/nomad)
