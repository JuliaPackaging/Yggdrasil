diff --git a/configure.ac b/configure.ac
index 9852afd4..b11851a4 100644
--- a/configure.ac
+++ b/configure.ac
@@ -530,19 +530,19 @@ AC_MSG_RESULT([${havecurloption}])
 if test $havecurloption = yes; then
   AC_DEFINE([HAVE_CURLOPT_KEEPALIVE],[1],[Is CURLOPT_TCP_KEEPALIVE defined])
 fi
+
 # CURLOPT_VERIFYHOST semantics differ depending on version
 AC_MSG_CHECKING([whether libcurl is version 7.66 or later?])
 AC_COMPILE_IFELSE([AC_LANG_PROGRAM(
 [#include "curl/curl.h"],
 [[
-#if LIBCURL_VERSION_NUM < 0x074200
+#if !CURL_AT_LEAST_VERSION(7,66,0)
 error "<7.66";
 #endif
 ]])], [libcurl766=yes], [libcurl766=no])
-
 AC_MSG_RESULT([$libcurl766])
-if test x$libcurl66 = xno; then
-  AC_DEFINE([HAVE_LIBCURL_766],[1],[Is libcurl version 7.66 or later])
+if test x$libcurl766 = xyes; then
+AC_DEFINE([HAVE_LIBCURL_766],[1],[libcurl version is 7.66 or later])
 fi
 
 CFLAGS="$SAVECFLAGS"
diff --git a/include/netcdf_json.h b/include/netcdf_json.h
index 33eabe46..e063319d 100644
--- a/include/netcdf_json.h
+++ b/include/netcdf_json.h
@@ -613,13 +613,13 @@ testdouble(const char* word)
     double d;
     int count = 0;
     /* Check for Nan and Infinity */
-    if(strcasecmp("nan",word)==0) return NCJTHROW(NCJ_OK);
-    if(strcasecmp("infinity",word)==0) return NCJTHROW(NCJ_OK);
-    if(strcasecmp("-infinity",word)==0) return NCJTHROW(NCJ_OK);
+    if(0==(int)strcasecmp("nan",word)) return NCJTHROW(NCJ_OK);
+    if(0==(int)strcasecmp("infinity",word)) return NCJTHROW(NCJ_OK);
+    if(0==(int)strcasecmp("-infinity",word)) return NCJTHROW(NCJ_OK);
     /* Allow the XXXf versions as well */
-    if(strcasecmp("nanf",word)==0) return NCJTHROW(NCJ_OK);
-    if(strcasecmp("infinityf",word)==0) return NCJTHROW(NCJ_OK);
-    if(strcasecmp("-infinityf",word)==0) return NCJTHROW(NCJ_OK);
+    if(0==(int)strcasecmp("nanf",word)) return NCJTHROW(NCJ_OK);
+    if(0==(int)strcasecmp("infinityf",word)) return NCJTHROW(NCJ_OK);
+    if(0==(int)strcasecmp("-infinityf",word)) return NCJTHROW(NCJ_OK);
     /* Try to convert to number */
     ncvt = sscanf(word,"%lg%n",&d,&count);
     return NCJTHROW((ncvt == 1 && strlen(word)==count ? NCJ_OK : NCJ_ERR));
@@ -1226,8 +1226,7 @@ NCJtotext(const NCjson* json)
     char* text = NULL;
     if(json == NULL) {strcpy(outtext,"<null>"); goto done;}
     (void)NCJunparse(json,0,&text);
-    outtext[0] = '\0';
-    strlcat(outtext,text,sizeof(outtext));
+    strncpy(outtext,text,sizeof(outtext));
     nullfree(text);
 done:
     return outtext;
diff --git a/libdispatch/drc.c b/libdispatch/drc.c
index 07f7ed95..e021ee41 100644
--- a/libdispatch/drc.c
+++ b/libdispatch/drc.c
@@ -567,11 +567,12 @@ rcequal(NCRCentry* e1, NCRCentry* e2)
     nulltest = 0;
     if(e1->host == NULL) nulltest |= 1;
     if(e2->host == NULL) nulltest |= 2;
+    /* Use host to decide if entry applies */
     switch (nulltest) {
     case 0: if(strcmp(e1->host,e2->host) != 0) {return 0;}  break;
-    case 1: return 0;
-    case 2: return 0;
-    case 3: break;
+    case 1: break;    /* .rc->host == NULL && candidate->host != NULL */
+    case 2: return 0; /* .rc->host != NULL && candidate->host == NULL */
+    case 3: break;    /* .rc->host == NULL && candidate->host == NULL */
     default: return 0;
     }
     /* test urlpath take NULL into account*/
@@ -580,9 +581,9 @@ rcequal(NCRCentry* e1, NCRCentry* e2)
     if(e2->urlpath == NULL) nulltest |= 2;
     switch (nulltest) {
     case 0: if(strcmp(e1->urlpath,e2->urlpath) != 0) {return 0;} break;
-    case 1: return 0;
-    case 2: return 0;
-    case 3: break;
+    case 1: break;    /* .rc->urlpath == NULL && candidate->urlpath != NULL */
+    case 2: return 0; /* .rc->urlpath != NULL && candidate->urlpath == NULL */
+    case 3: break;    /* .rc->urlpath == NULL && candidate->urlpath == NULL */
     default: return 0;
     }
     return 1;
diff --git a/libdispatch/ncjson.c b/libdispatch/ncjson.c
index a50b1a93..7730f42f 100644
--- a/libdispatch/ncjson.c
+++ b/libdispatch/ncjson.c
@@ -1080,8 +1080,7 @@ NCJtotext(const NCjson* json)
     char* text = NULL;
     if(json == NULL) {strcpy(outtext,"<null>"); goto done;}
     (void)NCJunparse(json,0,&text);
-    outtext[0] = '\0';
-    strlcat(outtext,text,sizeof(outtext));
+    strncpy(outtext,text,sizeof(outtext));
     nullfree(text);
 done:
     return outtext;
diff --git a/oc2/occurlfunctions.c b/oc2/occurlfunctions.c
index 41767788..06b3fd35 100644
--- a/oc2/occurlfunctions.c
+++ b/oc2/occurlfunctions.c
@@ -130,6 +130,7 @@ ocset_curlflag(OCstate* state, int flag)
     case CURLOPT_USE_SSL:
     case CURLOPT_SSLCERT: case CURLOPT_SSLKEY:
     case CURLOPT_SSL_VERIFYPEER: case CURLOPT_SSL_VERIFYHOST:
+    case CURLOPT_CAINFO: case CURLOPT_CAPATH:
     {
         struct ssl* ssl = &state->auth->ssl;
 	/* VERIFYPEER == 0 => VERIFYHOST == 0 */
diff --git a/plugins/H5Znoop.c b/plugins/H5Znoop.c
index d50fe142..03f62a3c 100644
--- a/plugins/H5Znoop.c
+++ b/plugins/H5Znoop.c
@@ -230,16 +230,21 @@ NCZ_noop_hdf5_to_codec(size_t nparams, const unsigned* params, char** codecp)
     int i,stat = NC_NOERR;
     char json[8192];
     char value[1024];
+    size_t jlen, count;
 
     if(nparams != 0 && params == NULL)
         {stat = NC_EINVAL; goto done;}
 
-    snprintf(json,sizeof(json),"{\"id\": \"%s\"",NCZ_noop_codec.codecid);
+
+    jlen = sizeof(json);
+    count = snprintf(json,sizeof(json),"{\"id\": \"%s\"",NCZ_noop_codec.codecid);
     for(i=0;i<nparams;i++) {
-        snprintf(value,sizeof(value),", \"p%d\": \"%u\"",i,params[i]);
-	strlcat(json,value,sizeof(json));
+        size_t len = snprintf(value,sizeof(value),", \"p%d\": \"%u\"",i,params[i]);
+	count += len; assert(jlen > count);
+	strcat(json,value);
     }
-    strlcat(json,"}",sizeof(json));
+    count += 1; assert(jlen > count);
+    strcat(json,"}");
     if(codecp) {
         if((*codecp = strdup(json))==NULL) {stat = NC_ENOMEM; goto done;}
     }
diff --git a/plugins/Makefile.am b/plugins/Makefile.am
index 762da932..89076a82 100644
--- a/plugins/Makefile.am
+++ b/plugins/Makefile.am
@@ -21,7 +21,7 @@ AM_LDFLAGS += $(plugin_version_info)
 endif !ISCYGWIN
 endif !ISMINGW
 
-# Create an alternate directory if not installing or for noinst installs.
+# Create an alternate directory if not installing.
 ALTPLUGINDIR = ${abs_top_builddir}/plugins/plugindir
 
 # This is where the plugins are to be installed
@@ -82,11 +82,11 @@ endif # ENABLE_NCZARR_FILTERS
 
 if ENABLE_PLUGINS
 
-# The NCZarr codec libraries
+# The NCZarr codec libraries (they need libnetcdf)
 lib__nczstdfilters_la_SOURCES = NCZstdfilters.c
-lib__nczstdfilters_la_LIBADD = $(LIBADD)
+lib__nczstdfilters_la_LIBADD = $(LIBADD)  $(top_builddir)/liblib/libnetcdf.la
 lib__nczhdf5filters_la_SOURCES = NCZhdf5filters.c
-lib__nczhdf5filters_la_LIBADD = $(LIBADD)
+lib__nczhdf5filters_la_LIBADD = $(LIBADD) $(top_builddir)/liblib/libnetcdf.la
 
 plugins_to_install += lib__nczhdf5filters.la
 plugins_to_install += lib__nczstdfilters.la
diff --git a/plugins/NCZmisc.c b/plugins/NCZmisc.c
index 06c68797..94883576 100644
--- a/plugins/NCZmisc.c
+++ b/plugins/NCZmisc.c
@@ -156,6 +156,7 @@ NCZ_misc_hdf5_to_codec(size_t nparams, const unsigned* params, char** codecp)
     int i,stat = NC_NOERR;
     char json[4096];
     char value[1024];
+    size_t count, jlen;
 
     if(nparams == 0 || params == NULL)
         {stat = NC_EINVAL; goto done;}
@@ -164,12 +165,15 @@ NCZ_misc_hdf5_to_codec(size_t nparams, const unsigned* params, char** codecp)
 	stat = NC_EINVAL;
 	goto done;
     }
-    snprintf(json,sizeof(json),"{\"id\": \"%s\"",NCZ_misc_codec.codecid);
+    jlen = sizeof(json);
+    count = snprintf(json,sizeof(json),"{\"id\": \"%s\"",NCZ_misc_codec.codecid);
     for(i=0;i<14;i++) {
-        snprintf(value,sizeof(value),", \"%s\": \"%u\"",fields[i],params[i]);
-	strlcat(json,value,sizeof(json));
+        size_t len = snprintf(value,sizeof(value),", \"%s\": \"%u\"",fields[i],params[i]);
+	count += len; assert(jlen > count);
+	strcat(json,value);
     }
-    strlcat(json,"}",sizeof(json));
+    count += 1; assert(jlen > count);
+    strcat(json,"}");
     if(codecp) {
         if((*codecp = strdup(json))==NULL) {stat = NC_ENOMEM; goto done;}
     }
