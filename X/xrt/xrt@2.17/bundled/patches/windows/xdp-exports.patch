--- a/src/runtime_src/xdp/profile/database/events/device_events.h
+++ b/src/runtime_src/xdp/profile/database/events/device_events.h
@@ -72,7 +72,7 @@ namespace xdp {
                            uint64_t devId, uint32_t monId, int32_t cuIdx);
     XDP_CORE_EXPORT ~KernelEvent();
 
-    XDP_CORE_EXPORT virtual int32_t getCUId() { return cuId; }
+    virtual int32_t getCUId() { return cuId; }
     XDP_CORE_EXPORT virtual void dump(std::ofstream& fout, uint32_t bucket) ;
   };
 
--- a/src/runtime_src/xdp/profile/database/events/native_events.h
+++ b/src/runtime_src/xdp/profile/database/events/native_events.h
@@ -28,7 +28,7 @@ namespace xdp {
     XDP_CORE_EXPORT NativeAPICall(uint64_t s_id, double ts, uint64_t name);
     XDP_CORE_EXPORT ~NativeAPICall() = default;
 
-    XDP_CORE_EXPORT virtual bool isNativeHostEvent() { return true; }
+    virtual bool isNativeHostEvent() { return true; }
 
     XDP_CORE_EXPORT virtual void dump(std::ofstream& fout, uint32_t bucket);
   };
@@ -41,7 +41,7 @@ namespace xdp {
     XDP_CORE_EXPORT NativeSyncRead(uint64_t s_id, double ts, uint64_t name);
     XDP_CORE_EXPORT ~NativeSyncRead() = default;
 
-    XDP_CORE_EXPORT virtual bool isNativeRead() override { return true; }
+    virtual bool isNativeRead() override { return true; }
 
     // For printing out the event in a different bucket as a different
     //  type of event, without having to store additional events in the database
@@ -56,7 +56,7 @@ namespace xdp {
     XDP_CORE_EXPORT NativeSyncWrite(uint64_t s_id, double ts, uint64_t name);
     XDP_CORE_EXPORT ~NativeSyncWrite() = default;
 
-    XDP_CORE_EXPORT virtual bool isNativeWrite() override { return true; }
+    virtual bool isNativeWrite() override { return true; }
 
     // For printing out the event in a different bucket as a different
     //  type of event, without having to store additional events in the databaes
--- a/src/runtime_src/xdp/profile/database/events/vtf_event.h
+++ b/src/runtime_src/xdp/profile/database/events/vtf_event.h
@@ -135,7 +135,7 @@ namespace xdp {
 
     virtual uint64_t getDevice() { return 0 ; } // CHECK
     XDP_CORE_EXPORT virtual void dump(std::ofstream& fout, uint32_t bucket) ;
-    XDP_CORE_EXPORT virtual void dumpSync(std::ofstream& /*fout*/, uint32_t /*bucket*/) {};
+    virtual void dumpSync(std::ofstream& /*fout*/, uint32_t /*bucket*/) {};
   } ;
 
   // Used so the database can sort based on timestamp order
--- a/src/runtime_src/xdp/profile/database/static_info/device_info.h
+++ b/src/runtime_src/xdp/profile/database/static_info/device_info.h
@@ -92,7 +92,7 @@ namespace xdp {
     inline bool isNoDMA() const { return isNoDMADevice ; }
     double getMaxClockRatePLMHz();
 
-    XDP_CORE_EXPORT void setAIEGeneration(uint8_t hw_gen) { aieGeneration = hw_gen; }
+    void setAIEGeneration(uint8_t hw_gen) { aieGeneration = hw_gen; }
     inline uint8_t getAIEGeneration() const { return aieGeneration ; }
 
     // ****** Functions for information on the currently loaded xclbin *******
