--- a/config/PETSc/Configure.py
+++ b/config/PETSc/Configure.py
@@ -125,7 +125,7 @@
     headersC = map(lambda name: name+'.h',['setjmp','dos','fcntl','float','io','malloc','pwd','strings',
                                             'unistd','sys/sysinfo','machine/endian','sys/param','sys/procfs','sys/resource',
                                             'sys/systeminfo','sys/times','sys/utsname',
-                                            'sys/socket','sys/wait','netinet/in','netdb','Direct','time','Ws2tcpip','sys/types',
+                                            'sys/socket','sys/wait','netinet/in','netdb','direct','time','Ws2tcpip','sys/types',
                                             'WindowsX','float','ieeefp','stdint','pthread','inttypes','immintrin','zmmintrin'])
     functions = ['access','_access','clock','drand48','getcwd','_getcwd','getdomainname','gethostname',
                  'getwd','memalign','popen','PXFGETARG','rand','getpagesize',
@@ -708,38 +708,38 @@
   def configureWin32(self):
     '''Win32 non-cygwin specific stuff'''
     kernel32=0
-    if self.libraries.add('Kernel32.lib','GetComputerName',prototype='#include <Windows.h>', call='GetComputerName(NULL,NULL);'):
+    if self.libraries.add('Kernel32.lib','GetComputerName',prototype='#include <windows.h>', call='GetComputerName(NULL,NULL);'):
       self.addDefine('HAVE_WINDOWS_H',1)
       self.addDefine('HAVE_GETCOMPUTERNAME',1)
       kernel32=1
-    elif self.libraries.add('kernel32','GetComputerName',prototype='#include <Windows.h>', call='GetComputerName(NULL,NULL);'):
+    elif self.libraries.add('kernel32','GetComputerName',prototype='#include <windows.h>', call='GetComputerName(NULL,NULL);'):
       self.addDefine('HAVE_WINDOWS_H',1)
       self.addDefine('HAVE_GETCOMPUTERNAME',1)
       kernel32=1
     if kernel32:
       if self.framework.argDB['with-windows-graphics']:
         self.addDefine('USE_WINDOWS_GRAPHICS',1)
-      if self.checkLink('#include <Windows.h>','LoadLibrary(0)'):
+      if self.checkLink('#include <windows.h>','LoadLibrary(0)'):
         self.addDefine('HAVE_LOADLIBRARY',1)
-      if self.checkLink('#include <Windows.h>','GetProcAddress(0,0)'):
+      if self.checkLink('#include <windows.h>','GetProcAddress(0,0)'):
         self.addDefine('HAVE_GETPROCADDRESS',1)
-      if self.checkLink('#include <Windows.h>','FreeLibrary(0)'):
+      if self.checkLink('#include <windows.h>','FreeLibrary(0)'):
         self.addDefine('HAVE_FREELIBRARY',1)
-      if self.checkLink('#include <Windows.h>','GetLastError()'):
+      if self.checkLink('#include <windows.h>','GetLastError()'):
         self.addDefine('HAVE_GETLASTERROR',1)
-      if self.checkLink('#include <Windows.h>','SetLastError(0)'):
+      if self.checkLink('#include <windows.h>','SetLastError(0)'):
         self.addDefine('HAVE_SETLASTERROR',1)
-      if self.checkLink('#include <Windows.h>\n','QueryPerformanceCounter(0);\n'):
+      if self.checkLink('#include <windows.h>\n','QueryPerformanceCounter(0);\n'):
         self.addDefine('USE_MICROSOFT_TIME',1)
-    if self.libraries.add('Advapi32.lib','GetUserName',prototype='#include <Windows.h>', call='GetUserName(NULL,NULL);'):
+    if self.libraries.add('Advapi32.lib','GetUserName',prototype='#include <windows.h>', call='GetUserName(NULL,NULL);'):
       self.addDefine('HAVE_GET_USER_NAME',1)
-    elif self.libraries.add('advapi32','GetUserName',prototype='#include <Windows.h>', call='GetUserName(NULL,NULL);'):
+    elif self.libraries.add('advapi32','GetUserName',prototype='#include <windows.h>', call='GetUserName(NULL,NULL);'):
       self.addDefine('HAVE_GET_USER_NAME',1)
 
-    if not self.libraries.add('User32.lib','GetDC',prototype='#include <Windows.h>',call='GetDC(0);'):
-      self.libraries.add('user32','GetDC',prototype='#include <Windows.h>',call='GetDC(0);')
-    if not self.libraries.add('Gdi32.lib','CreateCompatibleDC',prototype='#include <Windows.h>',call='CreateCompatibleDC(0);'):
-      self.libraries.add('gdi32','CreateCompatibleDC',prototype='#include <Windows.h>',call='CreateCompatibleDC(0);')
+    if not self.libraries.add('User32.lib','GetDC',prototype='#include <windows.h>',call='GetDC(0);'):
+      self.libraries.add('user32','GetDC',prototype='#include <windows.h>',call='GetDC(0);')
+    if not self.libraries.add('Gdi32.lib','CreateCompatibleDC',prototype='#include <windows.h>',call='CreateCompatibleDC(0);'):
+      self.libraries.add('gdi32','CreateCompatibleDC',prototype='#include <windows.h>',call='CreateCompatibleDC(0);')
 
     self.types.check('int32_t', 'int')
     if not self.checkCompile('#include <sys/types.h>\n','uid_t u;\n'):
@@ -752,11 +752,11 @@
     if not self.checkLink('#include <sys/stat.h>\n','int a=0;\nif (S_ISDIR(a)){}\n'):
       self.framework.addDefine('S_ISREG(a)', '(((a)&_S_IFMT) == _S_IFREG)')
       self.framework.addDefine('S_ISDIR(a)', '(((a)&_S_IFMT) == _S_IFDIR)')
-    if self.checkCompile('#include <Windows.h>\n','LARGE_INTEGER a;\nDWORD b=a.u.HighPart;\n'):
+    if self.checkCompile('#include <windows.h>\n','LARGE_INTEGER a;\nDWORD b=a.u.HighPart;\n'):
       self.addDefine('HAVE_LARGE_INTEGER_U',1)
 
     # Windows requires a Binary file creation flag when creating/opening binary files.  Is a better test in order?
-    if self.checkCompile('#include <Windows.h>\n#include <fcntl.h>\n', 'int flags = O_BINARY;'):
+    if self.checkCompile('#include <windows.h>\n#include <fcntl.h>\n', 'int flags = O_BINARY;'):
       self.addDefine('HAVE_O_BINARY',1)
 
     if self.compilers.CC.find('win32fe') >= 0:
--- a/src/sys/mpiuni/mpitime.c
+++ b/src/sys/mpiuni/mpitime.c
@@ -10,7 +10,7 @@
    Microsoft Windows has its own time routines
 */
 #if defined (PETSC_USE_MICROSOFT_TIME)
-#include <Windows.h>
+#include <windows.h>
 #define FACTOR   4294967296.0 /* pow(2,32) */
 
 double MPI_Wtime(void)
