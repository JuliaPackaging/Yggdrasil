--- a/CPP/Windows/FileDir.cpp
+++ b/CPP/Windows/FileDir.cpp
@@ -32,35 +32,6 @@
 using namespace NFile;
 using namespace NName;
 
-#ifndef _WIN32
-
-static bool FiTime_To_timespec(const CFiTime *ft, timespec &ts)
-{
-  if (ft)
-  {
-#if defined(_AIX)
-    ts.tv_sec  = ft->tv_sec;
-    ts.tv_nsec = ft->tv_nsec;
-#else
-    ts = *ft;
-#endif
-    return true;
-  }
-  // else
-  {
-    ts.tv_sec = 0;
-    ts.tv_nsec =
-    #ifdef UTIME_OMIT
-      UTIME_OMIT; // -2 keep old timesptamp
-    #else
-      // UTIME_NOW; -1 // set to the current time
-      0;
-    #endif
-    return false;
-  }
-}
-#endif
-
 namespace NWindows {
 namespace NFile {
 namespace NDir {
@@ -1184,49 +1155,12 @@
 
 static bool SetFileTime_Base(CFSTR path, const CFiTime *cTime, const CFiTime *aTime, const CFiTime *mTime, const int flags)
 {
-  // need testing
-  /*
-  struct utimbuf buf;
-  struct stat st;
   UNUSED_VAR(cTime)
-  printf("\nstat = %s\n", path);
-  int ret = stat(path, &st);
-  if (ret == 0)
-  {
-    buf.actime  = st.st_atime;
-    buf.modtime = st.st_mtime;
-  }
-  else
-  {
-    time_t cur_time = time(0);
-    buf.actime  = cur_time;
-    buf.modtime = cur_time;
-  }
-  if (aTime)
-  {
-    UInt32 ut;
-    if (NTime::FileTimeToUnixTime(*aTime, ut))
-      buf.actime = ut;
-  }
-  if (mTime)
-  {
-    UInt32 ut;
-    if (NTime::FileTimeToUnixTime(*mTime, ut))
-      buf.modtime = ut;
-  }
-  return utime(path, &buf) == 0;
-  */
-
-  // if (!aTime && !mTime) return true;
-  struct timespec times[2];
-  UNUSED_VAR(cTime)
-  bool needChange;
-  needChange  = FiTime_To_timespec(aTime, times[0]);
-  needChange |= FiTime_To_timespec(mTime, times[1]);
-  // if (mTime) { printf("\n time = %ld.%9ld\n", mTime->tv_sec, mTime->tv_nsec);  }
-  if (!needChange)
-    return true;
-  return utimensat(AT_FDCWD, path, times, flags) == 0;
+  UNUSED_VAR(aTime)
+  UNUSED_VAR(mTime)
+  UNUSED_VAR(path)
+  UNUSED_VAR(flags)
+  return true;
 }
 
 bool SetDirTime(CFSTR path, const CFiTime *cTime, const CFiTime *aTime, const CFiTime *mTime)
