From 6305f5ffdfa5bd9c675a53d516a966f0d81d9927 Mon Sep 17 00:00:00 2001
From: =?UTF-8?q?Mos=C3=A8=20Giordano?= <mose@gnu.org>
Date: Sat, 17 Apr 2021 02:28:41 +0100
Subject: [PATCH] Replace run checks with compile checks

We have it backward compared to the most general case in the sense that our
platforms are defined by the compiler currently in use, so we can turn a bunch
of runtime tests to compiler checks.
---
 cmake/pcl_find_sse.cmake | 134 ++++++++++++---------------------------
 1 file changed, 39 insertions(+), 95 deletions(-)

diff --git a/cmake/pcl_find_sse.cmake b/cmake/pcl_find_sse.cmake
index e6604d326..b6aa61bec 100644
--- a/cmake/pcl_find_sse.cmake
+++ b/cmake/pcl_find_sse.cmake
@@ -25,10 +25,10 @@ macro(PCL_CHECK_FOR_SSE)
     # precision). One solution would be to use "-ffloat-store" on 32bit (see
     # http://gcc.gnu.org/onlinedocs/gcc/Optimize-Options.html), but that slows code down,
     # so the preferred solution is to try "-mpfmath=sse" first.
-    include(CheckCXXSourceRuns)
+    include(CheckCXXSourceCompiles)
     set(CMAKE_REQUIRED_FLAGS)
 
-    check_cxx_source_runs("
+    check_cxx_source_compiles("
         // Intel compiler defines an incompatible _mm_malloc signature
         #if defined(__INTEL_COMPILER)
             #include <malloc.h>
@@ -42,7 +42,7 @@ macro(PCL_CHECK_FOR_SSE)
         }"
         HAVE_MM_MALLOC)
 
-    check_cxx_source_runs("
+    check_cxx_source_compiles("
         #include <stdlib.h>
         int main()
         {
@@ -51,119 +51,63 @@ macro(PCL_CHECK_FOR_SSE)
         }"
         HAVE_POSIX_MEMALIGN)
 
-    if(CMAKE_COMPILER_IS_GNUCC OR CMAKE_COMPILER_IS_GNUCXX OR CMAKE_COMPILER_IS_CLANG)
-        set(CMAKE_REQUIRED_FLAGS "-msse4.2")
-    endif()
-
-    check_cxx_source_runs("
-        #include <emmintrin.h>
-        #include <nmmintrin.h>
-        int main ()
+    check_cxx_source_compiles("
+        #if !defined(__SSE4_2__)
+            #error
+        #endif
+        int main()
         {
-          long long a[2] = {  1, 2 };
-          long long b[2] = { -1, 3 };
-          long long c[2];
-          __m128i va = _mm_loadu_si128 ((__m128i*)a);
-          __m128i vb = _mm_loadu_si128 ((__m128i*)b);
-          __m128i vc = _mm_cmpgt_epi64 (va, vb);
-
-          _mm_storeu_si128 ((__m128i*)c, vc);
-          if (c[0] == -1LL && c[1] == 0LL)
-            return (0);
-          else
-            return (1);
+          return 0;
         }"
         HAVE_SSE4_2_EXTENSIONS)
 
-    if(CMAKE_COMPILER_IS_GNUCC OR CMAKE_COMPILER_IS_GNUCXX OR CMAKE_COMPILER_IS_CLANG)
-        set(CMAKE_REQUIRED_FLAGS "-msse4.1")
-    endif()
-
-    check_cxx_source_runs("
-        #include <smmintrin.h>
-        int main ()
+    check_cxx_source_compiles("
+        #if !defined(__SSE4_1__)
+            #error
+        #endif
+        int main()
         {
-          __m128 a, b;
-          float vals[4] = {1, 2, 3, 4};
-          const int mask = 123;
-          a = _mm_loadu_ps (vals);
-          b = a;
-          b = _mm_dp_ps (a, a, mask);
-          _mm_storeu_ps (vals,b);
-          return (0);
+          return 0;
         }"
         HAVE_SSE4_1_EXTENSIONS)
 
-    if(CMAKE_COMPILER_IS_GNUCC OR CMAKE_COMPILER_IS_GNUCXX OR CMAKE_COMPILER_IS_CLANG)
-        set(CMAKE_REQUIRED_FLAGS "-mssse3")
-    endif()
-
-    check_cxx_source_runs("
-        #include <tmmintrin.h>
-        int main ()
+    check_cxx_source_compiles("
+        #if !defined(__SSSE3__)
+            #error
+        #endif
+        int main()
         {
-          __m128i a, b;
-          int vals[4] = {-1, -2, -3, -4};
-          a = _mm_loadu_si128 ((const __m128i*)vals);
-          b = _mm_abs_epi32 (a);
-          _mm_storeu_si128 ((__m128i*)vals, b);
-          return (0);
+          return 0;
         }"
         HAVE_SSSE3_EXTENSIONS)
 
-    if(CMAKE_COMPILER_IS_GNUCC OR CMAKE_COMPILER_IS_GNUCXX OR CMAKE_COMPILER_IS_CLANG)
-        set(CMAKE_REQUIRED_FLAGS "-msse3")
-    endif()
-
-    check_cxx_source_runs("
-        #include <pmmintrin.h>
-        int main ()
+    check_cxx_source_compiles("
+        #if !defined(__SSE3__)
+            #error
+        #endif
+        int main()
         {
-            __m128d a, b;
-            double vals[2] = {0};
-            a = _mm_loadu_pd (vals);
-            b = _mm_hadd_pd (a,a);
-            _mm_storeu_pd (vals, b);
-            return (0);
+          return 0;
         }"
         HAVE_SSE3_EXTENSIONS)
 
-    if(CMAKE_COMPILER_IS_GNUCC OR CMAKE_COMPILER_IS_GNUCXX OR CMAKE_COMPILER_IS_CLANG)
-        set(CMAKE_REQUIRED_FLAGS "-msse2")
-    elseif(MSVC AND NOT CMAKE_CL_64)
-        set(CMAKE_REQUIRED_FLAGS "/arch:SSE2")
-    endif()
-
-    check_cxx_source_runs("
-        #include <emmintrin.h>
-        int main ()
+    check_cxx_source_compiles("
+        #if !defined(__SSE2__)
+            #error
+        #endif
+        int main()
         {
-            __m128d a, b;
-            double vals[2] = {0};
-            a = _mm_loadu_pd (vals);
-            b = _mm_add_pd (a,a);
-            _mm_storeu_pd (vals,b);
-            return (0);
+          return 0;
         }"
         HAVE_SSE2_EXTENSIONS)
 
-    if(CMAKE_COMPILER_IS_GNUCC OR CMAKE_COMPILER_IS_GNUCXX OR CMAKE_COMPILER_IS_CLANG)
-        set(CMAKE_REQUIRED_FLAGS "-msse")
-    elseif(MSVC AND NOT CMAKE_CL_64)
-        set(CMAKE_REQUIRED_FLAGS "/arch:SSE")
-    endif()
-
-    check_cxx_source_runs("
-        #include <xmmintrin.h>
-        int main ()
+    check_cxx_source_compiles("
+        #if !defined(__SSE__)
+            #error
+        #endif
+        int main()
         {
-            __m128 a, b;
-            float vals[4] = {0};
-            a = _mm_loadu_ps (vals);
-            b = a;
-            b = _mm_add_ps (a,b);
-            _mm_storeu_ps (vals,b);
-            return (0);
+          return 0;
         }"
         HAVE_SSE_EXTENSIONS)
 
-- 
2.31.0

