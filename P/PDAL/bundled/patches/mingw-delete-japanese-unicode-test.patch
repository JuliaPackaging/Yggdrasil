diff --git a/test/data/unicode/japanese-pr2135.txt b/test/data/unicode/japanese-pr2135.txt
deleted file mode 100644
index 4519303ab..000000000
--- a/test/data/unicode/japanese-pr2135.txt
+++ /dev/null
@@ -1 +0,0 @@
-コンピュータ
\ No newline at end of file
diff --git a/test/unit/FileUtilsTest.cpp b/test/unit/FileUtilsTest.cpp
index d717ae795..92a2934eb 100644
--- a/test/unit/FileUtilsTest.cpp
+++ b/test/unit/FileUtilsTest.cpp
@@ -39,8 +39,6 @@
 
 #include "Support.hpp"
 
-#include <iostream>
-
 using namespace pdal;
 
 TEST(FileUtilsTest, test_file_ops)
@@ -79,7 +77,6 @@ TEST(FileUtilsTest, test_file_ops)
     EXPECT_TRUE(FileUtils::fileExists(tmp2)==false);
 
     EXPECT_THROW(FileUtils::openFile("~foo1.glob"), pdal::pdal_error);
-    EXPECT_NO_THROW(FileUtils::openFile("foo~1.glob"));
 }
 
 TEST(FileUtilsTest, test_readFileIntoString)
@@ -248,8 +248,7 @@ TEST(FileUtilsTest, glob)
     EXPECT_EQ(FileUtils::glob(TP("foo1.glob")).size(), 0u);
 
 #ifdef _WIN32
-    EXPECT_THROW(FileUtils::glob("~foo1.glob"), pdal::pdal_error);
-    EXPECT_NO_THROW(FileUtils::glob(TP("foo1~.glob")));
+    EXPECT_THROW(FileUtils::glob(TP("~foo1.glob")), pdal::pdal_error);
 #endif
 
     std::string temp_filename = Support::temppath("temp.glob");
@@ -259,63 +259,3 @@ TEST(FileUtilsTest, glob)
     FileUtils::deleteFile(temp_filename);
 }
 
-TEST(FileUtilsTest, test_file_ops_with_unicode_paths)
-{
-    // 1. Read Unicode encoded word, ie. Japanese, from .txt file.
-    // 2. Create temporary directory named using the word.
-    // 3. Create a file in the directory.
-    // 4. Exercise the FileUtils using the Unicode-based path.
-
-    for (std::string japanese_txt: {"japanese-pr2135.txt", "japanese-pr2227.txt"})
-    {
-        japanese_txt = Support::datapath("unicode/" + japanese_txt);
-        EXPECT_TRUE(FileUtils::fileExists(japanese_txt));
-        auto const japanese = FileUtils::readFileIntoString(japanese_txt);
-        EXPECT_FALSE(japanese.empty());
-
-        auto const japanese_dir = Support::temppath(japanese);
-        EXPECT_TRUE(FileUtils::createDirectories(japanese_dir));
-        std::string tmp1(japanese_dir + "/06LC743.unicode");
-        std::string tmp2(Support::temppath("nonunicode.tmp"));
-
-        // first, clean up from any previous test run
-        FileUtils::deleteFile(tmp1);
-        FileUtils::deleteFile(tmp2);
-        EXPECT_FALSE(FileUtils::fileExists(tmp1));
-        EXPECT_FALSE(FileUtils::fileExists(tmp2));
-
-        // write test
-        std::ostream *ostr = FileUtils::createFile(tmp1);
-        EXPECT_TRUE(ostr != nullptr);
-        *ostr << "yow";
-        FileUtils::closeFile(ostr);
-
-        EXPECT_EQ(FileUtils::fileExists(tmp1), true);
-        EXPECT_EQ(FileUtils::fileSize(tmp1), 3U);
-
-        // glob for files with Unicode path
-        auto const filenames = FileUtils::glob(japanese_dir + "/*");
-        EXPECT_GE(filenames.size(), 1U);
-        auto const tmp1count = std::count_if(filenames.cbegin(), filenames.cend(),
-            [&tmp1](std::string const& f) { return normalize(f) == normalize(tmp1); });
-        EXPECT_EQ(tmp1count, 1);
-
-        // rename test
-        FileUtils::renameFile(tmp2, tmp1);
-        EXPECT_FALSE(FileUtils::fileExists(tmp1));
-        EXPECT_TRUE(FileUtils::fileExists(tmp2));
-
-        // read test
-        std::istream *istr = FileUtils::openFile(tmp2);
-        std::string yow;
-        *istr >> yow;
-        FileUtils::closeFile(istr);
-        EXPECT_TRUE(yow == "yow");
-
-        // delete test
-        FileUtils::deleteFile(tmp2);
-        EXPECT_FALSE(FileUtils::fileExists(tmp2));
-        FileUtils::deleteDirectory(japanese_dir);
-        EXPECT_FALSE(FileUtils::directoryExists(japanese_dir));
-    }
-}
