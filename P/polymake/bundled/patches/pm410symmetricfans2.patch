commit 79931a9fe2b6c042c0535770ecbbaab7118fa2c9
Author: Benjamin Lorenz <lorenz@math.tu-berlin.de>
Date:   Sat Jul 1 01:36:13 2023 +0200

    induced actions: improve rule syntax to avoid overwriting subobjects
    
    and fix example
    
    @Jenkins: full

diff --git a/apps/fan/rules/action.rules b/apps/fan/rules/action.rules
index 388ebef548..4027a27ce6 100644
--- a/apps/fan/rules/action.rules
+++ b/apps/fan/rules/action.rules
@@ -164,7 +164,7 @@ object PolyhedralFan {
    weight 1.10;
 
    rule GROUP.RAYS_ACTION.GENERATORS : GROUP.MAXIMAL_CONES_ACTION.GENERATORS, MAXIMAL_CONES_THRU_RAYS {
-      $this->GROUP->RAYS_ACTION = group::induce_permutation_action($this, "MAXIMAL_CONES_ACTION", "MAXIMAL_CONES_THRU_RAYS", "ray_action", "induced from maximal cones action", 0);
+      $this->GROUP->RAYS_ACTION->GENERATORS = group::induce_permutation_action($this, "MAXIMAL_CONES_ACTION", "MAXIMAL_CONES_THRU_RAYS", "ray_action", "induced from maximal cones action", 0)->GENERATORS;
    }
    weight 1.10;
 
@@ -174,7 +174,7 @@ object PolyhedralFan {
    weight 1.10;
 
    rule GROUP.RAYS_ACTION.GENERATORS : GROUP.HOMOGENEOUS_COORDINATE_ACTION.GENERATORS, RAYS {
-      $this->GROUP->RAYS_ACTION = group::induce_permutation_action($this, "HOMOGENEOUS_COORDINATE_ACTION", "RAYS", "ray_action", "induced from homogeneous coordinate action", 1);
+      $this->GROUP->RAYS_ACTION->GENERATORS = group::induce_permutation_action($this, "HOMOGENEOUS_COORDINATE_ACTION", "RAYS", "ray_action", "induced from homogeneous coordinate action", 1)->GENERATORS;
    }
    weight 1.10;
 
@@ -188,7 +188,7 @@ object PolyhedralFan {
    #
 
    rule GROUP.MAXIMAL_CONES_ACTION.GENERATORS : GROUP.RAYS_ACTION.GENERATORS, MAXIMAL_CONES {
-      $this->GROUP->MAXIMAL_CONES_ACTION = group::induce_permutation_action($this, "RAYS_ACTION", "MAXIMAL_CONES", "maximal_cones_action", "induced from ray action", 0);
+      $this->GROUP->MAXIMAL_CONES_ACTION->GENERATORS = group::induce_permutation_action($this, "RAYS_ACTION", "MAXIMAL_CONES", "maximal_cones_action", "induced from ray action", 0)->GENERATORS;
    }
    weight 1.10;
 
@@ -222,7 +222,7 @@ object PolyhedralFan {
    #
 
    rule GROUP.FACET_NORMALS_ACTION.GENERATORS : GROUP.HOMOGENEOUS_COORDINATE_ACTION.GENERATORS, FACET_NORMALS {
-      $this->GROUP->FACET_NORMALS_ACTION = group::induce_permutation_action($this, "HOMOGENEOUS_COORDINATE_ACTION", "FACET_NORMALS", "facet_normals_action", "induced from homogeneous_coordinate_action", 1, \&canonicalize_facets);
+      $this->GROUP->FACET_NORMALS_ACTION->GENERATORS = group::induce_permutation_action($this, "HOMOGENEOUS_COORDINATE_ACTION", "FACET_NORMALS", "facet_normals_action", "induced from homogeneous_coordinate_action", 1, \&canonicalize_facets)->GENERATORS;
    }
    weight 1.10;
 
@@ -377,7 +377,7 @@ object PolyhedralComplex {
    # induced actions
 
    rule GROUP.POINTS_ACTION.GENERATORS : GROUP.COORDINATE_ACTION.GENERATORS , POINTS {
-      $this->GROUP->POINTS_ACTION = group::induce_permutation_action($this, "COORDINATE_ACTION", "POINTS", "points_action", "induced from coordinate_action");
+      $this->GROUP->POINTS_ACTION->GENERATORS = group::induce_permutation_action($this, "COORDINATE_ACTION", "POINTS", "points_action", "induced from coordinate_action")->GENERATORS;
    }
    weight 1.10;
 
@@ -394,7 +394,7 @@ object PolyhedralComplex {
    precondition : GROUP.PERMUTATION_ACTION.DEGREE, N_POINTS { $this->GROUP->PERMUTATION_ACTION->DEGREE == $this->N_POINTS }
 
    rule GROUP.VERTICES_ACTION.GENERATORS : GROUP.COORDINATE_ACTION.GENERATORS, VERTICES {
-      $this->GROUP->VERTICES_ACTION = group::induce_permutation_action($this, "COORDINATE_ACTION", "VERTICES", "vertices_action", "induced from coordinate_action");
+      $this->GROUP->VERTICES_ACTION->GENERATORS = group::induce_permutation_action($this, "COORDINATE_ACTION", "VERTICES", "vertices_action", "induced from coordinate_action")->GENERATORS;
    }
    weight 1.10;
 
diff --git a/apps/group/rules/action_properties.rules b/apps/group/rules/action_properties.rules
index fd534c4bee..845e334737 100644
--- a/apps/group/rules/action_properties.rules
+++ b/apps/group/rules/action_properties.rules
@@ -400,21 +400,20 @@ object Action {
    # After permutation, the first elements will be the ones in the first orbit
    # (as ordered in [[ORBITS]]), and the ones after will be in the second orbit,
    # and so on.
-   # @example [application fan] Begin with a polyhedral fan, and consider its orbit fan
+   # @example [application fan] [nocompare] Begin with a polyhedral fan, and consider its orbit fan
    #          with respect to the linear symmetries of a square in
    #          homogenous coordinates. Then the following returns
    #          a permutation on the orbit fan's maximal cones, which encodes
-   #          the sequence 0 3 4 5 1 6 7 8 2 9 10 11 12 13 14 15, which
+   #          the sequence 0 6 9 10 11 12 13 15 1 2 3 4 5 7 8 14, which
    #          is a sequence respecting the orbit order.
    # > $f = new PolyhedralFan(RAYS=>[[1,1,1],[1,1,0],[1,1/2,1/4]],MAXIMAL_CONES=>[[0,2],[1,2]]);
    # > $of = orbit_fan($f,polytope::cube(2,group=>1)->GROUP->MATRIX_ACTION);
    # > $of->GROUP->RAYS_ACTION;
    # > print $of->GROUP->MAXIMAL_CONES_ACTION->ORBITS;
-   # | {0 3 4 5}
-   # | {1 6 7 8}
-   # | {2 9 10 11 12 13 14 15}
+   # | {0 6 9 10 11 12 13 15}
+   # | {1 2 3 4 5 7 8 14}
    # > print $of->GROUP->MAXIMAL_CONES_ACTION->PERMUTATION_TO_ORBIT_ORDER;
-   # | 0 4 8 1 2 3 5 6 7 9 10 11 12 13 14 15
+   # | 0 8 9 10 11 12 1 13 14 2 3 4 5 6 15 7
    property PERMUTATION_TO_ORBIT_ORDER : Array<Int>;
 
 }
