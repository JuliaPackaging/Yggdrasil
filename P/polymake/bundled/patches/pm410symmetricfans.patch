commit 0e6895e78354834a76032f3abc2d0fe68cec0cd9
Author: Benjamin Lorenz <lorenz@math.tu-berlin.de>
Date:   Fri Jun 30 22:18:51 2023 +0200

    fix all_cones_symmetry computing wrong combinatorial dimensions
    
    and some segfaults

diff --git a/apps/fan/include/all_cones_symmetry.h b/apps/fan/include/all_cones_symmetry.h
index eaa93dcbed..a9f8cd9f6e 100644
--- a/apps/fan/include/all_cones_symmetry.h
+++ b/apps/fan/include/all_cones_symmetry.h
@@ -40,8 +40,7 @@ void all_cones_symmetry(BigObject f, Int dim)
    const Matrix<Scalar> rays = f.give("RAYS");
    const Array<Array<Int>> symmetry = f.give("GROUP.RAYS_ACTION.ALL_GROUP_ELEMENTS");
    const Matrix<Scalar> lin_space = f.give("LINEALITY_SPACE");
-   const Int lin_dim = lin_space.rows();
-   const Int amb_dim = rays.rows();
+   const Int amb_dim = rays.cols();
 
 
    //if the dimension of the fan is unknown it will be computed in res_dim and amb_dim
@@ -51,15 +50,15 @@ void all_cones_symmetry(BigObject f, Int dim)
    Array<Int> max_cones_dims;
    if (dim < 0) {
       dim_given = false;
-      dim = amb_dim;
+      dim = amb_dim-1;
       max_cones_dims = Array<Int>(cones.size());
    }
 
-   Array<Int> dims(dim, 0);
-   Array<Int> orbit_dims(dim, 0);
+   Array<Int> dims(dim+1, 0);
+   Array<Int> orbit_dims(dim+1, 0);
 
-   Array<std::vector<Set<Int>>> cone_orbits(dim); // all cones up to symmetry
-   Array<std::vector<Int>> cone_orbit_sizes(dim); // the sizes of all arbits of cones
+   Array<std::vector<Set<Int>>> cone_orbits(dim+1); // all cones up to symmetry
+   Array<std::vector<Int>> cone_orbit_sizes(dim+1); // the sizes of all arbits of cones
 
    Int c_i = 0;
    for (const auto& cone : cones) {
@@ -67,12 +66,12 @@ void all_cones_symmetry(BigObject f, Int dim)
       const Array<Int> cone_A(n_rays, entire(cone));
       BigObject c("Cone", "RAYS", rays.minor(cone, All), "LINEALITY_SPACE", lin_space);
       const Lattice<BasicDecoration, Sequential> hd = c.give("HASSE_DIAGRAM");
-      const Int c_dim = hd.rank();
+      const Int c_dim = hd.rank()-1;
       if (!dim_given) {
          res_dim = std::max(res_dim, c_dim);
-         max_cones_dims[c_i++] = c_dim + lin_dim;
+         max_cones_dims[c_i++] = c_dim;
       }
-      for (Int l = 0; l < c_dim; ++l) {
+      for (Int l = 0; l <= c_dim; ++l) {
          for (const auto fn : hd.nodes_of_rank(l+1)) {
             const Set<Int>& face_old = hd.face(fn);
 
@@ -99,10 +98,10 @@ void all_cones_symmetry(BigObject f, Int dim)
    if (!dim_given) {
       f.take("COMBINATORIAL_DIM") << res_dim;
       f.take("GROUP.MAXIMAL_CONES_ACTION.REPRESENTATIVE_COMBINATORIAL_DIMS") << max_cones_dims;
-      dims.resize(res_dim);
-      orbit_dims.resize(res_dim);
-      cone_orbits.resize(res_dim);
-      cone_orbit_sizes.resize(res_dim);
+      dims.resize(res_dim+1);
+      orbit_dims.resize(res_dim+1);
+      cone_orbits.resize(res_dim+1);
+      cone_orbit_sizes.resize(res_dim+1);
    }
    f.take("F_VECTOR") << dims;
    f.take("GROUP.ORBITS_F_VECTOR") << orbit_dims;
commit 089e99f276d4d09122aa8283eb9dd548b22b9063
Author: Benjamin Lorenz <lorenz@math.tu-berlin.de>
Date:   Fri Jun 30 23:55:05 2023 +0200

    actions: remove wrong generator copy

diff --git a/apps/fan/rules/action.rules b/apps/fan/rules/action.rules
index 85341d5372..388ebef548 100644
--- a/apps/fan/rules/action.rules
+++ b/apps/fan/rules/action.rules
@@ -289,9 +289,8 @@ object PolyhedralFan {
    weight 2.10;
    incurs RaysPerm;
                            
-   rule MAXIMAL_CONES, GROUP.MAXIMAL_CONES_ACTION.GENERATORS : RAYS, GROUP.RAYS_ACTION.GENERATORS, GROUP.MAXIMAL_CONES_ACTION.MAXIMAL_CONES_GENERATORS {
+   rule MAXIMAL_CONES : RAYS, GROUP.RAYS_ACTION.GENERATORS, GROUP.MAXIMAL_CONES_ACTION.MAXIMAL_CONES_GENERATORS {
        my $gens = $this->GROUP->RAYS_ACTION->GENERATORS;
-       $this->GROUP->MAXIMAL_CONES_ACTION->GENERATORS = $gens;
        my $all_cones = new HashSet<Set<Int>>;
        foreach (@{$this->GROUP->MAXIMAL_CONES_ACTION->MAXIMAL_CONES_GENERATORS}) {
            foreach(@{group::orbit($gens, new Set($_))}) {
