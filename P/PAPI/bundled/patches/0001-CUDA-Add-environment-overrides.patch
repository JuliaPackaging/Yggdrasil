From bfafbcdbcb4fff02d2c2456b95e76b403efd32c8 Mon Sep 17 00:00:00 2001
From: Valentin Churavy <v.churavy@gmail.com>
Date: Mon, 20 Mar 2023 20:57:11 -0400
Subject: [PATCH] [CUDA] Add environment overrides

---
 src/components/cuda/linux-cuda.c | 61 ++++++++++++++++++++++++++++----
 1 file changed, 55 insertions(+), 6 deletions(-)

diff --git a/src/components/cuda/linux-cuda.c b/src/components/cuda/linux-cuda.c
index e78d2eded..96da9d294 100644
--- a/src/components/cuda/linux-cuda.c
+++ b/src/components/cuda/linux-cuda.c
@@ -761,12 +761,25 @@ static int _cuda_linkCudaLibraries(void)
         }
     }
 
-    // Step 2: Try system paths, will work with Spack, LD_LIBRARY_PATH, default paths.
+    // Step 2: Try environemnt override
+    char *cuda_main_lib = getenv("PAPI_CUDA_MAIN");
+    if (dl1 == NULL && strlen(cuda_main_lib) > 0) {                 // If override given, it has to work.
+        int strErr;
+        dl1 = dlopen(cuda_main_lib, RTLD_NOW | RTLD_GLOBAL);        // Try to open that path.
+        if (dl1 == NULL) {
+            strErr=snprintf(_cuda_vector.cmp_info.disabled_reason, PAPI_MAX_STR_LEN, "PAPI_CUDA_MAIN override '%s' given in ENV not found.", cuda_main_lib);
+            _cuda_vector.cmp_info.disabled_reason[PAPI_MAX_STR_LEN-1]=0;
+            if (strErr > PAPI_MAX_STR_LEN) HANDLE_STRING_ERROR;
+            return(PAPI_ENOSUPP);   // Override given but not found.
+        }
+    }
+
+    // Step 3: Try system paths, will work with Spack, LD_LIBRARY_PATH, default paths.
     if (dl1 == NULL) {                                          // No override,
         dl1 = dlopen("libcuda.so", RTLD_NOW | RTLD_GLOBAL);     // Try system paths.
     }
 
-    // Step 3: Try the explicit install default.
+    // Step 4: Try the explicit install default.
     if (dl1 == NULL && cuda_root != NULL) {                          // if root given, try it.
         int strErr=snprintf(path_lib, sizeof(path_lib)-2, "%s/lib64/libcuda.so", cuda_root);  // PAPI Root check.
         path_lib[sizeof(path_lib)-1]=0;
@@ -817,12 +830,24 @@ static int _cuda_linkCudaLibraries(void)
         }
     }
 
-    // Step 2: Try system paths, will work with Spack, LD_LIBRARY_PATH, default paths.
+    // Step 2: Try environemnt override
+    char *cuda_runtime_lib = getenv("PAPI_CUDA_RUNTIME");
+    if (dl2 == NULL && strlen(cuda_runtime_lib) > 0) {                 // If override given, it has to work.
+        dl2 = dlopen(cuda_runtime_lib, RTLD_NOW | RTLD_GLOBAL);        // Try to open that path.
+        if (dl2 == NULL) {
+            int strErr=snprintf(_cuda_vector.cmp_info.disabled_reason, PAPI_MAX_STR_LEN, "PAPI_CUDA_RUNTIME override '%s' given in ENV not found.", cuda_runtime_lib);
+            _cuda_vector.cmp_info.disabled_reason[PAPI_MAX_STR_LEN-1]=0;
+            if (strErr > PAPI_MAX_STR_LEN) HANDLE_STRING_ERROR;
+            return(PAPI_ENOSUPP);   // Override given but not found.
+        }
+    }
+
+    // Step 3: Try system paths, will work with Spack, LD_LIBRARY_PATH, default paths.
     if (dl2 == NULL) {                                          // No override,
         dl2 = dlopen("libcudart.so", RTLD_NOW | RTLD_GLOBAL);   // Try system paths.
     }
 
-    // Step 3: Try the explicit install default.
+    // Step 4: Try the explicit install default.
     if (dl2 == NULL && cuda_root != NULL) {                             // if root given, try it.
         int strErr=snprintf(path_lib, sizeof(path_lib)-2, "%s/lib64/libcudart.so", cuda_root);   // PAPI Root check.
         path_lib[sizeof(path_lib)-1]=0;
@@ -861,12 +886,24 @@ static int _cuda_linkCudaLibraries(void)
         }
     }
 
-    // Step 2: Try system paths, will work with Spack, LD_LIBRARY_PATH, default paths.
+    // Step 2: Process override if given.
+    char *cuda_cupti_lib = getenv("PAPI_CUDA_CUPTI");
+    if (dl3 == NULL && strlen(cuda_cupti_lib) > 0) {                    // If override given, it MUST work.
+        dl3 = dlopen(cuda_cupti_lib, RTLD_NOW | RTLD_GLOBAL);               // Try to open that path.
+        if (dl3 == NULL) {
+            int strErr=snprintf(_cuda_vector.cmp_info.disabled_reason, PAPI_MAX_STR_LEN, "PAPI_CUDA_CUPTI override '%s' given in ENV not found.", cuda_cupti_lib);
+            _cuda_vector.cmp_info.disabled_reason[PAPI_MAX_STR_LEN-1]=0;
+            if (strErr > PAPI_MAX_STR_LEN) HANDLE_STRING_ERROR;
+            return(PAPI_ENOSUPP);   // Override given but not found.
+        }
+    }
+
+    // Step 3: Try system paths, will work with Spack, LD_LIBRARY_PATH, default paths.
     if (dl3 == NULL) {                                          // If no override,
         dl3 = dlopen("libcupti.so", RTLD_NOW | RTLD_GLOBAL);    // Try system paths.
     }
 
-    // Step 3: Try the explicit install default.
+    // Step 4: Try the explicit install default.
     if (dl3 == NULL && cuda_root != NULL) {                                         // If ROOT given, it doesn't HAVE to work.
         int strErr=snprintf(path_lib, sizeof(path_lib)-2, "%s/extras/CUPTI/lib64/libcupti.so", cuda_root);   // PAPI Root check.
         path_lib[sizeof(path_lib)-1]=0;
@@ -956,6 +993,18 @@ static int _cuda_linkCudaLibraries(void)
         }
     }
 
+    // Step 2: Process override if given
+    char *cuda_perfworks_lib = getenv("PAPI_CUDA_PERFWORKS");
+    if (dl4 == NULL && strlen(cuda_perfworks_lib) > 0) {                    // If override given, it MUST work.
+        dl4 = dlopen(cuda_perfworks, RTLD_NOW | RTLD_GLOBAL);               // Try to open that path.
+        if (dl4 == NULL) {
+            int strErr=snprintf(_cuda_vector.cmp_info.disabled_reason, PAPI_MAX_STR_LEN, "PAPI_CUDA_PERFWORKS override '%s' given in ENV not found.", cuda_perfworks_lib);
+            _cuda_vector.cmp_info.disabled_reason[PAPI_MAX_STR_LEN-1]=0;
+            if (strErr > PAPI_MAX_STR_LEN) HANDLE_STRING_ERROR;
+            return(PAPI_ENOSUPP);   // Override given but not found.
+        }
+    }
+
     // Step 2: Try system paths, will work with Spack, LD_LIBRARY_PATH, default paths.
     if (dl4 == NULL) {                                          // If no override,
         dl4 = dlopen("libnvperf_host.so", RTLD_NOW | RTLD_GLOBAL);    // Try system paths.
-- 
2.40.0

