diff -ur qtbase-everywhere-src-6.8.1-orig/cmake/QtCompilerOptimization.cmake qtbase-everywhere-src-6.8.1/cmake/QtCompilerOptimization.cmake
--- qtbase-everywhere-src-6.8.1-orig/cmake/QtCompilerOptimization.cmake	2024-11-12 11:55:11.000000000 +0100
+++ qtbase-everywhere-src-6.8.1/cmake/QtCompilerOptimization.cmake	2025-01-03 10:14:15.474649627 +0100
@@ -49,7 +49,7 @@
     set(QT_CFLAGS_RDSEED     "${__prefix}-mrdseed")
     set(QT_CFLAGS_AVX        "${__prefix}-mavx")
     set(QT_CFLAGS_AVX2       "${__prefix}-mavx2")
-    set(QT_CFLAGS_ARCH_HASWELL "${__prefix}-march=haswell")
+    set(QT_CFLAGS_ARCH_HASWELL "-mavx2" "-mf16c" "-mfma" "-mbmi" "-mbmi2" "-mlzcnt")
     set(QT_CFLAGS_AVX512F    "${__prefix}-mavx512f")
     set(QT_CFLAGS_AVX512ER   "${__prefix}-mavx512er")
     set(QT_CFLAGS_AVX512CD   "${__prefix}-mavx512cd")
Only in qtbase-everywhere-src-6.8.1/src/android/jar: .gradle
Only in qtbase-everywhere-src-6.8.1/src/android/templates: .gradle
diff -ur qtbase-everywhere-src-6.8.1-orig/src/corelib/thread/qfutex_mac_p.h qtbase-everywhere-src-6.8.1/src/corelib/thread/qfutex_mac_p.h
--- qtbase-everywhere-src-6.8.1-orig/src/corelib/thread/qfutex_mac_p.h	2024-11-12 11:55:11.000000000 +0100
+++ qtbase-everywhere-src-6.8.1/src/corelib/thread/qfutex_mac_p.h	2025-01-03 10:14:59.794711719 +0100
@@ -15,6 +15,7 @@
 // We mean it.
 //
 
+#include <errno.h>
 #include <qdeadlinetimer.h>
 #include <qtsan_impl.h>
 #include <private/qglobal_p.h>
diff -ur qtbase-everywhere-src-6.8.1-orig/src/gui/opengl/qopengl.cpp qtbase-everywhere-src-6.8.1/src/gui/opengl/qopengl.cpp
--- qtbase-everywhere-src-6.8.1-orig/src/gui/opengl/qopengl.cpp	2024-11-12 11:55:11.000000000 +0100
+++ qtbase-everywhere-src-6.8.1/src/gui/opengl/qopengl.cpp	2025-01-03 10:18:33.215209902 +0100
@@ -187,6 +187,14 @@
     return result;
 }
 
+namespace QOSWorkaround {
+    // Due to a mingw bug being confused by static constexpr variables in an exported class,
+    // we cannot use QOperatingSystemVersion::Windows11 in libraries outside of QtCore.
+    // ### TODO Remove this when that problem is fixed.
+    static constexpr QOperatingSystemVersionBase Windows11 { QOperatingSystemVersionBase::Windows,
+                                                             10, 0, 22000 };
+}
+
 // OS term consisting of name and optional version found in
 // under "os" in main array and in "exceptions" lists.
 struct OsTypeTerm
@@ -196,7 +204,7 @@
     static QVersionNumber hostKernelVersion() { return QVersionNumber::fromString(QSysInfo::kernelVersion()); }
     static QString hostOsRelease() {
 #ifdef Q_OS_WIN
-        if (QOperatingSystemVersion::current() >= QOperatingSystemVersion::Windows11)
+        if (QOperatingSystemVersion::current() >= QOSWorkaround::Windows11)
             return u"11"_s;
         return u"10"_s;
 #else
Only in qtbase-everywhere-src-6.8.1/src/network/android/jar: .gradle
diff -ur qtbase-everywhere-src-6.8.1-orig/src/plugins/platforms/windows/qwindowsiconengine.cpp qtbase-everywhere-src-6.8.1/src/plugins/platforms/windows/qwindowsiconengine.cpp
--- qtbase-everywhere-src-6.8.1-orig/src/plugins/platforms/windows/qwindowsiconengine.cpp	2024-11-12 11:55:11.000000000 +0100
+++ qtbase-everywhere-src-6.8.1/src/plugins/platforms/windows/qwindowsiconengine.cpp	2025-01-03 10:20:35.525611881 +0100
@@ -285,10 +285,18 @@
                                     : (m_iconName.length() == 1 ? m_iconName : QString());
 }
 
+namespace QOSWorkaround {
+    // Due to a mingw bug being confused by static constexpr variables in an exported class,
+    // we cannot use QOperatingSystemVersion::Windows11 in libraries outside of QtCore.
+    // ### TODO Remove this when that problem is fixed.
+    static constexpr QOperatingSystemVersionBase Windows11 { QOperatingSystemVersionBase::Windows,
+                                                             10, 0, 22000 };
+}
+
 namespace {
 auto iconFontFamily()
 {
-    static const bool isWindows11 = QOperatingSystemVersion::current() >= QOperatingSystemVersion::Windows11;
+    static const bool isWindows11 = QOperatingSystemVersion::current() >= QOSWorkaround::Windows11;
     return isWindows11 ? u"Segoe Fluent Icons"_s
                        : u"Segoe MDL2 Assets"_s;
 }
diff -ur qtbase-everywhere-src-6.8.1-orig/src/plugins/platforms/windows/qwindowsintegration.cpp qtbase-everywhere-src-6.8.1/src/plugins/platforms/windows/qwindowsintegration.cpp
--- qtbase-everywhere-src-6.8.1-orig/src/plugins/platforms/windows/qwindowsintegration.cpp	2024-11-12 11:55:11.000000000 +0100
+++ qtbase-everywhere-src-6.8.1/src/plugins/platforms/windows/qwindowsintegration.cpp	2025-01-03 10:21:13.415749811 +0100
@@ -606,6 +606,14 @@
     MessageBeep(MB_OK);  // For QApplication
 }
 
+namespace QOSWorkaround {
+    // Due to a mingw bug being confused by static constexpr variables in an exported class,
+    // we cannot use QOperatingSystemVersion::Windows11 in libraries outside of QtCore.
+    // ### TODO Remove this when that problem is fixed.
+    static constexpr QOperatingSystemVersionBase Windows11 { QOperatingSystemVersionBase::Windows,
+                                                             10, 0, 22000 };
+}
+
 void QWindowsIntegration::setApplicationBadge(qint64 number)
 {
     // Clamp to positive numbers, as the Windows API doesn't support negative numbers
@@ -614,7 +622,7 @@
     // Persist, so we can re-apply it on setting changes and Explorer restart
     m_applicationBadgeNumber = number;
 
-    static const bool isWindows11 = QOperatingSystemVersion::current() >= QOperatingSystemVersion::Windows11;
+    static const bool isWindows11 = QOperatingSystemVersion::current() >= QOSWorkaround::Windows11;
 
 #if QT_CONFIG(cpp_winrt)
     // We prefer the native BadgeUpdater API, that allows us to set a number directly,
diff -ur qtbase-everywhere-src-6.8.1-orig/src/plugins/platforms/windows/qwindowstheme.cpp qtbase-everywhere-src-6.8.1/src/plugins/platforms/windows/qwindowstheme.cpp
--- qtbase-everywhere-src-6.8.1-orig/src/plugins/platforms/windows/qwindowstheme.cpp	2024-11-12 11:55:11.000000000 +0100
+++ qtbase-everywhere-src-6.8.1/src/plugins/platforms/windows/qwindowstheme.cpp	2025-01-03 10:21:53.685902489 +0100
@@ -504,10 +504,18 @@
     return appDir.isDir() ? QStringList(appDir.absoluteFilePath()) : QStringList();
 }
 
+namespace QOSWorkaround {
+    // Due to a mingw bug being confused by static constexpr variables in an exported class,
+    // we cannot use QOperatingSystemVersion::Windows11 in libraries outside of QtCore.
+    // ### TODO Remove this when that problem is fixed.
+    static constexpr QOperatingSystemVersionBase Windows11 { QOperatingSystemVersionBase::Windows,
+                                                             10, 0, 22000 };
+}
+
 static inline QStringList styleNames()
 {
     QStringList styles = { QStringLiteral("WindowsVista"), QStringLiteral("Windows") };
-    if (QOperatingSystemVersion::current() >= QOperatingSystemVersion::Windows11)
+    if (QOperatingSystemVersion::current() >= QOSWorkaround::Windows11)
         styles.prepend(QStringLiteral("Windows11"));
     return styles;
 }
diff -ur qtbase-everywhere-src-6.8.1-orig/src/plugins/platforms/windows/qwindowswindow.cpp qtbase-everywhere-src-6.8.1/src/plugins/platforms/windows/qwindowswindow.cpp
--- qtbase-everywhere-src-6.8.1-orig/src/plugins/platforms/windows/qwindowswindow.cpp	2024-11-12 11:55:11.000000000 +0100
+++ qtbase-everywhere-src-6.8.1/src/plugins/platforms/windows/qwindowswindow.cpp	2025-01-03 10:23:49.419705426 +0100
@@ -2551,9 +2551,17 @@
     return hasMaximumHeight() || hasMaximumWidth();
 }
 
+namespace QOSWorkaround {
+    // Due to a mingw bug being confused by static constexpr variables in an exported class,
+    // we cannot use QOperatingSystemVersion::Windows11 in libraries outside of QtCore.
+    // ### TODO Remove this when that problem is fixed.
+    static constexpr QOperatingSystemVersionBase Windows11 { QOperatingSystemVersionBase::Windows,
+                                                             10, 0, 22000 };
+}
+
 void QWindowsWindow::correctWindowPlacement(WINDOWPLACEMENT &windowPlacement)
 {
-    static const auto windows11 = QOperatingSystemVersion::Windows11_21H2;
+    static const auto windows11 = QOSWorkaround::Windows11;
     static const bool isWindows10 = QOperatingSystemVersion::current() < windows11;
     if (!isWindows10)
         return;
