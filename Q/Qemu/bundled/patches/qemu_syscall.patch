diff --git a/linux-user/syscall.c b/linux-user/syscall.c
index f1cfcc810..52cfe29d6 100644
--- a/linux-user/syscall.c
+++ b/linux-user/syscall.c
@@ -49,6 +49,7 @@
 #include <sys/statfs.h>
 #include <utime.h>
 #include <sys/sysinfo.h>
+#define _LINUX_SYSINFO_H
 #include <sys/signalfd.h>
 //#include <sys/user.h>
 #include <netinet/in.h>
@@ -7281,12 +7282,47 @@ static inline abi_long host_to_target_timex64(abi_long target_addr,
 #endif
 
 #ifndef HAVE_SIGEV_NOTIFY_THREAD_ID
+typedef union _sigval {
+	int sival_int;
+	void *sival_ptr;
+} sigval_t;
+
+/*
+ * This works because the alignment is ok on all current architectures
+ * but we leave open this being overridden in the future
+ */
+#ifndef __ARCH_SIGEV_PREAMBLE_SIZE
+#define __ARCH_SIGEV_PREAMBLE_SIZE	(sizeof(int) * 2 + sizeof(sigval_t))
+#endif
+
+#define SIGEV_MAX_SIZE	64
+#define SIGEV_PAD_SIZE	((SIGEV_MAX_SIZE - __ARCH_SIGEV_PREAMBLE_SIZE) \
+		/ sizeof(int))
+
+typedef struct _sigevent {
+	sigval_t sigev_value;
+	int sigev_signo;
+	int sigev_notify;
+	union {
+		int _pad[SIGEV_PAD_SIZE];
+		 int _tid;
+
+		struct {
+			void (*_function)(sigval_t);
+			void *_attribute;	/* really pthread_attr_t */
+		} _sigev_thread;
+	} _sigev_un;
+} sigevent_t;
+
 #define sigev_notify_thread_id _sigev_un._tid
+#else
+#define _sigevent sigevent
 #endif
 
-static inline abi_long target_to_host_sigevent(struct sigevent *host_sevp,
+static inline abi_long target_to_host_sigevent(struct sigevent *_host_sevp,
                                                abi_ulong target_addr)
 {
+    struct _sigevent *host_sevp = (struct _sigevent*)_host_sevp;
     struct target_sigevent *target_sevp;
 
     if (!lock_user_struct(VERIFY_READ, target_sevp, target_addr, 1)) {
