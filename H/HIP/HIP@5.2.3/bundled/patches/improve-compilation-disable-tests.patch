diff --git a/CMakeLists.txt b/CMakeLists.txt
index f425504d..c5213688 100755
--- a/CMakeLists.txt
+++ b/CMakeLists.txt
@@ -37,10 +37,9 @@ project(hip)
 #  By default, CMake will search for a folder named opencl or ROCm-OpenCL-Runtime relative to the current path. Specify -DAMD_OPENCL_PATH=$OPENCL_DIR if opencl source is in obscure location.
 list(APPEND CMAKE_MODULE_PATH ${HIP_COMMON_DIR}/cmake)
 
-# required to add the right link to libhsa-runtime in install/lib path
-# CMAKE_PREFIX_PATH is used as rpath to search for libs outside HIP
-set(CMAKE_INSTALL_RPATH "${CMAKE_PREFIX_PATH}/lib")
-set(CMAKE_INSTALL_RPATH_USE_LINK_PATH TRUE)
+set(CMAKE_SKIP_BUILD_RPATH TRUE)
+set(CMAKE_BUILD_RPATH_USE_ORIGIN TRUE)
+set(CMAKE_INSTALL_RPATH "$ORIGIN/../../lib")
 
 #############################
 # Options
@@ -91,7 +90,18 @@ string(REPLACE "-" ";" VERSION_LIST ${HIP_VERSION_PATCH_GITHASH})
 list(GET VERSION_LIST 0 HIP_VERSION_PATCH)
 set(HIP_VERSION_GITDATE 0)
 
-find_package(Git)
+# only look for git when we have a git repo
+if (IS_DIRECTORY "${PROJECT_SOURCE_DIR}/.git")
+  find_package(Git)
+endif()
+
+set(HIP_PACKAGING_VERSION_PATCH "0")
+set(HIP_VERSION_GITDATE "0")
+set(HIP_VERSION_PATCH "3")
+set(HIP_VERSION_GITHASH "0")
+set(HIP_VERSION_PATCH_GITHASH "0")
+set(HIP_LIB_VERSION_PATCH "0")
+set(HIP_VERSION_BUILD_ID 0)
 
 # FIXME: Two different version strings used.
 # Below we use UNIX commands, not compatible with Windows.
@@ -138,9 +148,6 @@ if(GIT_FOUND)
   else()
     set(HIP_PACKAGING_VERSION_PATCH ${HIP_VERSION_PATCH}-${HIP_VERSION_GITHASH})
   endif()
-else()
-  # FIXME: Some parts depend on this being set.
-  set(HIP_PACKAGING_VERSION_PATCH "0")
 endif()
 
 ## Debian package specific variables
@@ -429,36 +436,6 @@ if(CLANGFORMAT_EXE)
         WORKING_DIRECTORY ${CMAKE_CURRENT_SOURCE_DIR})
 endif()
 
-#############################
-# Testing steps
-#############################
-# HIT is not compatible with Windows
-if(NOT WIN32)
-set(HIP_ROOT_DIR ${CMAKE_CURRENT_BINARY_DIR})
-set(HIP_SRC_PATH ${CMAKE_CURRENT_SOURCE_DIR})
-if(HIP_PLATFORM STREQUAL "nvidia")
-    execute_process(COMMAND "${CMAKE_COMMAND}" -E copy_directory "${HIP_SRC_PATH}/include" "${HIP_ROOT_DIR}/include" RESULT_VARIABLE RUN_HIT ERROR_QUIET)
-endif()
-execute_process(COMMAND "${CMAKE_COMMAND}" -E copy_directory "${HIP_COMMON_INCLUDE_DIR}/hip/" "${HIP_ROOT_DIR}/include/hip/" RESULT_VARIABLE RUN_HIT ERROR_QUIET)
-execute_process(COMMAND "${CMAKE_COMMAND}" -E copy_directory "${HIP_COMMON_DIR}/cmake" "${HIP_ROOT_DIR}/cmake" RESULT_VARIABLE RUN_HIT ERROR_QUIET)
-if(${RUN_HIT} EQUAL 0)
-    execute_process(COMMAND "${CMAKE_COMMAND}" -E copy_directory "${HIP_COMMON_BIN_DIR}" "${HIP_ROOT_DIR}/bin" RESULT_VARIABLE RUN_HIT ERROR_QUIET)
-endif()
-if(HIP_CATCH_TEST EQUAL "1")
-    enable_testing()
-    set(HIP_PATH ${HIP_ROOT_DIR})
-    add_subdirectory(${HIP_COMMON_DIR}/tests/catch ${PROJECT_BINARY_DIR}/catch)
-else()
-    if(${RUN_HIT} EQUAL 0)
-        set(CMAKE_MODULE_PATH "${HIP_ROOT_DIR}/cmake" ${CMAKE_MODULE_PATH})
-        include(${HIP_COMMON_DIR}/tests/hit/HIT.cmake)
-        include(${HIP_COMMON_DIR}/tests/Tests.cmake)
-    else()
-        message(STATUS "Testing targets will not be available. To enable them please ensure that the HIP installation directory is writeable. Use -DCMAKE_INSTALL_PREFIX to specify a suitable location")
-    endif()
-endif()
-endif()
-
 #############################
 # Code analysis
 #############################
diff --git a/hip-config.cmake.in b/hip-config.cmake.in
index ba3e75c9..02dd5864 100755
--- a/hip-config.cmake.in
+++ b/hip-config.cmake.in
@@ -290,7 +290,6 @@ if(HIP_COMPILER STREQUAL "clang")
     if(CLANGRT_BUILTINS-NOTFOUND)
       message(FATAL_ERROR "clangrt builtins lib not found")
     else()
-      set_property(TARGET hip::host APPEND PROPERTY INTERFACE_LINK_LIBRARIES "${CLANGRT_BUILTINS}")
       set_property(TARGET hip::device APPEND PROPERTY INTERFACE_LINK_LIBRARIES "${CLANGRT_BUILTINS}")
     endif()
   endif()
