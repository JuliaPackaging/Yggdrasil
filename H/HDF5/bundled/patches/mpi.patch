diff --git a/src/H5FDsubfiling/H5subfiling_common.c b/src/H5FDsubfiling/H5subfiling_common.c
index 3e0fc3abf4..65c9be2522 100644
--- a/src/H5FDsubfiling/H5subfiling_common.c
+++ b/src/H5FDsubfiling/H5subfiling_common.c
@@ -30,7 +30,10 @@ typedef struct {            /* Format of a context map entry  */
 } file_map_to_context_t;
 
 /* MPI Datatype used to send/receive an RPC message */
-MPI_Datatype H5_subfiling_rpc_msg_type = MPI_DATATYPE_NULL;
+MPI_Datatype H5_subfiling_rpc_msg_type;
+static void __attribute__((__constructor__)) H5_subfiling_rpc_msg_type_init() {
+  H5_subfiling_rpc_msg_type = MPI_DATATYPE_NULL;
+}
 
 static subfiling_context_t **sf_context_cache  = NULL;
 static sf_topology_t       **sf_topology_cache = NULL;
diff --git a/src/H5Pfapl.c b/src/H5Pfapl.c
index 118196ea47..56d7c0d284 100644
--- a/src/H5Pfapl.c
+++ b/src/H5Pfapl.c
@@ -523,8 +523,12 @@ static const H5P_coll_md_read_flag_t H5F_def_coll_md_read_flag_g =
     H5F_ACS_COLL_MD_READ_FLAG_DEF; /* Default setting for the collective metedata read flag */
 static const bool H5F_def_coll_md_write_flag_g =
     H5F_ACS_COLL_MD_WRITE_FLAG_DEF; /* Default setting for the collective metedata write flag */
-static const MPI_Comm H5F_def_mpi_params_comm_g = H5F_ACS_MPI_PARAMS_COMM_DEF; /* Default MPI communicator */
-static const MPI_Info H5F_def_mpi_params_info_g = H5F_ACS_MPI_PARAMS_INFO_DEF; /* Default MPI info struct */
+static MPI_Comm H5F_def_mpi_params_comm_g; /* Default MPI communicator */
+static MPI_Info H5F_def_mpi_params_info_g; /* Default MPI info struct */
+static void __attribute__((__constructor__)) H5F_def_mpi_params_init() {
+  H5F_def_mpi_params_comm_g = H5F_ACS_MPI_PARAMS_COMM_DEF;
+  H5F_def_mpi_params_info_g = H5F_ACS_MPI_PARAMS_INFO_DEF;
+}
 #endif                                                                         /* H5_HAVE_PARALLEL */
 static const H5AC_cache_image_config_t H5F_def_mdc_initCacheImageCfg_g =
     H5F_ACS_META_CACHE_INIT_IMAGE_CONFIG_DEF; /* Default metadata cache image settings */
diff --git a/test/h5test.c b/test/h5test.c
index cbc4dfdebd..3a340534bb 100644
--- a/test/h5test.c
+++ b/test/h5test.c
@@ -72,7 +72,11 @@
 #endif
 char *paraprefix = NULL; /* for command line option para-prefix */
 #ifdef H5_HAVE_PARALLEL
-MPI_Info h5_io_info_g = MPI_INFO_NULL; /* MPI INFO object for IO */
+MPI_Info h5_io_info_g; /* MPI INFO object for IO */
+static void __attribute__((__constructor__)) h5_io_info_g_init()
+{
+  h5_io_info_g = MPI_INFO_NULL;
+}
 #endif
 
 #define READ_BUF_SIZE 65536
diff --git a/testpar/t_cache.c b/testpar/t_cache.c
index 633bf2010f..76691d4366 100644
--- a/testpar/t_cache.c
+++ b/testpar/t_cache.c
@@ -54,10 +54,15 @@ bool callbacks_verbose = false; /* flag used to control whether
 int      world_mpi_size        = -1;
 int      world_mpi_rank        = -1;
 int      world_server_mpi_rank = -1;
-MPI_Comm world_mpi_comm        = MPI_COMM_NULL;
+MPI_Comm world_mpi_comm;
 int      file_mpi_size         = -1;
 int      file_mpi_rank         = -1;
-MPI_Comm file_mpi_comm         = MPI_COMM_NULL;
+MPI_Comm file_mpi_comm;
+static void __attribute__((__constructor__)) mpi_comm_init()
+{
+  world_mpi_comm = MPI_COMM_NULL;
+  file_mpi_comm  = MPI_COMM_NULL;
+}
 
 /* the following globals are used to maintain rudementary statistics
  * to check the validity of the statistics maintained by H5C.c
@@ -320,7 +325,11 @@ struct mssg_t {
     unsigned magic;
 };
 
-MPI_Datatype mpi_mssg_t = MPI_DATATYPE_NULL; /* for MPI derived type created from mssg */
+MPI_Datatype mpi_mssg_t; /* for MPI derived type created from mssg */
+static void __attribute__((__constructor__)) mpi_mssg_t_init()
+{
+  mpi_mssg_t = MPI_DATATYPE_NULL;
+}
 
 /*****************************************************************************/
 /************************** function declarations ****************************/
diff --git a/tools/src/h5perf/pio_perf.c b/tools/src/h5perf/pio_perf.c
index 1ab0e56366..f5b583a293 100644
--- a/tools/src/h5perf/pio_perf.c
+++ b/tools/src/h5perf/pio_perf.c
@@ -112,7 +112,11 @@ static const char *progname = "h5perf";
 #define HDF5_PARAPREFIX ""
 #endif
 char    *paraprefix   = NULL;          /* for command line option para-prefix */
-MPI_Info h5_io_info_g = MPI_INFO_NULL; /* MPI INFO object for IO */
+MPI_Info h5_io_info_g; /* MPI INFO object for IO */
+static void __attribute__((__constructor__)) h5_io_info_g_init()
+{
+  h5_io_info_g = MPI_INFO_NULL;
+}
 
 /*
  * Command-line options: The user can specify short or long-named
