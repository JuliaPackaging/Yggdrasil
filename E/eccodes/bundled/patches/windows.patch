diff --git a/CMakeLists.txt b/CMakeLists.txt
index 1f49e55..e1bbcde 100644
--- a/CMakeLists.txt
+++ b/CMakeLists.txt
@@ -24,6 +24,7 @@ set( CMAKE_MODULE_PATH "${CMAKE_CURRENT_SOURCE_DIR}/cmake" ${CMAKE_MODULE_PATH}
 
 include( ecbuild_system NO_POLICY_SCOPE )
 
+add_compile_definitions(ECCODES_ON_WINDOWS)
 ecbuild_requires_macro_version( 2.7.2 )
 
 ###############################################################################
@@ -315,11 +316,8 @@ if( EC_OS_NAME MATCHES "windows" )
     # Suppress compliler warnings - see ECC-850
     # Suppress warnings about using 'insecure' functions. Fixing this would require changes all over
     # the codebase which would damage portability.
-    ecbuild_add_c_flags("/D_CRT_SECURE_NO_WARNINGS")
     # Suppress warnings about using well-known C functions.
-    ecbuild_add_c_flags("/D_CRT_NONSTDC_NO_DEPRECATE")
     # Suppress C4267: warns about possible loss of data when converting 'size_t' to 'int'.
-    ecbuild_add_c_flags("/wd4267")
 endif()
 
 ###############################################################################
@@ -355,7 +353,6 @@ configure_file( eccodes_config.h.in eccodes_config.h )
 add_definitions( -DHAVE_ECCODES_CONFIG_H )
 
 if( CMAKE_COMPILER_IS_GNUCC )
-    ecbuild_add_c_flags("-pedantic")
 endif()
 
 ###############################################################################
diff --git a/cmake/eccodes_test_endiness.cmake b/cmake/eccodes_test_endiness.cmake
index 0f1870d..182ffe7 100644
--- a/cmake/eccodes_test_endiness.cmake
+++ b/cmake/eccodes_test_endiness.cmake
@@ -18,76 +18,5 @@ endif()
 
 set( ECCODES_BIG_ENDIAN    ${ECCODES_BIG_ENDIAN}    )
 set( ECCODES_LITTLE_ENDIAN ${ECCODES_LITTLE_ENDIAN} )
-
-if( NOT DEFINED IEEE_BE )
-    check_c_source_runs(
-       "int compare(unsigned char* a,unsigned char* b) {
-         while(*a != 0) if (*(b++)!=*(a++)) return 1;
-         return 0;
-       }
-       int main(int argc,char** argv) {
-         unsigned char dc[]={0x30,0x61,0xDE,0x80,0x93,0x67,0xCC,0xD9,0};
-         double da=1.23456789e-75;
-         unsigned char* ca;
-
-         unsigned char fc[]={0x05,0x83,0x48,0x22,0};
-         float fa=1.23456789e-35;
-
-         if (sizeof(double)!=8) return 1;
-
-         ca=(unsigned char*)&da;
-         if (compare(dc,ca)) return 1;
-
-         if (sizeof(float)!=4) return 1;
-
-         ca=(unsigned char*)&fa;
-         if (compare(fc,ca)) return 1;
-
-         return 0;
-       }" IEEE_BE )
-
-    if( "${IEEE_BE}" STREQUAL "" )
-      set( IEEE_BE 0 CACHE INTERNAL "Test IEEE_BE")
-    endif()
-
-endif()
-
-if( ECCODES_BIG_ENDIAN AND NOT IEEE_BE )
-    ecbuild_critical("Failed to sanity check on endiness: OS should be Big-Endian but compiled code runs differently -- to ignore this pass -DIEEE_BE=1 to CMake/ecBuild")
-endif()
-
-if( NOT DEFINED IEEE_LE )
-    check_c_source_runs(
-       "int compare(unsigned char* a,unsigned char* b) {
-         while(*a != 0) if (*(b++)!=*(a++)) return 1;
-         return 0;
-       }
-       int main(int argc,char** argv) {
-         unsigned char dc[]={0xD9,0xCC,0x67,0x93,0x80,0xDE,0x61,0x30,0};
-         double da=1.23456789e-75;
-         unsigned char* ca;
-
-         unsigned char fc[]={0x22,0x48,0x83,0x05,0};
-         float fa=1.23456789e-35;
-
-         if (sizeof(double)!=8) return 1;
-
-         ca=(unsigned char*)&da;
-         if (compare(dc,ca)) return 1;
-
-         if (sizeof(float)!=4) return 1;
-
-         ca=(unsigned char*)&fa;
-         if (compare(fc,ca)) return 1;
-
-         return 0;
-       }" IEEE_LE )
-
-    if( "${IEEE_LE}" STREQUAL "" )
-      set( IEEE_LE 0 CACHE INTERNAL "Test IEEE_LE")
-    endif()
-endif()
-
-if( ECCODES_LITTLE_ENDIAN AND NOT IEEE_LE )
-    ecbuild_critical("Failed to sanity check on endiness: OS should be Little-Endian but compiled code runs differently -- to ignore this pass -DIEEE_LE=1 to CMake/ecBuild")
-endif()
+set( IEEE_BE ${ECCODES_BIG_ENDIAN} )
+set( IEEE_LE ${ECCODES_LITTLE_ENDIAN} )
diff --git a/src/grib_context.c b/src/grib_context.c
index 415f9e9..ccc187b 100644
--- a/src/grib_context.c
+++ b/src/grib_context.c
@@ -422,7 +422,6 @@ grib_context* grib_context_get_default()
          * But on Windows a file can be opened in binary or text mode. In binary mode the system behaves exactly as in UNIX.
          */
 #ifdef ECCODES_ON_WINDOWS
-        _set_fmode(_O_BINARY);
 #endif
 
         default_grib_context.inited                = 1;
