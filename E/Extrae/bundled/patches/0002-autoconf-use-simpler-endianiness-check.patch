From 548394965fd42d5671222198715a98482ba5feae Mon Sep 17 00:00:00 2001
From: Mirek Kratochvil <miroslav.kratochvil@uni.lu>
Date: Fri, 21 Oct 2022 12:04:36 +0200
Subject: [PATCH 2/2] autoconf: use simpler endianiness check

---
 config/macros.m4 | 29 ++++-------------------------
 1 file changed, 4 insertions(+), 25 deletions(-)

diff --git a/config/macros.m4 b/config/macros.m4
index d1d28b2d..934a6d55 100644
--- a/config/macros.m4
+++ b/config/macros.m4
@@ -544,31 +544,10 @@ AC_DEFUN([AX_ENSURE_CXX_PRESENT],
 # Test if the architecture is little or big endian
 AC_DEFUN([AX_CHECK_ENDIANNESS],
 [
-   AC_CACHE_CHECK([for the architecture endianness], [ac_cv_endianness],
-   [
-      AC_LANG_SAVE()
-      AC_LANG([C])
-      AC_TRY_RUN(
-      [
-         int main()
-         {
-            short s = 1;
-            short * ptr = &s;
-            unsigned char c = *((char *)ptr);
-            return c;
-         }
-      ],
-      [ac_cv_endianness="big endian" ],
-      [ac_cv_endianness="little endian" ]
-      )
-      AC_LANG_RESTORE()
-   ])
-   if test "$ac_cv_endianness" = "big endian" ; then
-      AC_DEFINE(IS_BIG_ENDIAN, 1, [Define to 1 if architecture is big endian])
-   fi
-   if test "$ac_cv_endianness" = "little endian" ; then
-      AC_DEFINE(IS_LITTLE_ENDIAN, 1, [Define to 1 if architecture is little endian])
-   fi
+   AC_C_BIGENDIAN(
+      AC_DEFINE(IS_BIG_ENDIAN, 1, [Define to 1 if architecture is big endian]),
+      AC_DEFINE(IS_LITTLE_ENDIAN, 1, [Define to 1 if architecture is little endian]),
+      AC_MSG_FAILURE([Cannot detect endianiness]))
 ])
 
 
-- 
2.35.1

