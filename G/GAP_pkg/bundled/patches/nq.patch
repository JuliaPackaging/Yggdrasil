diff --git a/Makefile.am b/Makefile.am
index 932d8a9..2e63343 100644
--- a/Makefile.am
+++ b/Makefile.am
@@ -1,5 +1,3 @@
-ACLOCAL_AMFLAGS = -I m4
-
 BINARCHDIR = bin/$(GAPARCH)
 
 bin_PROGRAMS = nq
@@ -26,12 +24,11 @@ nq_SOURCES = \
     src/trmetab.c \
     src/word.c
 
-nq_LDFLAGS = $(GAP_LDFLAGS)
-nq_LDADD = $(GAP_LIBS)
-nq_CPPFLAGS = $(GAP_CPPFLAGS)
+nq_LDFLAGS = $(GMP_LDFLAGS)
+nq_LDADD = $(GMP_LIBS)
+nq_CPPFLAGS = $(GMP_CPPFLAGS)
 
 #CFLAGS += -O3 -Wuninitialized
-#CFLAGS += $(ABI_CFLAGS) 
 
 nq_CFLAGS = \
  -Wall \
diff --git a/configure.ac b/configure.ac
index 6c41865..f838c22 100644
--- a/configure.ac
+++ b/configure.ac
@@ -10,10 +10,15 @@ AC_INIT([ANU Nilpotent Quotient Program],
 AC_CONFIG_SRCDIR([src/nq.c])
 AC_CONFIG_HEADERS(src/config.h:src/config.hin)
 AC_CONFIG_AUX_DIR([cnf])
-AC_CONFIG_MACRO_DIR([m4])
 AM_INIT_AUTOMAKE([1.11 -Wall foreign subdir-objects no-dist])
 AM_SILENT_RULES([yes])
-AM_MAINTAINER_MODE
+
+dnl For developer builds, maintainer mode is enabled by default. But for
+dnl releases, the `.release` script changes this to "disabled by default".
+dnl This avoids troubles during packaging, in particular when the GAP team
+dnl repackages the source archive. Users can re-enable it by passing
+dnl `--enable-maintainer-mode` to configure.
+AM_MAINTAINER_MODE([enable])
 
 dnl ##
 dnl ## C is the language
@@ -29,65 +34,77 @@ AC_PROG_MAKE_SET
 AC_PROG_MKDIR_P
 AC_PROG_SED
 
-
 dnl ##
-dnl ## Locate the GAP root dir
+dnl ## Check for GMP
 dnl ##
 
-# HACK: We used to support --with-gap-root, but this got renamed to
-# --with-gaproot for compatibility with other packages (io, orb, cvec,
-# ...). But existing build scripts may use the old name, so we translate
-# it to the new name here.
-# Note: configure warns if --with-gap-root is used, calling
-# it an unrecognized option.
-if test "${with_gaproot+set}" != set; then :
-  if test "${with_gap_root+set}" = set; then :
-    with_gaproot=$with_gap_root
-  fi
-fi
-
-FIND_GAP
+AC_ARG_WITH([gmp],
+  [AS_HELP_STRING([--with-gmp@<:@=PREFIX@:>@],
+    [prefix of GMP installation. e.g. /usr/local])],
+    [],[with_gmp=yes])
 
+GMP_CPPFLAGS=""
+GMP_LDFLAGS=""
+GMP_LIBS="-lgmp"
 
-dnl ##
-dnl ## Check whether to use 32bit or 64bit ABI
-dnl ##
-AC_CHECK_SIZEOF(void *, 4)
-
-AC_ARG_VAR(ABI, [Set this equal to 32 or 64 to build nq
-		 in 32- or 64-bit mode. The default value
-		 for this option is determined by testing the behaviour of your
-		 compiler, so should be 32 on a 32-bit system and 64 on one
-		 which is 64-bit.])
-
-AC_MSG_CHECKING([ABI bit size])
-if test "x$ABI" = "x" ;  then
-  if test $ac_cv_sizeof_void_p = 8; then
-    ABI="64"
-  else
-    ABI="32"
-  fi
-  ABI_CFLAGS=""
-elif test "$ABI" = "64"; then
-  if test $ac_cv_sizeof_void_p = 4; then
-    AC_MSG_ERROR([ ABI=64 cannot be used on a 32-bit system.
-                   Please replace this value with 32 and retry configure.
-                   If you think this error is wrong, email
-                   support@gap-system.org with full details.])
-  else
-    ABI_CFLAGS="-m64"
-  fi
-elif test "$ABI" = "32"; then
-  ABI_CFLAGS="-m32"
+if test "x$with_gmp" = "xno" ; then
+	AC_MSG_ERROR([GMP is required and cannot be disabled])
+elif test "x$with_gmp" = "xyes" ; then
+    # If a gaproot was specified, try to find GMP in there; otherwise, fall
+    # back to whatever GMP may be found via user specified C/CPP/LDFLAGS
+    if test "${with_gaproot+set}" = set; then
+        echo "with_gaproot = $with_gaproot"
+        if test -f ${with_gaproot}/extern/install/gmp/include/gmp.h && test -d ${with_gaproot}/extern/install/gmp/lib ; then
+            echo "adjusting stuff based on gaproot"
+            GMP_CPPFLAGS="-I${with_gaproot}/extern/install/gmp/include"
+            GMP_LDFLAGS="-L${with_gaproot}/extern/install/gmp/lib"
+        fi
+    fi
 else
-  AC_MSG_ERROR([ $ABI is not a supported value for ABI. Please use ABI=64
-                 or 32, or leave it unset.])
-fi
+	if test -d ${with_gmp}/include && test -d ${with_gmp}/lib ; then
+		GMP_CPPFLAGS="-I${with_gmp}/include"
+        GMP_LDFLAGS="-L${with_gmp}/lib"
+	else
+		AC_MSG_ERROR([Could not locate libgmp.a in the specified location])
+	fi
+fi;
+
+save_CPPFLAGS="$CPPFLAGS"
+save_LDFLAGS="$LDFLAGS"
+save_LIBS="$LIBS"
+
+CPPFLAGS="$CPPFLAGS $GMP_CPPFLAGS"
+LDFLAGS="$LDFLAGS $GMP_LDFLAGS"
+LIBS="$LIBS $GMP_LIBS"
 
-AC_MSG_RESULT([$ABI])
+AC_CHECK_HEADER( [gmp.h],
+    [
+    # TODO: Disable linker check for now: It causes problems on Linux, because
+    # libgmp.a is in the linker command line before the test C file. On the long
+    # run, this should be re-enabled, though perhaps in a different form.
+    AC_MSG_CHECKING([whether linking against GMP works])
+    AC_LINK_IFELSE(
+        [AC_LANG_PROGRAM([[#include <gmp.h>]], [[__gmpz_init(0);]])],
+        [have_gmp=yes],
+        []
+        )
+    AC_MSG_RESULT([$have_gmp])
+    ],
+    []
+    )
+
+# restore FLAGS
+CPPFLAGS="$save_CPPFLAGS"
+LDFLAGS="$save_LDFLAGS"
+LIBS="$save_LIBS"
+
+if test "x$have_gmp" != xyes; then
+    AC_MSG_ERROR([Could not locate GMP, the GNU multiprecision library])
+fi
 
-AC_SUBST(ABI)
-AC_SUBST(ABI_CFLAGS)
+AC_SUBST(GMP_CPPFLAGS)
+AC_SUBST(GMP_LDFLAGS)
+AC_SUBST(GMP_LIBS)
 
 dnl ##
 dnl ## Checks for typedefs, structures, and compiler characteristics.
