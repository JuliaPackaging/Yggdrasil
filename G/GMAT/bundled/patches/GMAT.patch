diff -ruN a/CMakeLists.txt b/CMakeLists.txt
--- a/CMakeLists.txt	2020-04-29 20:19:59.000000000 +0200
+++ b/CMakeLists.txt	2020-08-22 11:27:39.000000000 +0200
@@ -110,13 +110,6 @@
 # ====================================================================
 # Enable boost::variant as needed
 
-# Use if on OSX before 10.14
-if(APPLE AND (CMAKE_OSX_DEPLOYMENT_TARGET VERSION_LESS 10.14))
-   SET(GMAT_USE_BOOST_VARIANT ON)
-else()
-   SET(GMAT_USE_BOOST_VARIANT OFF)
-endif()
-
 # Use if C++17 not available
 if(NOT ${CMAKE_CXX_STANDARD} MATCHES "17")
    SET(GMAT_USE_BOOST_VARIANT ON)
@@ -210,9 +203,6 @@
   else()
     SET(CSPICE_EXT "a")
   endif()
-  SET(CSPICE_LIB "${CSPICE_DIR}/lib/cspice.${CSPICE_EXT}")
-  SET(CSPICE_LIB_DEBUG "${CSPICE_DIR}/lib/cspiced.${CSPICE_EXT}")
-  SET(CSPICE_INCLUDE_DIR "${CSPICE_DIR}/include")
   if(NOT EXISTS ${CSPICE_LIB_DEBUG})
     SET(CSPICE_LIB_DEBUG ${CSPICE_LIB})
   endif()
@@ -368,10 +358,6 @@
 # ====================================================================
 # Common build options
 
-if(WIN32)
-  SET (CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -W2")
-endif()
-
 # Enable parallel builds on VisualStudio
 if(MSVC)
   SET (CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} /MP")
@@ -408,12 +394,6 @@
 # Mark debug libraries with a "d" suffix
 SET(CMAKE_DEBUG_POSTFIX "d")
 
-# Warning suppression definitions
-# Note that warning C4430 presents as an error in the MatlabInterface plugin
-if(WIN32)
-  ADD_DEFINITIONS("/wd4430 /wd4251 /wd4231 /wd4996 /nologo")
-endif()
-
 # Set 32/64-bit specific definitions and directories
 if(GMAT_64_BIT)
   ADD_DEFINITIONS("-DUSE_64_BIT_LONGS")
diff -ruN a/plugins/CMakeLists.txt b/plugins/CMakeLists.txt
--- a/plugins/CMakeLists.txt	2020-04-29 20:19:59.000000000 +0200
+++ b/plugins/CMakeLists.txt	2020-08-22 08:19:35.000000000 +0200
@@ -23,7 +23,6 @@
 # Note that all paths should be relative to the plugin's CMakeLists.txt
 MACRO(_SETUPPLUGIN TargetName PLUGIN_DIRS PLUGIN_SRCS INSTALL_DIR)
   # Add Preproccessor Definitions
-  ADD_DEFINITIONS("-D_DYNAMICLINK")
 
   # ====================================================================
   # Recursively find all include files in specified directories
@@ -428,9 +427,4 @@
 if(PluginTargets)
   # Specify the library version
   SET_TARGET_PROPERTIES(${PluginTargets} PROPERTIES VERSION ${GMAT_VERSION})
-
-  # Specify link flags for Win32 targets
-  if(WIN32)
-    SET_TARGET_PROPERTIES(${PluginTargets} PROPERTIES LINK_FLAGS "/NODEFAULTLIB:\"libcmt.lib\"")
-  endif()
 endif()
diff -ruN a/plugins/EstimationPlugin/src/base/measurement/Ionosphere/Ionosphere.hpp b/plugins/EstimationPlugin/src/base/measurement/Ionosphere/Ionosphere.hpp
--- a/plugins/EstimationPlugin/src/base/measurement/Ionosphere/Ionosphere.hpp	2020-04-29 20:19:59.000000000 +0200
+++ b/plugins/EstimationPlugin/src/base/measurement/Ionosphere/Ionosphere.hpp	2020-08-22 09:39:10.000000000 +0200
@@ -34,8 +34,6 @@
 
 #include "f2c.h"
 
-#ifdef __linux__
-
 #ifndef integer
 typedef int integer;
 #endif
@@ -53,33 +51,6 @@
 #undef max
 #endif
 
-#endif
-
-#ifdef __APPLE__
-
-//#undef abs  // to work on Mac - the macro for abs confuses the Mac C++ code
-
-#ifndef integer
-typedef int integer;
-#endif
-
-#ifndef logical
-typedef int logical;
-#endif
-
-#ifndef ftnlen
-typedef int ftnlen;
-#endif
-
-#endif
-
-#ifdef _MSC_VER
-//#else
-typedef long int integer;
-typedef long int logical;
-typedef long int ftnlen;
-#endif
-
 typedef float real;
 typedef double doublereal;
 
diff -ruN a/src/base/CMakeLists.txt b/src/base/CMakeLists.txt
--- a/src/base/CMakeLists.txt	2020-08-22 08:16:52.000000000 +0200
+++ b/src/base/CMakeLists.txt	2020-08-22 08:17:58.000000000 +0200
@@ -17,7 +17,6 @@
 SET(TargetName GmatBase)
 
 # Add preprocessor definitions
-ADD_DEFINITIONS("-D_DYNAMICLINK")
 ADD_DEFINITIONS("-DEXP_STL")
 
 SET(SPICE_SRCS
@@ -542,11 +541,6 @@
 # Macro defined in top-level CMakeLists.txt
 _ADDSOURCEGROUPS("${BASE_DIRS}")
 
-# Windows-specific link flags
-if(WIN32)
-  SET_TARGET_PROPERTIES(${TargetName} PROPERTIES LINK_FLAGS "/NODEFAULTLIB:\"libcmt.lib\" /INCREMENTAL:NO")
-endif()
-
 # Create build products in bin directory
 _SETOUTPUTDIRECTORY(${TargetName} bin)
 
diff -ruN a/src/base/forcemodel/ODEModel.cpp b/src/base/forcemodel/ODEModel.cpp
--- a/src/base/forcemodel/ODEModel.cpp	2020-04-29 20:19:59.000000000 +0200
+++ b/src/base/forcemodel/ODEModel.cpp	2020-08-22 08:20:38.000000000 +0200
@@ -2680,7 +2680,7 @@
                   if (!cs)
                   {
                      char sataddr[20];
-                     std::sprintf(sataddr, "%lx", (unsigned long)sat);
+                     std::sprintf(sataddr, "%lx", (uintptr_t)sat);
                      throw ODEModelException(
                         "CoordinateSystem is NULL on Spacecraft " + sat->GetName() +
                         " at address " + sataddr);
diff -ruN a/src/base/function/SystemTime.cpp b/src/base/function/SystemTime.cpp
--- a/src/base/function/SystemTime.cpp	2020-04-29 20:19:59.000000000 +0200
+++ b/src/base/function/SystemTime.cpp	2020-08-22 08:21:18.000000000 +0200
@@ -335,45 +335,33 @@
    Integer year, month, day, hour, min, sec;
    Real msec;
 
-   #ifdef _WIN32
-      SYSTEMTIME theTime;
-      GetSystemTime(&theTime);
-
-      year = theTime.wYear;
-      month = theTime.wMonth;
-      day = theTime.wDay;
-      hour = theTime.wHour;
-      min = theTime.wMinute;
-      msec = theTime.wSecond + theTime.wMilliseconds / 1000.0;
-   #else
-      //Retrieve the system time. This result is UTCGregorian, but not in the accepted
-      //GMAT format.
-      std::chrono::system_clock::time_point now = std::chrono::system_clock::now();
-      std::time_t now_t = std::chrono::system_clock::to_time_t(now);
-
-      long int millis =
-            std::chrono::duration_cast<std::chrono::milliseconds>
-            (now.time_since_epoch()).count();
-
-      #ifdef DEBUG_TIME_SYSTEM
-         // What is the epoch time?
-         std::chrono::time_point<std::chrono::system_clock> p1;
-         std::time_t epoch_time = std::chrono::system_clock::to_time_t(p1);
-         std::string epstr = std::ctime(&epoch_time);
-      #endif
-
-      msec = millis / 1000.0 - (Integer)(millis / 1000);
-
-      //Convert the retrieved system time to a proper formatted UTCModJulian time.
-      struct tm *now_struct = gmtime(&now_t);
-
-      year = now_struct->tm_year + 1900;
-      month = now_struct->tm_mon + 1;
-      day = now_struct->tm_mday;
-      hour = now_struct->tm_hour;
-      min = now_struct->tm_min;
-      msec = now_struct->tm_sec + msec;
-   #endif
+   //Retrieve the system time. This result is UTCGregorian, but not in the accepted
+   //GMAT format.
+   std::chrono::system_clock::time_point now = std::chrono::system_clock::now();
+   std::time_t now_t = std::chrono::system_clock::to_time_t(now);
+
+   long int millis =
+         std::chrono::duration_cast<std::chrono::milliseconds>
+         (now.time_since_epoch()).count();
+
+   #ifdef DEBUG_TIME_SYSTEM
+      // What is the epoch time?
+      std::chrono::time_point<std::chrono::system_clock> p1;
+      std::time_t epoch_time = std::chrono::system_clock::to_time_t(p1);
+      std::string epstr = std::ctime(&epoch_time);
+   #endif
+
+   msec = millis / 1000.0 - (Integer)(millis / 1000);
+
+   //Convert the retrieved system time to a proper formatted UTCModJulian time.
+   struct tm *now_struct = gmtime(&now_t);
+
+   year = now_struct->tm_year + 1900;
+   month = now_struct->tm_mon + 1;
+   day = now_struct->tm_mday;
+   hour = now_struct->tm_hour;
+   min = now_struct->tm_min;
+   msec = now_struct->tm_sec + msec;
 
    #ifdef DEBUG_SYSTEM_TIME
       MessageInterface::ShowMessage("SystemTime is %02d:%02d:%02d.%03d\n",
diff -ruN a/src/gmatutil/CMakeLists.txt b/src/gmatutil/CMakeLists.txt
--- a/src/gmatutil/CMakeLists.txt	2020-04-29 20:19:59.000000000 +0200
+++ b/src/gmatutil/CMakeLists.txt	2020-08-22 08:18:49.000000000 +0200
@@ -16,7 +16,6 @@
 SET(TargetName GmatUtil)
 
 # Add preprocessor definitions
-ADD_DEFINITIONS("-D_DYNAMICLINK")
 ADD_DEFINITIONS("-DEXP_STL")
 
 # ====================================================================
@@ -141,11 +140,6 @@
 # Macro defined in top-level CMakeLists.txt
 _ADDSOURCEGROUPS("${UTIL_DIRS}")
 
-# Windows-specific link flags
-if(WIN32)
-  SET_TARGET_PROPERTIES(${TargetName} PROPERTIES LINK_FLAGS "/NODEFAULTLIB:\"libcmt.lib\" /INCREMENTAL:NO")
-endif()
-
 # Create build products in bin directory
 _SETOUTPUTDIRECTORY(${TargetName} bin)
 
