diff --git a/elf/dl-load.c b/elf/dl-load.c
index f972524421..70b08b4bf5 100644
--- a/elf/dl-load.c
+++ b/elf/dl-load.c
@@ -73,6 +73,8 @@ struct filebuf
 #include <dl-prop.h>
 #include <not-cancel.h>
 
+#include <ldconfig.h>
+
 #include <endian.h>
 #if BYTE_ORDER == BIG_ENDIAN
 # define byteorder ELFDATA2MSB
@@ -1442,7 +1444,61 @@ print_search_path (struct r_search_path_elem **list,
   else
     _dl_debug_printf_c ("\t\t(%s)\n", what);
 }
-
+
+struct known_names
+{
+  const char *soname;
+  int flag;
+};
+
+static struct known_names known_libs[] =
+{
+#ifdef SYSDEP_KNOWN_LIBRARY_NAMES
+  SYSDEP_KNOWN_LIBRARY_NAMES
+#endif
+};
+
+static int validate_lib(int fd, unsigned int dynamic_addr, unsigned int dynamic_size)
+{
+    ElfW(Dyn) *dyn_entry;
+    ElfW(Dyn) *dynamic_segment = alloca(dynamic_size);
+    char fname[255];
+    __lseek (fd, dynamic_addr, SEEK_SET);
+    if ((size_t) __libc_read (fd, (void *) dynamic_segment, dynamic_size) != dynamic_size)
+    {
+        return -2;
+    }
+    // Find the string table
+    unsigned int string_offset = 0;
+    for (dyn_entry = dynamic_segment; dyn_entry->d_tag != DT_NULL; ++dyn_entry)
+    {
+        if (dyn_entry->d_tag == DT_STRTAB) {
+            string_offset = dyn_entry->d_un.d_val;
+            break;
+        }
+    }
+    if (string_offset != 0) {
+        for (dyn_entry = dynamic_segment; dyn_entry->d_tag != DT_NULL; ++dyn_entry)
+        {
+            if (dyn_entry->d_tag == DT_NEEDED) {
+                __lseek (fd, string_offset + dyn_entry->d_un.d_val, SEEK_SET);
+                ssize_t nchars = __libc_read (fd, (void *)fname, 254);
+                if (nchars == -1)
+                    return -2;
+                fname[nchars] = 0;
+                for (int j = 0; j < sizeof (known_libs) / sizeof (known_libs [0]); ++j) {
+                    if (strcmp (fname, known_libs [j].soname) == 0)
+                    {
+                        if (known_libs [j].flag == FLAG_ELF_MUSL)
+                            return 1;
+                    }
+                }
+            }
+        }
+    }
+    return 0;
+}
+
 /* Open a file and verify it is an ELF file for this architecture.  We
    ignore only ELF files for other architectures.  Non-ELF files and
    ELF files with different header information cause fatal errors since
@@ -1487,6 +1543,8 @@ open_verify (const char *name, int fd,
   } expected_note = { 4, 16, 1, "GNU" };
   /* Initialize it to make the compiler happy.  */
   const char *errstring = NULL;
+  unsigned int dynamic_addr = 0;
+  unsigned int dynamic_size = 0;
   int errval = 0;
 
 #ifdef SHARED
@@ -1680,8 +1738,14 @@ open_verify (const char *name, int fd,
 			     loader, fd)))
 	goto close_and_out;
 
-      /* Check .note.ABI-tag if present.  */
-      for (ph = phdr; ph < &phdr[ehdr->e_phnum]; ++ph)
+    dynamic_addr = 0;
+    dynamic_size = 0;
+    /* Check .note.ABI-tag if present.  */
+    for (ph = phdr; ph < &phdr[ehdr->e_phnum]; ++ph) {
+      if (ph->p_type == PT_DYNAMIC) {
+        dynamic_addr = ph->p_offset;
+        dynamic_size = ph->p_filesz;
+      }
 	if (ph->p_type == PT_NOTE && ph->p_filesz >= 32 && ph->p_align >= 4)
 	  {
 	    ElfW(Addr) size = ph->p_filesz;
@@ -1757,6 +1821,20 @@ open_verify (const char *name, int fd,
 	  }
       free (abi_note_malloced);
     }
+    /* Check the dynamic section */
+    if (dynamic_addr != 0 && fd != -1) {
+      int err = validate_lib(fd, dynamic_addr, dynamic_size);
+      if (err == -2) {
+        errstring = N_("failed to read file");
+        goto call_lose;
+      }
+      else if (err != 0) {
+        __close (fd);
+        __set_errno (ENOENT);
+        fd = -1;
+      }
+    }
+  }
 
   return fd;
 }
diff --git a/elf/ldconfig.c b/elf/ldconfig.c
index 206cd51df6..5ad7e32812 100644
--- a/elf/ldconfig.c
+++ b/elf/ldconfig.c
@@ -875,6 +875,15 @@ search_dir (const struct dir_entry *entry)
 	    add_to_aux_cache (&lstat_buf, flag, osversion, soname);
 	}
 
+/* Don't try to load MUSL-dependent libraries */
+    if ((flag & FLAG_TYPE_MASK) == FLAG_ELF_MUSL) {
+	  if (real_name != real_file_name)
+	    free (real_name);
+	  if (opt_verbose)
+	    error (0, 0, _("Skipping musl-linked library %s"), file_name);
+	  continue;
+    }
+
       if (soname == NULL)
 	soname = implicit_soname (direntry->d_name, flag);
 
diff --git a/sysdeps/generic/ldconfig.h b/sysdeps/generic/ldconfig.h
index 2e9ca92c23..2d6529784a 100644
--- a/sysdeps/generic/ldconfig.h
+++ b/sysdeps/generic/ldconfig.h
@@ -27,6 +27,7 @@
 #define FLAG_ELF			0x0001
 #define FLAG_ELF_LIBC5			0x0002
 #define FLAG_ELF_LIBC6			0x0003
+#define FLAG_ELF_MUSL			0x0004
 #define FLAG_REQUIRED_MASK		0xff00
 #define FLAG_SPARC_LIB64		0x0100
 #define FLAG_IA64_LIB64			0x0200
diff --git a/sysdeps/unix/sysv/linux/aarch64/ldconfig.h b/sysdeps/unix/sysv/linux/aarch64/ldconfig.h
index cc7e855e8f..04f4e417f3 100644
--- a/sysdeps/unix/sysv/linux/aarch64/ldconfig.h
+++ b/sysdeps/unix/sysv/linux/aarch64/ldconfig.h
@@ -27,4 +27,5 @@
   { "/lib/ld-linux-armhf.so.3", FLAG_ELF_LIBC6 },
 #define SYSDEP_KNOWN_LIBRARY_NAMES \
   { "libc.so.6", FLAG_ELF_LIBC6 },	\
-  { "libm.so.6", FLAG_ELF_LIBC6 },
+  { "libm.so.6", FLAG_ELF_LIBC6 },  \
+  { "libc.musl-aarch64.so.1", FLAG_ELF_MUSL },
diff --git a/sysdeps/unix/sysv/linux/arm/ldconfig.h b/sysdeps/unix/sysv/linux/arm/ldconfig.h
index 040e33ca0d..14b16c1bd3 100644
--- a/sysdeps/unix/sysv/linux/arm/ldconfig.h
+++ b/sysdeps/unix/sysv/linux/arm/ldconfig.h
@@ -22,4 +22,5 @@
   { "/lib/ld-linux-armhf.so.3", FLAG_ELF_LIBC6 },
 #define SYSDEP_KNOWN_LIBRARY_NAMES \
   { "libc.so.6", FLAG_ELF_LIBC6 },	\
-  { "libm.so.6", FLAG_ELF_LIBC6 },
+  { "libm.so.6", FLAG_ELF_LIBC6 },  \
+  { "libc.musl-armhf.so.1", FLAG_ELF_MUSL },
diff --git a/sysdeps/unix/sysv/linux/i386/ldconfig.h b/sysdeps/unix/sysv/linux/i386/ldconfig.h
index 79d156902d..713b6e2e72 100644
--- a/sysdeps/unix/sysv/linux/i386/ldconfig.h
+++ b/sysdeps/unix/sysv/linux/i386/ldconfig.h
@@ -21,4 +21,5 @@
   { "/lib/ld-linux.so.1", FLAG_ELF_LIBC5 },
 #define SYSDEP_KNOWN_LIBRARY_NAMES \
   { "libc.so.5", FLAG_ELF_LIBC5 },	\
-  { "libm.so.5", FLAG_ELF_LIBC5 },
+  { "libm.so.5", FLAG_ELF_LIBC5 },  \
+  { "libc.musl-i386.so.1", FLAG_ELF_MUSL },
diff --git a/sysdeps/unix/sysv/linux/x86_64/ldconfig.h b/sysdeps/unix/sysv/linux/x86_64/ldconfig.h
index 111180a63f..510817b424 100644
--- a/sysdeps/unix/sysv/linux/x86_64/ldconfig.h
+++ b/sysdeps/unix/sysv/linux/x86_64/ldconfig.h
@@ -23,4 +23,5 @@
   { "/lib64/ld-linux-x86-64.so.2", FLAG_ELF_LIBC6 },
 #define SYSDEP_KNOWN_LIBRARY_NAMES \
   { "libc.so.6", FLAG_ELF_LIBC6 },	\
-  { "libm.so.6", FLAG_ELF_LIBC6 },
+  { "libm.so.6", FLAG_ELF_LIBC6 },  \
+  { "libc.musl-x86_64.so.1", FLAG_ELF_MUSL },
