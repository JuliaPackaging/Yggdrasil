From 2ec832675deaa3d68e6061c1617800c6cf1ed6aa Mon Sep 17 00:00:00 2001
From: Max Horn <max@quendi.de>
Date: Tue, 13 Sep 2022 16:09:34 +0200
Subject: [PATCH 2/2] configure.ac: patch Julia compiler flags computation

The normal code in GAP invokes Julia to "ask" it for the relevant flags.
But that doesn't work well when cross compiling, and even worse when
there is no `julia` executable at all, as is the case in the Yggdrasil
build environments.

So instead, we hardcode the relevant flags for Yggdrasil.

Better would be if there was a way to tell GAP to not try to invoke
`julia` and instead take `JULIA_CFLAGS` etc. from e.g. environment
variables.
---
 configure.ac | 23 ++++++-----------------
 1 file changed, 6 insertions(+), 17 deletions(-)

diff --git a/configure.ac b/configure.ac
index 4ddc2bbc1..c4e6192b5 100644
--- a/configure.ac
+++ b/configure.ac
@@ -718,35 +718,24 @@ AS_IF([test "x$with_julia" != xno ],[
         [ AC_MSG_ERROR([invalid argument to --with-julia]) ] )
       JULIA_PATH="${PATH}"
     ])
-    AC_PATH_PROG([JULIA], [julia], [], [$JULIA_PATH])
+    dnl AC_PATH_PROG([JULIA], [julia], [], [$JULIA_PATH])
   ])
-  AS_IF([test "x$JULIA" = x],[ AC_MSG_ERROR([no julia executable found]) ])
+  dnl AS_IF([test "x$JULIA" = x],[ AC_MSG_ERROR([no julia executable found]) ])
 
   AC_MSG_CHECKING([for Julia version])
-  JULIA_VERSION=$(${JULIA} --startup-file=no -e 'print("$(VERSION.major).$(VERSION.minor)")')
-  AS_IF([ test $? != 0 ], [AC_MSG_ERROR([failed to obtain Julia version])])
+  # HACK: assume JULIA_VERSION environment var is set
   AC_MSG_RESULT([${JULIA_VERSION}])
 
-  JL_SHARE=$($JULIA --startup-file=no -e 'print(joinpath(Sys.BINDIR, Base.DATAROOTDIR, "julia"))')
-  AS_IF([test -f "${JL_SHARE}/julia-config.jl"], [], [AC_MSG_ERROR([no julia-config.jl found])])
-
   AC_MSG_CHECKING([for JULIA_CFLAGS])
-  JULIA_CFLAGS=$(${JULIA} --startup-file=no ${JL_SHARE}/julia-config.jl --cflags 2>/dev/null)
-  JULIA_CFLAGS=${JULIA_CFLAGS/-std=gnu99/}  # need to remove -std=gnu99 for our C11 and C++ code
-  AS_IF([ test $? != 0 ], [AC_MSG_ERROR([failed to obtain JULIA_CFLAGS from julia-config.jl])])
+  JULIA_CFLAGS="-I/workspace/destdir/include/julia -fPIC"
   AC_MSG_RESULT([${JULIA_CFLAGS}])
 
   AC_MSG_CHECKING([for JULIA_LDFLAGS])
-  JULIA_LDFLAGS=$(${JULIA} --startup-file=no ${JL_SHARE}/julia-config.jl --ldflags)
-  AS_IF([ test $? != 0 ], [AC_MSG_ERROR([failed to obtain JULIA_LDFLAGS from julia-config.jl])])
-  JULIA_LDFLAGS=${JULIA_LDFLAGS//\'/}
+  JULIA_LDFLAGS="-L/workspace/destdir/lib -L/workspace/destdir/lib/julia"
   AC_MSG_RESULT([${JULIA_LDFLAGS}])
 
   AC_MSG_CHECKING([for JULIA_LIBS])
-  JULIA_LIBS=$(${JULIA} --startup-file=no ${JL_SHARE}/julia-config.jl --ldlibs)
-  AS_IF([ test $? != 0 ], [AC_MSG_ERROR([failed to obtain JULIA_LIBS from julia-config.jl])])
-  # remove apostrophes, they confuse libtool in some cases.
-  JULIA_LIBS=${JULIA_LIBS//\'/}
+  JULIA_LIBS="-Wl,-rpath,/workspace/destdir/lib -Wl,-rpath,/workspace/destdir/lib/julia -ljulia"
   AC_MSG_RESULT([${JULIA_LIBS}])
 ],
 [
-- 
2.39.0

