From f8ef228807ba245538492eaf7abc47e804154eef Mon Sep 17 00:00:00 2001
From: Fredrik Johansson <fredrik.johansson@gmail.com>
Date: Wed, 16 Apr 2025 23:22:31 +0200
Subject: [PATCH] Fix fmpz_mat_minpoly_modular with large coefficients (#2303)

---
 src/fmpz_mat/minpoly_modular.c | 83 ++++++++++++++++++++++------------
 src/fmpz_mat/test/t-minpoly.c  |  9 ++--
 2 files changed, 59 insertions(+), 33 deletions(-)

diff --git a/src/fmpz_mat/minpoly_modular.c b/src/fmpz_mat/minpoly_modular.c
index ce11eabc4e..5ee237c048 100644
--- a/src/fmpz_mat/minpoly_modular.c
+++ b/src/fmpz_mat/minpoly_modular.c
@@ -20,13 +20,6 @@
 #include "fmpz_poly.h"
 #include "fmpz_mat.h"
 
-#define MINPOLY_M_LOG2E  1.44269504088896340736  /* log2(e) */
-
-static inline long double _log2(const long double x)
-{
-    return log(x) * MINPOLY_M_LOG2E;
-}
-
 slong _fmpz_mat_minpoly_small(fmpz * rop, const fmpz_mat_t op)
 {
     slong len = 0;
@@ -109,6 +102,56 @@ void _fmpz_mat_bound_ovals_of_cassini(fmpz_t b, const fmpz_mat_t op)
    fmpz_clear(q);
 }
 
+static inline double _log2e(const double x, slong exp)
+{
+    return log(x) * 1.44269504088896340736 + exp;
+}
+
+/*
+    If $A$ is an $n \times n$ matrix with spectral radius
+    bound by b, the coefficients of the minimal polynomial have
+    at most $\ceil{d\log_2(b)}$ bits if $d \leq b$. Otherwise
+    if $d > 0$ it has at most
+    $\min{\ceil{d/2\log_2(bd)}, \ceil{d\log_2(2b)}}$
+    bits, where $d$ is the degree of the minimal polynomial.
+    See Lemma 3.1 in Dumas, "Bounds on the coefficients of the
+    characteristic and minimal polynomials", 2007.
+*/
+slong
+_fmpz_mat_minpoly_bound_bits(const fmpz_mat_t op)
+{
+    const slong n = op->r;
+    slong bound;
+
+    fmpz_t b;
+    fmpz_init(b);
+
+    _fmpz_mat_bound_ovals_of_cassini(b, op);
+    fmpz_add_ui(b, b, fmpz_is_zero(b));
+
+    double bb, b1, b2;
+    slong exp;
+
+    bb = fmpz_get_d_2exp(&exp, b);
+
+    fmpz_clear(b);
+
+    if (fmpz_cmp_ui(b, n) >= 0)
+    {
+        b1 = _log2e(bb, exp);
+    }
+    else
+    {
+        b1 = _log2e(bb * n, exp) * 0.5;
+        b2 = _log2e(bb * 2, exp);
+        b1 = FLINT_MIN(b1, b2);
+    }
+
+    bound = ceil(n * b1 * (1 + 1e-10));
+
+    return bound;
+}
+
 slong _fmpz_mat_minpoly_modular(fmpz * rop, const fmpz_mat_t op)
 {
     const slong n = op->r;
@@ -131,7 +174,6 @@ slong _fmpz_mat_minpoly_modular(fmpz * rop, const fmpz_mat_t op)
             characteristic and minimal polynomials", 2007.
         */
         ulong bound;
-        double b1, b2, b3, bb;
 
         slong pbits  = FLINT_BITS - 1, i, j;
         ulong p = (UWORD(1) << pbits);
@@ -148,28 +190,9 @@ slong _fmpz_mat_minpoly_modular(fmpz * rop, const fmpz_mat_t op)
         }
 
         /* Determine the bound in bits */
-        {
-            fmpz_t b;
-
-            fmpz_init(b);
-
-            _fmpz_mat_bound_ovals_of_cassini(b, op);
-            bb = fmpz_get_d(b);
-            if (bb <= 1.0)
-               bb = 1.0;
-
-            b1 = _log2(bb);
-            b2 = _log2(bb*n)/2;
-            b3 = _log2(bb*2);
-
-            if (b3 < b2)
-               b2 = b3;
-
-            bound = n <= bb ? (ulong) ceil(n*b1) : (ulong) ceil(n*b2);
-            bound = bound + 1;
-
-            fmpz_clear(b);
-        }
+        bound = _fmpz_mat_minpoly_bound_bits(op);
+        /* Allow for signs */
+        bound += 1;
 
         P = (ulong *) flint_calloc(n, sizeof(ulong));
         Q = (ulong *) flint_calloc(n, sizeof(ulong));
diff --git a/src/fmpz_mat/test/t-minpoly.c b/src/fmpz_mat/test/t-minpoly.c
index 9e37781a3b..7288f22a4b 100644
--- a/src/fmpz_mat/test/t-minpoly.c
+++ b/src/fmpz_mat/test/t-minpoly.c
@@ -42,7 +42,7 @@ TEST_FUNCTION_START(fmpz_mat_minpoly, state)
         fmpz_poly_t f, g, q, r;
         slong ix;
 
-        n = n_randint(state, 4);
+        n = n_randint(state, 10);
 
         fmpz_init(c);
         fmpz_mat_init(A, n, n);
@@ -51,7 +51,10 @@ TEST_FUNCTION_START(fmpz_mat_minpoly, state)
         fmpz_poly_init(q);
         fmpz_poly_init(r);
 
-        fmpz_mat_randtest(A, state, 10);
+        if (n_randint(state, 50) == 0)
+            fmpz_mat_randtest(A, state, 1000);
+        else
+            fmpz_mat_randtest(A, state, 10);
 
         set_matrix(A, n);
 
@@ -91,7 +94,7 @@ TEST_FUNCTION_START(fmpz_mat_minpoly, state)
         fmpz_poly_t f, g;
         slong ix;
 
-        n = n_randint(state, 4);
+        n = n_randint(state, 10);
 
         fmpz_init(c);
         fmpz_mat_init(A, n, n);
-- 
2.45.0

