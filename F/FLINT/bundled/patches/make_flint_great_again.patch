From a7a234463c0d4b5730d05ad57ab2798b2df26127 Mon Sep 17 00:00:00 2001
From: Fredrik Johansson <fredrik.johansson@gmail.com>
Date: Tue, 28 Mar 2023 17:47:32 +0200
Subject: [PATCH 1/5] avoid looped tmp allocations (possible stack overflow) in
 mpoly_divrem_ideal functions

---
 fmpz_mod_mpoly/divrem_ideal_monagan_pearce.c | 17 ++++++++++-----
 fmpz_mpoly/divrem_ideal_monagan_pearce.c     | 19 +++++++++++------
 fmpz_mpoly/quasidivrem_ideal_heap.c          | 19 +++++++++++------
 fq_nmod_mpoly/divrem_ideal_monagan_pearce.c  | 22 +++++++++++++-------
 nmod_mpoly/divrem_ideal_monagan_pearce.c     | 19 +++++++++++------
 5 files changed, 66 insertions(+), 30 deletions(-)

diff --git a/fmpz_mod_mpoly/divrem_ideal_monagan_pearce.c b/fmpz_mod_mpoly/divrem_ideal_monagan_pearce.c
index 2d8047a0a..e291c0435 100644
--- a/fmpz_mod_mpoly/divrem_ideal_monagan_pearce.c
+++ b/fmpz_mod_mpoly/divrem_ideal_monagan_pearce.c
@@ -28,8 +28,8 @@ int _fmpz_mod_mpoly_divrem_ideal_monagan_pearce(
     slong len3;
     slong heap_len = 2; /* heap zero index unused */
     mpoly_heap_s * heap;
-    mpoly_nheap_t ** chains;
-    slong ** hinds;
+    mpoly_nheap_t ** chains, * chains_ptr;
+    slong ** hinds, * hinds_ptr;
     mpoly_nheap_t * x;
     fmpz * r_coeff = R->coeffs;
     ulong * r_exp = R->exps;
@@ -47,14 +47,21 @@ int _fmpz_mod_mpoly_divrem_ideal_monagan_pearce(
 
     fmpz_init(acc);
 
-    /* TODO figure out how to avoid TMP_ALLOC in a loop */
     chains = TMP_ARRAY_ALLOC(Blen, mpoly_nheap_t *);
     hinds = TMP_ARRAY_ALLOC(Blen, slong *);
+
+    /* chains[w], hinds[w] will be arrays of length Bs[w]->length; combine the allocations*/
+    len3 = 0;
+    for (w = 0; w < Blen; w++)
+        len3 += Bs[w]->length;
+    chains_ptr = TMP_ARRAY_ALLOC(len3, mpoly_nheap_t);
+    hinds_ptr = TMP_ARRAY_ALLOC(len3, slong);
+
     len3 = 0;
     for (w = 0; w < Blen; w++)
     {
-        chains[w] = TMP_ARRAY_ALLOC(Bs[w]->length, mpoly_nheap_t);
-        hinds[w] = TMP_ARRAY_ALLOC(Bs[w]->length, slong);
+        chains[w] = chains_ptr + len3;
+        hinds[w] = hinds_ptr + len3;
         len3 += Bs[w]->length;
         for (i = 0; i < Bs[w]->length; i++)
             hinds[w][i] = 1;
diff --git a/fmpz_mpoly/divrem_ideal_monagan_pearce.c b/fmpz_mpoly/divrem_ideal_monagan_pearce.c
index cd51c3e99..800417c38 100644
--- a/fmpz_mpoly/divrem_ideal_monagan_pearce.c
+++ b/fmpz_mpoly/divrem_ideal_monagan_pearce.c
@@ -46,8 +46,8 @@ slong _fmpz_mpoly_divrem_ideal_monagan_pearce1(fmpz_mpoly_struct ** polyq,
     slong len3;
     slong heap_len = 2; /* heap zero index unused */
     mpoly_heap1_s * heap;
-    mpoly_nheap_t ** chains;
-    slong ** hinds;
+    mpoly_nheap_t ** chains, * chains_ptr;
+    slong ** hinds, * hinds_ptr;
     mpoly_nheap_t * x;
     fmpz * p2 = *polyr;
     ulong * e2 = *expr;
@@ -70,15 +70,22 @@ slong _fmpz_mpoly_divrem_ideal_monagan_pearce1(fmpz_mpoly_struct ** polyq,
 
     bits2 = _fmpz_vec_max_bits(poly2, len2);
 
-    chains = (mpoly_nheap_t **) TMP_ALLOC(len*sizeof(mpoly_nheap_t *));
-    hinds = (slong **) TMP_ALLOC(len*sizeof(slong *));
+    chains = TMP_ARRAY_ALLOC(len, mpoly_nheap_t *);
+    hinds = TMP_ARRAY_ALLOC(len, slong *);
+
+    /* chains[w], hinds[w] will be arrays of length poly3[w]->length; combine the allocations*/
+    len3 = 0;
+    for (w = 0; w < len; w++)
+        len3 += poly3[w]->length;
+    chains_ptr = TMP_ARRAY_ALLOC(len3, mpoly_nheap_t);
+    hinds_ptr = TMP_ARRAY_ALLOC(len3, slong);
 
     bits3 = 0;
     len3 = 0;
     for (w = 0; w < len; w++)
     {
-        chains[w] = (mpoly_nheap_t *) TMP_ALLOC((poly3[w]->length)*sizeof(mpoly_nheap_t));
-        hinds[w] = (slong *) TMP_ALLOC((poly3[w]->length)*sizeof(slong));
+        chains[w] = chains_ptr + len3;
+        hinds[w] = hinds_ptr + len3;
         bits3 = FLINT_MAX(bits3, FLINT_ABS(fmpz_mpoly_max_bits(poly3[w])));
         len3 += poly3[w]->length;
         for (i = 0; i < poly3[w]->length; i++)
diff --git a/fmpz_mpoly/quasidivrem_ideal_heap.c b/fmpz_mpoly/quasidivrem_ideal_heap.c
index 3522ca06a..5d41e7345 100644
--- a/fmpz_mpoly/quasidivrem_ideal_heap.c
+++ b/fmpz_mpoly/quasidivrem_ideal_heap.c
@@ -24,8 +24,8 @@ slong _fmpz_mpoly_quasidivrem_ideal_heap1(fmpz_t scale, fmpz_mpoly_struct ** pol
     slong len3;
     slong heap_len = 2; /* heap zero index unused */
     mpoly_heap1_s * heap;
-    mpoly_nheap_t ** chains;
-    slong ** hinds;
+    mpoly_nheap_t ** chains, * chains_ptr;
+    slong ** hinds, * hinds_ptr;
     mpoly_nheap_t * x;
     ulong exp, texp;
     ulong mask;
@@ -62,14 +62,21 @@ slong _fmpz_mpoly_quasidivrem_ideal_heap1(fmpz_t scale, fmpz_mpoly_struct ** pol
     rs_alloc = 64;
     rs = (fmpz *) flint_calloc(rs_alloc, sizeof(fmpz));
 
-    chains = (mpoly_nheap_t **) TMP_ALLOC(len*sizeof(mpoly_nheap_t *));
-    hinds = (slong **) TMP_ALLOC(len*sizeof(slong *));
+    chains = TMP_ARRAY_ALLOC(len, mpoly_nheap_t *);
+    hinds = TMP_ARRAY_ALLOC(len, slong *);
+
+    /* chains[w], hinds[w] will be arrays of length poly3[w]->length; combine the allocations*/
+    len3 = 0;
+    for (w = 0; w < len; w++)
+        len3 += poly3[w]->length;
+    chains_ptr = TMP_ARRAY_ALLOC(len3, mpoly_nheap_t);
+    hinds_ptr = TMP_ARRAY_ALLOC(len3, slong);
 
     len3 = 0;
     for (w = 0; w < len; w++)
     {
-        chains[w] = (mpoly_nheap_t *) TMP_ALLOC((poly3[w]->length)*sizeof(mpoly_nheap_t));
-        hinds[w] = (slong *) TMP_ALLOC((poly3[w]->length)*sizeof(slong));
+        chains[w] = chains_ptr + len3;
+        hinds[w] = hinds_ptr + len3;
         len3 += poly3[w]->length;
         for (i = 0; i < poly3[w]->length; i++)
             hinds[w][i] = 1;
diff --git a/fq_nmod_mpoly/divrem_ideal_monagan_pearce.c b/fq_nmod_mpoly/divrem_ideal_monagan_pearce.c
index a7536b44c..d8a68c848 100644
--- a/fq_nmod_mpoly/divrem_ideal_monagan_pearce.c
+++ b/fq_nmod_mpoly/divrem_ideal_monagan_pearce.c
@@ -34,8 +34,8 @@ int _fq_nmod_mpoly_divrem_ideal_monagan_pearce(
     slong len3;
     slong heap_len = 2; /* heap zero index unused */
     mpoly_heap_s * heap;
-    mpoly_nheap_t ** chains;
-    slong ** hinds;
+    mpoly_nheap_t ** chains, * chains_ptr;
+    slong ** hinds, * hinds_ptr;
     mpoly_nheap_t * x;
     mp_limb_t * r_coeff = R->coeffs;
     ulong * r_exp = R->exps;
@@ -49,14 +49,22 @@ int _fq_nmod_mpoly_divrem_ideal_monagan_pearce(
     TMP_INIT;
 
     TMP_START;
-   
-    chains = (mpoly_nheap_t **) TMP_ALLOC(len*sizeof(mpoly_nheap_t *));
-    hinds = (slong **) TMP_ALLOC(len*sizeof(slong *));
+
+    chains = TMP_ARRAY_ALLOC(len, mpoly_nheap_t *);
+    hinds = TMP_ARRAY_ALLOC(len, slong *);
+
+    /* chains[w], hinds[w] will be arrays of length poly3[w]->length; combine the allocations*/
+    len3 = 0;
+    for (w = 0; w < len; w++)
+        len3 += poly3[w]->length;
+    chains_ptr = TMP_ARRAY_ALLOC(len3, mpoly_nheap_t);
+    hinds_ptr = TMP_ARRAY_ALLOC(len3, slong);
+
     len3 = 0;
     for (w = 0; w < len; w++)
     {
-        chains[w] = (mpoly_nheap_t *) TMP_ALLOC((poly3[w]->length)*sizeof(mpoly_nheap_t));
-        hinds[w] = (slong *) TMP_ALLOC((poly3[w]->length)*sizeof(slong));
+        chains[w] = chains_ptr + len3;
+        hinds[w] = hinds_ptr + len3;
         len3 += poly3[w]->length;
         for (i = 0; i < poly3[w]->length; i++)
             hinds[w][i] = 1;
diff --git a/nmod_mpoly/divrem_ideal_monagan_pearce.c b/nmod_mpoly/divrem_ideal_monagan_pearce.c
index fca6ee520..52ed16dba 100644
--- a/nmod_mpoly/divrem_ideal_monagan_pearce.c
+++ b/nmod_mpoly/divrem_ideal_monagan_pearce.c
@@ -32,8 +32,8 @@ int _nmod_mpoly_divrem_ideal_monagan_pearce1(
     slong len3;
     slong heap_len = 2; /* heap zero index unused */
     mpoly_heap1_s * heap;
-    mpoly_nheap_t ** chains;
-    slong ** hinds;
+    mpoly_nheap_t ** chains, * chains_ptr;
+    slong ** hinds, * hinds_ptr;
     mpoly_nheap_t * x;
     mp_limb_t * r_coeff = R->coeffs;
     ulong * r_exp = R->exps;
@@ -46,14 +46,21 @@ int _nmod_mpoly_divrem_ideal_monagan_pearce1(
 
     TMP_START;
 
-    chains = (mpoly_nheap_t **) TMP_ALLOC(Blen*sizeof(mpoly_nheap_t *));
-    hinds = (slong **) TMP_ALLOC(Blen*sizeof(slong *));
+    chains = TMP_ARRAY_ALLOC(Blen, mpoly_nheap_t *);
+    hinds = TMP_ARRAY_ALLOC(Blen, slong *);
+
+    /* chains[w], hinds[w] will be arrays of length Bs[w]->length; combine the allocations*/
+    len3 = 0;
+    for (w = 0; w < Blen; w++)
+        len3 += Bs[w]->length;
+    chains_ptr = TMP_ARRAY_ALLOC(len3, mpoly_nheap_t);
+    hinds_ptr = TMP_ARRAY_ALLOC(len3, slong);
 
     len3 = 0;
     for (w = 0; w < Blen; w++)
     {
-        chains[w] = (mpoly_nheap_t *) TMP_ALLOC((Bs[w]->length)*sizeof(mpoly_nheap_t));
-        hinds[w] = (slong *) TMP_ALLOC((Bs[w]->length)*sizeof(slong));
+        chains[w] = chains_ptr + len3;
+        hinds[w] = hinds_ptr + len3;
         len3 += Bs[w]->length;
         for (i = 0; i < Bs[w]->length; i++)
             hinds[w][i] = 1;
-- 
2.36.1


From bfbc1eb206288abe7b9ccd04d3cb104b4a2b3898 Mon Sep 17 00:00:00 2001
From: Tommy Hofmann <thofma@gmail.com>
Date: Mon, 20 Mar 2023 19:43:41 +0100
Subject: [PATCH 2/5] Fix fq_default_poly_factor_clear

Shouldn't there be a check to catch this? Valgrind or someting like that?
---
 fq_default_poly_factor.h | 4 ++--
 1 file changed, 2 insertions(+), 2 deletions(-)

diff --git a/fq_default_poly_factor.h b/fq_default_poly_factor.h
index 3b5b5b9a3..b2585883e 100644
--- a/fq_default_poly_factor.h
+++ b/fq_default_poly_factor.h
@@ -88,11 +88,11 @@ void fq_default_poly_factor_clear(fq_default_poly_factor_t fac,
     }
     else if (ctx->type == FQ_DEFAULT_NMOD)
     {
-        nmod_poly_factor_init(fac->nmod);
+        nmod_poly_factor_clear(fac->nmod);
     }
     else if (ctx->type == FQ_DEFAULT_FMPZ_MOD)
     {
-        fmpz_mod_poly_factor_init(fac->fmpz_mod, ctx->ctx.fmpz_mod.mod);
+        fmpz_mod_poly_factor_clear(fac->fmpz_mod, ctx->ctx.fmpz_mod.mod);
     }
     else
     {
-- 
2.36.1


From 0292521af462dcd3ba747255a4c5ed9317d911dd Mon Sep 17 00:00:00 2001
From: Tommy Hofmann <thofma@gmail.com>
Date: Wed, 15 Mar 2023 12:24:35 +0100
Subject: [PATCH 3/5] Fix #1264

Initialize the fq_default_ctx properly if the input is a
linear nmod_poly.
---
 fq_default/ctx_init_modulus_nmod.c        |  11 ++-
 fq_default/test/t-ctx_init_modulus_nmod.c | 100 +++++++++++++++++++++-
 2 files changed, 109 insertions(+), 2 deletions(-)

diff --git a/fq_default/ctx_init_modulus_nmod.c b/fq_default/ctx_init_modulus_nmod.c
index d9528a3fc..63e259e57 100644
--- a/fq_default/ctx_init_modulus_nmod.c
+++ b/fq_default/ctx_init_modulus_nmod.c
@@ -43,15 +43,24 @@ void fq_default_ctx_init_modulus_nmod_type(fq_default_ctx_t ctx,
     }
     else if (type == FQ_DEFAULT_NMOD || (type == 0 && d == 1))
     {
+        mp_limb_t c0, c1;
         ctx->type = FQ_DEFAULT_NMOD;
         nmod_init(&ctx->ctx.nmod.mod, p);
-        ctx->ctx.nmod.a = 0;
+        c0 = modulus->coeffs[0];
+        c1 = modulus->coeffs[1];
+        c0 = nmod_neg(c0, ctx->ctx.nmod.mod);
+        ctx->ctx.nmod.a = nmod_div(c0, c1, ctx->ctx.nmod.mod);
     }
     else if (type == FQ_DEFAULT_FMPZ_MOD || (type == 0 && d == 1))
     {
+        mp_limb_t c0, c1;
         ctx->type = FQ_DEFAULT_FMPZ_MOD;
         fmpz_mod_ctx_init_ui(ctx->ctx.fmpz_mod.mod, p);
         fmpz_init_set_ui(ctx->ctx.fmpz_mod.a, 0);
+        c0 = modulus->coeffs[0];
+        c1 = modulus->coeffs[1];
+        c0 = nmod_neg(c0, modulus->mod);
+        fmpz_set_ui(ctx->ctx.fmpz_mod.a, nmod_div(c0, c1, modulus->mod));
     }
     else
     {
diff --git a/fq_default/test/t-ctx_init_modulus_nmod.c b/fq_default/test/t-ctx_init_modulus_nmod.c
index 99e1fa97e..a5a5dc986 100644
--- a/fq_default/test/t-ctx_init_modulus_nmod.c
+++ b/fq_default/test/t-ctx_init_modulus_nmod.c
@@ -78,7 +78,105 @@ main(void)
 
         fq_default_ctx_clear(ctx);
     }
-    
+
+    {
+        fq_default_ctx_t ctx;
+        fq_default_t fq;
+        ulong p;
+        int result;
+        nmod_poly_t mod;
+        fmpz_mod_ctx_t mod_ctx;
+        fmpz_mod_poly_t mod2, mod3;
+        fmpz_t pp;
+
+        p = 3;
+
+        nmod_poly_init(mod, p);
+
+        nmod_poly_fit_length(mod, 2);
+
+        nmod_poly_set_coeff_ui(mod, 0, 2);
+        nmod_poly_set_coeff_ui(mod, 1, 1);
+
+        fq_default_ctx_init_modulus_nmod(ctx, mod, "x");
+
+        fmpz_init(pp);
+        fmpz_set_ui(pp, 3);
+        fmpz_mod_ctx_init(mod_ctx, pp);
+        fmpz_mod_poly_init(mod2, mod_ctx);
+        fmpz_mod_poly_init(mod3, mod_ctx);
+        fmpz_mod_poly_set_coeff_ui(mod3, 0, 2, mod_ctx);
+        fmpz_mod_poly_set_coeff_ui(mod3, 1, 1, mod_ctx);
+        fq_default_ctx_modulus(mod2, ctx);
+        result = fmpz_mod_poly_equal(mod2, mod3, mod_ctx);
+
+        if (!result)
+        {
+            flint_printf("FAIL:\n");
+            fmpz_mod_poly_print(mod2, mod_ctx); flint_printf("\n");
+            fmpz_mod_poly_print(mod3, mod_ctx); flint_printf("\n\n");
+            fflush(stdout);
+            flint_abort();
+        }
+
+        fq_default_clear(fq, ctx);
+        fq_default_ctx_clear(ctx);
+        fmpz_mod_poly_clear(mod2, mod_ctx);
+        fmpz_mod_poly_clear(mod3, mod_ctx);
+        fmpz_mod_ctx_clear(mod_ctx);
+        fmpz_clear(pp);
+        nmod_poly_clear(mod);
+    }
+
+    {
+        fq_default_ctx_t ctx;
+        fq_default_t fq;
+        ulong p;
+        int result;
+        nmod_poly_t mod;
+        fmpz_mod_ctx_t mod_ctx;
+        fmpz_mod_poly_t mod2, mod3;
+        fmpz_t pp;
+
+        p = 3;
+
+        nmod_poly_init(mod, p);
+
+        nmod_poly_fit_length(mod, 2);
+
+        nmod_poly_set_coeff_ui(mod, 0, 2);
+        nmod_poly_set_coeff_ui(mod, 1, 1);
+
+        fq_default_ctx_init_modulus_nmod_type(ctx, mod, "x", FQ_DEFAULT_FMPZ_MOD);
+
+        fmpz_init(pp);
+        fmpz_set_ui(pp, 3);
+        fmpz_mod_ctx_init(mod_ctx, pp);
+        fmpz_mod_poly_init(mod2, mod_ctx);
+        fmpz_mod_poly_init(mod3, mod_ctx);
+        fmpz_mod_poly_set_coeff_ui(mod3, 0, 2, mod_ctx);
+        fmpz_mod_poly_set_coeff_ui(mod3, 1, 1, mod_ctx);
+        fq_default_ctx_modulus(mod2, ctx);
+        result = fmpz_mod_poly_equal(mod2, mod3, mod_ctx);
+
+        if (!result)
+        {
+            flint_printf("FAIL:\n");
+            fmpz_mod_poly_print(mod2, mod_ctx); flint_printf("\n");
+            fmpz_mod_poly_print(mod3, mod_ctx); flint_printf("\n\n");
+            fflush(stdout);
+            flint_abort();
+        }
+
+        fq_default_clear(fq, ctx);
+        fq_default_ctx_clear(ctx);
+        fmpz_mod_poly_clear(mod2, mod_ctx);
+        fmpz_mod_poly_clear(mod3, mod_ctx);
+        fmpz_mod_ctx_clear(mod_ctx);
+        fmpz_clear(pp);
+        nmod_poly_clear(mod);
+    }
+
     FLINT_TEST_CLEANUP(state);
 
     flint_printf("PASS\n");
-- 
2.36.1


From 43b1380f027220eba76e43974b8767909929635b Mon Sep 17 00:00:00 2001
From: Tommy Hofmann <thofma@gmail.com>
Date: Fri, 12 May 2023 15:04:04 +0200
Subject: [PATCH 4/5] Fix bugs in fq_default_mat_rref and fq_default_mat_rank

---
 fq_default_mat.h | 4 ++--
 1 file changed, 2 insertions(+), 2 deletions(-)

diff --git a/fq_default_mat.h b/fq_default_mat.h
index 92a725a4d..9f5c0b03f 100644
--- a/fq_default_mat.h
+++ b/fq_default_mat.h
@@ -1234,7 +1234,7 @@ FQ_DEFAULT_MAT_INLINE slong fq_default_mat_rref(fq_default_mat_t A,
     {
         return nmod_mat_rref(A->nmod);
     }
-    else if (ctx->type == FQ_DEFAULT_NMOD)
+    else if (ctx->type == FQ_DEFAULT_FMPZ_MOD)
     {
         return fmpz_mod_mat_rref(NULL, A->fmpz_mod);
     }
@@ -1284,7 +1284,7 @@ FQ_DEFAULT_MAT_INLINE slong fq_default_mat_rank(const fq_default_mat_t A,
     {
         return nmod_mat_rank(A->nmod);
     }
-    else if (ctx->type == FQ_DEFAULT_NMOD)
+    else if (ctx->type == FQ_DEFAULT_FMPZ_MOD)
     {
         return fmpz_mod_mat_rank(A->fmpz_mod);
     }
-- 
2.36.1


From 989db12afc36e9a9882bbba733311ef4f404e307 Mon Sep 17 00:00:00 2001
From: Claus Fieker <fieker@mathematik.uni-kl.de>
Date: Tue, 11 Jul 2023 11:04:29 +0200
Subject: [PATCH 5/5] clear memory in case of failure

the `ctx_init_ceck` is called many times resulting in a failure.
In this case all the allocated memory leaks.
Note: failure here is not an error, it indicates that the input
polynomial is not primitive. For check this is legal
---
 fq_zech/ctx_init.c | 8 ++++++++
 1 file changed, 8 insertions(+)

diff --git a/fq_zech/ctx_init.c b/fq_zech/ctx_init.c
index 7a9817d3d..3d864c437 100644
--- a/fq_zech/ctx_init.c
+++ b/fq_zech/ctx_init.c
@@ -183,7 +183,15 @@ fq_zech_ctx_init_fq_nmod_ctx_check(fq_zech_ctx_t ctx,
         nmod_poly_evaluate_fmpz(result, r, fq_nmod_ctx_prime(fq_nmod_ctx));
         result_ui = fmpz_get_ui(result);
         if (n_reverse_table[result_ui] != ctx->qm1)
+        {   /* clean up... */
+            fq_nmod_clear(r, fq_nmod_ctx);
+            fq_nmod_clear(gen, fq_nmod_ctx);
+            flint_free(n_reverse_table);
+            fmpz_clear(result);
+            fmpz_clear(order);
+            fq_zech_ctx_clear(ctx);
             return 0; /* failure: modulus not primitive */
+        }
         n_reverse_table[result_ui] = i;
         ctx->eval_table[i] = result_ui;
         if (r->length == 1)
-- 
2.36.1

