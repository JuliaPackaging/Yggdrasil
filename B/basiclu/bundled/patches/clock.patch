--- a/basiclu/include/basiclu_clock_gettime_polyfill.h
+++ b/basiclu/include/basiclu_clock_gettime_polyfill.h
@@ -0,0 +1,41 @@
+#ifndef _BASICLU_CLOCK_GETTIME_POLYFILL_H
+#define _BASICLU_CLOCK_GETTIME_POLYFILL_H
+
+#include <windows.h>
+
+#define CLOCK_MONOTONIC_RAW -1 // this is a dummy value, unused
+
+// See https://stackoverflow.com/questions/5404277/porting-clock-gettime-to-windows
+#define MS_PER_SEC      1000ULL     // MS = milliseconds
+#define US_PER_MS       1000ULL     // US = microseconds
+#define HNS_PER_US      10ULL       // HNS = hundred-nanoseconds (e.g., 1 hns = 100 ns)
+#define NS_PER_US       1000ULL
+
+#define HNS_PER_SEC     (MS_PER_SEC * US_PER_MS * HNS_PER_US)
+#define NS_PER_HNS      (100ULL)    // NS = nanoseconds
+#define NS_PER_SEC      (MS_PER_SEC * US_PER_MS * NS_PER_US)
+
+int clock_gettime(int dummy, struct timespec *tv)
+{
+    static LARGE_INTEGER ticksPerSec;
+    LARGE_INTEGER ticks;
+    double seconds;
+
+    if (!ticksPerSec.QuadPart) {
+        QueryPerformanceFrequency(&ticksPerSec);
+        if (!ticksPerSec.QuadPart) {
+            errno = ENOTSUP;
+            return -1;
+        }
+    }
+
+    QueryPerformanceCounter(&ticks);
+
+    seconds = (double) ticks.QuadPart / (double) ticksPerSec.QuadPart;
+    tv->tv_sec = (time_t)seconds;
+    tv->tv_nsec = (long)((ULONGLONG)(seconds * NS_PER_SEC) % NS_PER_SEC);
+
+    return 0;
+}
+
+#endif
--- a/basiclu/src/lu_timer.c
+++ b/basiclu/src/lu_timer.c
@@ -1,12 +1,24 @@
 /*
  * lu_timer.c
  *
- * Wall clock timer copied from T. Davis, SuiteSparse.
+ * If Unix, use wall clock timer copied from T. Davis, SuiteSparse.
+ * If Windows, use Windows polyfill.
  *
  */
 
-#define _POSIX_C_SOURCE 199309L
 #include <time.h>
+
+#ifdef __MINGW32__
+
+// Include implementation of clock_gettime(CLOCK_MONOTONIC_RAW, ...) for Windows
+#include "basiclu_clock_gettime_polyfill.h"
+
+#else
+
+#define _POSIX_C_SOURCE 199309L
+
+#endif
+
 #include "lu_timer.h"
 
 void lu_tic (double tic[2])
