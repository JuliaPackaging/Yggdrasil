# Trigger on pushes to `master`
trigger:
- master

# Trigger on PRs against `master`
pr:
- master

variables:
    JULIA: julia --project=$(Build.SourcesDirectory)/.ci --color=yes

# TODO: remove this once we are certain we can replace the `docker` workers
pool: Testing

jobs:
- job: generator
  steps:
  - checkout: self
    fetchDepth: 99999
    clean: true
  - bash: |
      # Be fragile, like a beautiful porcelain doll
      set -e

      # Normally we look at the last pushed commit
      COMPARE_AGAINST="HEAD~1"

      # If we're on a PR though, we look at the entire branch at once
      if [[ $(Build.Reason) == "PullRequest" ]]; then
          COMPARE_AGAINST="remotes/origin/$(System.PullRequest.TargetBranch)"
      fi

      # Get the directories holding changed files
      # 1. All changed files
      # 2. Only files in directories
      # 3. dirname
      # 4. Unique the directories
      PROJECTS=$(git diff-tree --no-commit-id --name-only -r HEAD "${COMPARE_AGAINST}" | grep -E ".+/.+"| sed 's#/[^/]*$##' | sort -u)

      # If there are scary projects we need to exclude, we list them here. (Used to contain `LLVM`)
      EXCLUDED_NAMES=" "

      # This is the dynamic mapping we're going to build up, if it's empty we don't do anything
      PROJECTS_ACCEPTED=""
      for PROJECT in ${PROJECTS}; do
          NAME=$(basename "${PROJECT}")
          echo "Considering ${PROJECT}"
          # Only accept things that contain a `build_tarballs.jl`
          if [[ ! -f "${PROJECT}/build_tarballs.jl" ]]; then
              echo " --> Skipping as it does not have a build_tarballs.jl"
              continue
          fi

          # Ignore RootFS stuff, we'll do that manually
          if [[ "${PROJECT}" == "0_RootFS/"* ]]; then
              echo " --> Skipping as it's within 0_RootFS/"
              continue
          fi

          # Ignore stuff in our excluded projects
          if [[ "${EXCLUDED_NAMES}" == *" ${NAME} "* ]]; then
              echo " --> Skipping as it's excluded"
              continue
          fi

          # Otherwise, emit a build with `PROJECT` set to `${PROJECT}`
          echo " --> Accepted!"
          PROJECTS_ACCEPTED="${PROJECTS_ACCEPTED} ${PROJECT}"
      done
      if [[ -n "${PROJECTS_ACCEPTED}" ]]; then
          if [[ $(echo "${PROJECTS_ACCEPTED}" | awk '{print NF}') -gt 5 ]]; then
              echo "Too many projects requested"
              exit 1
          fi

          # Next, we're going to ensure that our BB is up to date and precompiled
          $(JULIA) -e "import Pkg; Pkg.instantiate(); using BinaryBuilder"

          # Next, for each project, download its sources. We do this by generating meta.json
          # files, then parsing them with `download_sources.jl`
          for PROJECT in ${PROJECTS_ACCEPTED}; do
              NAME=$(basename ${PROJECT})

              # We always invoke a `build_tarballs.jl` file from its own directory
              pushd ${PROJECT} >/dev/null
              echo "Generating meta.json..."
              JSON_PATH="$(Agent.TempDirectory)/${NAME}.meta.json"
              $(JULIA) ./build_tarballs.jl --meta-json="${JSON_PATH}"
              echo "Downloading sources..."
              $(JULIA) $(Build.SourcesDirectory)/.ci/download_sources.jl "${JSON_PATH}" $(Agent.TempDirectory)/${NAME}.platforms.list

              # Pop back up to the overworld
              popd >/dev/null
          done

          # Emit project variable declarations
          echo -n "##vso[task.setVariable variable=projects;isOutput=true]{"
          for PROJECT in ${PROJECTS_ACCEPTED}; do
              NAME=$(basename ${PROJECT})
              echo -n "'${NAME}':{'NAME': '${NAME}', 'PROJECT':'${PROJECT}'}, "
          done
          echo "}"

          # Emit project/platform joint variable declarations
          echo -n "##vso[task.setVariable variable=projplatforms;isOutput=true]{"
          for PROJECT in ${PROJECTS_ACCEPTED}; do
              NAME=$(basename ${PROJECT})

              # Load in the platforms
              PLATFORMS=$(cat $(Agent.TempDirectory)/${NAME}.platforms.list)
              if [[ -n "${PLATFORMS}" ]]; then
                  for PLATFORM in ${PLATFORMS}; do
                      echo -n "'${NAME}-${PLATFORM}':{'NAME': '${NAME}', 'PROJECT':'${PROJECT}', 'PLATFORM':'${PLATFORM}'}, "
                  done
              else
                  # If we were unable to determine the proper platforms, then create a single output with empty platform
                  echo -n "'${NAME}-${PLATFORM}':{'NAME': '${NAME}', 'PROJECT':'${PROJECT}', 'PLATFORM':''}, "
              fi
          done
          echo "}"
      fi
    name: mtrx

- job: build
  dependsOn: generator
  timeoutInMinutes: 240
  cancelTimeoutInMinutes: 2
  strategy:
    matrix: $[ dependencies.generator.outputs['mtrx.projplatforms'] ]
  variables:
    projplatforms: $[ dependencies.generator.outputs['mtrx.projplatforms'] ]
  steps:
  - script: |
      # If we're on master and this is not a pull request, then DEPLOY.  NOTE: A
      # manual rebuild of a PR in Azure web interface is not a `PullRequest`
      DEPLOY=""
      if [[ "$(Build.Reason)" != "PullRequest" ]] && [[ "$(Build.SourceBranch)" == "refs/heads/master" ]] ; then
          DEPLOY="--deploy-bin"
      fi

      cd $(PROJECT)
      $(JULIA) ./build_tarballs.jl --verbose ${DEPLOY} $(PLATFORM)
    displayName: "run build_tarballs.jl"
    condition: ne(variables['projplatforms'], '')

- job: register
  dependsOn:
  - generator
  - build
  strategy:
    matrix: $[ dependencies.generator.outputs['mtrx.projects'] ]
    maxParallel: 1
  variables:
    projects: $[ dependencies.generator.outputs['mtrx.projects'] ]
  steps:
  - script: |
      cd $(PROJECT)
      echo "Generating meta.json..."
      $(JULIA) ./build_tarballs.jl --meta-json=$(Agent.TempDirectory)/$(NAME).meta.json
      echo "Registering $(NAME)..."
      $(JULIA) $(Build.SourcesDirectory)/.ci/register_package.jl $(Agent.TempDirectory)/$(NAME).meta.json --verbose
    displayName: "register JLL package"
    # We only register if this is on `master`; same as setting `${DEPLOY}` above.
    condition: and(and(ne(variables['Build.Reason'], 'PullRequest'), eq(variables['Build.SourceBranch'], 'refs/heads/master')), ne(variables['projects'], ''))

- job: cleanup
  dependsOn:
  - build
  - register
  condition: always()
  steps:
  - script: |
      docker rmi bb_worker:$(Build.SourceVersion) || true
    displayName: "Cleanup docker image"
    # Use always() so that we run regardless of whether previous steps were successful or not
  - script: |
      rm -f *.meta.json *.platform.list
    displayName: "Cleanup meta files"
