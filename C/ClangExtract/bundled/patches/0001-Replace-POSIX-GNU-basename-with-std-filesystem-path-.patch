From b26c74aeb853c82fc96c65f9c402c798e68690d3 Mon Sep 17 00:00:00 2001
From: Keno Fischer <Keno@users.noreply.github.com>
Date: Fri, 3 Oct 2025 12:21:39 +0000
Subject: [PATCH] Replace POSIX/GNU basename() with
 std::filesystem::path::filename()

There are two versions of C basename (one POSIX, one GNU) with incompatible semantics.
The existing version is inconsistent, selecting the GNU version in one case, and making no specific selection
in the other (causing build failures on musl). Just avoid this mess entirely by using std::filesystem which has
well defined semantics and should be available since this project already requires C++20.
---
 libcextract/ArgvParser.cpp    | 5 ++---
 libcextract/SymversParser.cpp | 4 ++--
 2 files changed, 4 insertions(+), 5 deletions(-)

diff --git a/libcextract/ArgvParser.cpp b/libcextract/ArgvParser.cpp
index eaa3d1b..8c68f9b 100644
--- a/libcextract/ArgvParser.cpp
+++ b/libcextract/ArgvParser.cpp
@@ -16,14 +16,13 @@
 #include "ArgvParser.hh"
 #include "NonLLVMMisc.hh"
 #include "Error.hh"
+#include <filesystem>
 
 #include <clang/Basic/Version.h>
 
 #ifndef _GNU_SOURCE
 #define _GNU_SOURCE
 #endif
-/* Use the basename version that doesn't change the input string */
-#include <string.h>
 
 #ifndef CLANG_VERSION_MAJOR
 # error "Unable to find clang version"
@@ -99,7 +98,7 @@ ArgvParser::ArgvParser(int argc, char **argv)
    * are not the same, it means that the module from PatchObject is builtin, so
    * assign vmlinux to PatchObject. */
   if (Kernel && DebuginfoPath) {
-    std::string obj_path = basename(DebuginfoPath);
+    std::string obj_path = std::filesystem::path(DebuginfoPath).filename().string();
     /* As the DebugInfo can point to a file with suffix (btrfs.ko for example),
      * check the substring */
     if (obj_path.find(PatchObject) == std::string::npos)
diff --git a/libcextract/SymversParser.cpp b/libcextract/SymversParser.cpp
index 89c5b8a..3f35d43 100644
--- a/libcextract/SymversParser.cpp
+++ b/libcextract/SymversParser.cpp
@@ -14,12 +14,12 @@
 /* Author: Marcos de Paulo Souza  */
 
 #include "SymversParser.hh"
+#include <filesystem>
 
 #include <iostream>
 #include <fstream>
 #include <string>
 #include <sstream>
-#include <libgen.h>
 
 Symvers::Symvers(const std::string &path)
     : Parser(path)
@@ -64,7 +64,7 @@ void Symvers::Parse()
     std::getline(ss, sym_mod, '\t');
 
     // Only get the name of the module, instead of the path to it
-    Symbol sym(sym_name, basename(sym_mod.data()));
+    Symbol sym(sym_name, std::filesystem::path(sym_mod).filename().string().c_str());
     Insert_Symbols_Into_Hash(sym);
   }
 }
-- 
2.50.1

