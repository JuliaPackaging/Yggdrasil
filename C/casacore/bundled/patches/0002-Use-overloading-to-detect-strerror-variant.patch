From fc4daf5978091db1a078b4a04d17585247128e77 Mon Sep 17 00:00:00 2001
From: Kiran Shila <me@kiranshila.com>
Date: Sat, 11 Jun 2022 14:15:58 -0700
Subject: [PATCH] Use overloading to detect strerror variant

---
 casa/Exceptions/Error2.cc | 18 +++++++++---------
 1 file changed, 9 insertions(+), 9 deletions(-)

diff --git a/casa/Exceptions/Error2.cc b/casa/Exceptions/Error2.cc
index b372f4ccf..8de3a7e6e 100644
--- a/casa/Exceptions/Error2.cc
+++ b/casa/Exceptions/Error2.cc
@@ -213,19 +213,19 @@ SystemCallError::SystemCallError (int error, const String &msg,
 {}
 SystemCallError::~SystemCallError() noexcept
 {}
+String strerror_overload(int err)
+{
+  return "errno " + String::toString(err);
+}
+String strerror_overload(char *err)
+{
+  return err;
+}
 String SystemCallError::errorMessage(int error)
 {
   // Use strerror_r for thread-safety.
   char buffer[128];
-  // There are two incompatible versions of versions of strerror_r()
-#if !__linux__ || (!_GNU_SOURCE && (_POSIX_C_SOURCE >= 200112L || _XOPEN_SOURCE >= 600))
-  if (strerror_r(error, buffer, sizeof buffer) == 0) {
-    return String(buffer);
-  }
-  return "errno " + String::toString(error);
-#else
-  return strerror_r(error, buffer, sizeof buffer);
-#endif
+  return strerror_overload(strerror_r(error, buffer, sizeof buffer));
 }
 
 
-- 
2.36.1

