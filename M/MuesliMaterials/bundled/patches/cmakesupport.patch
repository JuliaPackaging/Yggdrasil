diff --git a/CMakeLists.txt b/CMakeLists.txt
new file mode 100644
index 0000000..50ac395
--- /dev/null
+++ b/CMakeLists.txt
@@ -0,0 +1,105 @@
+# SPDX-FileCopyrightText: 2021-2024 The Ikarus Developers mueller@ibb.uni-stuttgart.de
+# SPDX-License-Identifier: LGPL-3.0-or-later
+
+# This file is intended to generate a CMake project for the Muesli material library, and is not part of said library
+
+cmake_minimum_required(VERSION 3.10)
+
+project(muesli)
+project(muesli VERSION 1.0.0) 
+
+include_directories(".")
+
+set(CMAKE_CXX_STANDARD 17)          
+set(CMAKE_CXX_STANDARD_REQUIRED ON) 
+
+file(GLOB SRC_FILES
+  "muesli/*.cpp"
+  "muesli/Damage/*.cpp"
+  "muesli/Datadriven/*.cpp"
+  "muesli/Diffusion/*.cpp"
+  "muesli/Failure/*.cpp"
+  "muesli/Fcoupled/*.cpp"
+  "muesli/Finitestrain/*.cpp"
+  "muesli/Fluid/*.cpp"
+  "muesli/Interface/*.cpp"
+  "muesli/Math/*.cpp"
+  "muesli/Scoupled/*.cpp"
+  "muesli/Smallstrain/*.cpp"
+  "muesli/Thermal/*.cpp"
+  "muesli/Utils/*.cpp"
+)
+
+file(GLOB HEADER_FILES
+  "muesli/*.h"
+  "muesli/Damage/*.h"
+  "muesli/Datadriven/*.h"
+  "muesli/Diffusion/*.h"
+  "muesli/Failure/*.h"
+  "muesli/Fcoupled/*.h"
+  "muesli/Finitestrain/*.h"
+  "muesli/Fluid/*.h"
+  "muesli/Interface/*.h"
+  "muesli/Math/*.h"
+  "muesli/Scoupled/*.h"
+  "muesli/Smallstrain/*.h"
+  "muesli/Thermal/*.h"
+  "muesli/Utils/*.h"
+)
+
+add_library(muesli SHARED ${SRC_FILES} ${HEADER_FILES})
+
+target_include_directories(muesli
+  PUBLIC
+  $<BUILD_INTERFACE:${CMAKE_CURRENT_SOURCE_DIR}>
+  $<INSTALL_INTERFACE:include>
+)
+install(TARGETS muesli EXPORT muesli-targets
+  LIBRARY DESTINATION lib
+  ARCHIVE DESTINATION lib
+)
+
+install(DIRECTORY muesli
+  DESTINATION include/
+  FILES_MATCHING PATTERN "*.h"
+)
+install(EXPORT muesli-targets
+  FILE MuesliTargets.cmake
+  DESTINATION lib/cmake/Muesli)
+
+include(CMakePackageConfigHelpers)
+
+# Use -fPIC to generate position-independent code required for linking into shared libraries.
+set_property(TARGET muesli PROPERTY POSITION_INDEPENDENT_CODE ON)
+
+find_package(BLAS REQUIRED)
+find_package(LAPACK REQUIRED)
+
+# Link the found libraries into your muesli target
+target_link_libraries(muesli
+    PUBLIC
+    ${BLAS_LIBRARIES}
+    ${LAPACK_LIBRARIES}
+)
+
+# generate the config file that includes the exports
+configure_package_config_file(${CMAKE_CURRENT_SOURCE_DIR}/MuesliConfig.cmake.in
+  "${CMAKE_CURRENT_BINARY_DIR}/MuesliConfig.cmake"
+  INSTALL_DESTINATION "lib/cmake/Muesli"  
+  NO_SET_AND_CHECK_MACRO
+  NO_CHECK_REQUIRED_COMPONENTS_MACRO
+)
+
+
+# generate the version file for the config file
+write_basic_package_version_file(
+  "${CMAKE_CURRENT_BINARY_DIR}/MuesliConfigVersion.cmake"
+  VERSION ${PROJECT_VERSION}
+  COMPATIBILITY AnyNewerVersion
+)
+
+# install the configuration file
+install(FILES
+  ${CMAKE_CURRENT_BINARY_DIR}/MuesliConfig.cmake
+  DESTINATION lib/cmake/Muesli
+)
diff --git a/MuesliConfig.cmake.in b/MuesliConfig.cmake.in
new file mode 100644
index 0000000..80cc502
--- /dev/null
+++ b/MuesliConfig.cmake.in
@@ -0,0 +1,3 @@
+@PACKAGE_INIT@
+
+include ( "${CMAKE_CURRENT_LIST_DIR}/MuesliTargets.cmake" )
